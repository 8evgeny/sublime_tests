#include "tmml_cl.hpp"

using namespace std;
using namespace cv;
using namespace cl;

#ifdef ARCH_X86_64
void tmml_cl::get_cl_string(string& kernel_str)
{
   kernel_str = ""
   "__constant int4 MAGIC_INT = (int4)("+to_string(TEMPLATE_WIDTH)+", "+to_string(WORK_WIDTH)+", "+to_string(RESULT_WIDTH)+", 0);\n"
   "__constant float4 MAGIC_FLOAT = (float4)(" + to_string(TEMPLATE_AREA_1) + ", 0, 0, 0);\n"
   "\n"
   "struct Pix\n"
   "{\n"
   "   unsigned char x;\n"
   "   unsigned char y;\n"
   "   float bright;\n"
   "}; // END struct Pix\n"
   "\n"
   "__kernel void work_cl(__global  unsigned char * img_work,\n"
   "__global  unsigned char * img_temp,\n"
   "__global  float * img_result,\n"
   "__global  int * maxVal_int,\n"
   "__global  struct Pix * pix_max)\n"
   "{\n"
   "  int4 result = (int4)(get_global_id(0) % MAGIC_INT.s2, get_global_id(0) / MAGIC_INT.s2, get_global_id(0), 0);\n"
   "  int8 sum_roi_temp = 0;\n"
   "  int8 sum_temp_temp = 0;\n"
   "  int8 sum_roi_roi = 0;\n"
   "  int8 sum_roi = 0;\n"
   "  int8 sum_temp = 0;\n"
   "  int temp_id = 0;\n"
   "\n"
   "  for(int tmp_y = 0; tmp_y < MAGIC_INT.s0; ++tmp_y)\n"
   "  {\n"
   "    int8 roi_id0 = (int8)((result.y + tmp_y) * MAGIC_INT.s1 + result.x, (result.y + tmp_y) * MAGIC_INT.s1 + result.x + 1,\n"
   "    (result.y + tmp_y) * MAGIC_INT.s1 + result.x + 2, (result.y + tmp_y) * MAGIC_INT.s1 + result.x + 3,\n"
   "    (result.y + tmp_y) * MAGIC_INT.s1 + result.x + 4, (result.y + tmp_y) * MAGIC_INT.s1 + result.x + 5,\n"
   "    (result.y + tmp_y) * MAGIC_INT.s1 + result.x + 6, (result.y + tmp_y) * MAGIC_INT.s1 + result.x + 7);\n"
   "\n"
   "    for(int tmp_x = 0; tmp_x < MAGIC_INT.s0; tmp_x += 8, temp_id += 8)\n"
   "    {\n"
   "      int8 temp = (int8)(img_temp[temp_id], img_temp[temp_id + 1], img_temp[temp_id + 2], img_temp[temp_id + 3],\n"
   "      img_temp[temp_id + 4], img_temp[temp_id + 5], img_temp[temp_id + 6], img_temp[temp_id + 7]);\n"
   "\n"
   "      int8 roi = (int8)(img_work[roi_id0.s0 + tmp_x], img_work[roi_id0.s1 + tmp_x], img_work[roi_id0.s2 + tmp_x], img_work[roi_id0.s3 + tmp_x],\n"
   "      img_work[roi_id0.s4 + tmp_x], img_work[roi_id0.s5 + tmp_x], img_work[roi_id0.s6 + tmp_x], img_work[roi_id0.s7 + tmp_x]);\n"
   "\n"
   "      sum_roi_temp.s0 += roi.s0 * temp.s0;\n"
   "      sum_roi_temp.s1 += roi.s1 * temp.s1;\n"
   "      sum_roi_temp.s2 += roi.s2 * temp.s2;\n"
   "      sum_roi_temp.s3 += roi.s3 * temp.s3;\n"
   "      sum_roi_temp.s4 += roi.s4 * temp.s4;\n"
   "      sum_roi_temp.s5 += roi.s5 * temp.s5;\n"
   "      sum_roi_temp.s6 += roi.s6 * temp.s6;\n"
   "      sum_roi_temp.s7 += roi.s7 * temp.s7;\n"
   "\n"
   "      sum_temp_temp.s0 += temp.s0 * temp.s0;\n"
   "      sum_temp_temp.s1 += temp.s1 * temp.s1;\n"
   "      sum_temp_temp.s2 += temp.s2 * temp.s2;\n"
   "      sum_temp_temp.s3 += temp.s3 * temp.s3;\n"
   "      sum_temp_temp.s4 += temp.s4 * temp.s4;\n"
   "      sum_temp_temp.s5 += temp.s5 * temp.s5;\n"
   "      sum_temp_temp.s6 += temp.s6 * temp.s6;\n"
   "      sum_temp_temp.s7 += temp.s7 * temp.s7;\n"
   "\n"
   "      sum_roi_roi.s0 += roi.s0 * roi.s0;\n"
   "      sum_roi_roi.s1 += roi.s1 * roi.s1;\n"
   "      sum_roi_roi.s2 += roi.s2 * roi.s2;\n"
   "      sum_roi_roi.s3 += roi.s3 * roi.s3;\n"
   "      sum_roi_roi.s4 += roi.s4 * roi.s4;\n"
   "      sum_roi_roi.s5 += roi.s5 * roi.s5;\n"
   "      sum_roi_roi.s6 += roi.s6 * roi.s6;\n"
   "      sum_roi_roi.s7 += roi.s7 * roi.s7;\n"
   "\n"
   "      sum_roi.s0 += roi.s0;\n"
   "      sum_roi.s1 += roi.s1;\n"
   "      sum_roi.s2 += roi.s2;\n"
   "      sum_roi.s3 += roi.s3;\n"
   "      sum_roi.s4 += roi.s4;\n"
   "      sum_roi.s5 += roi.s5;\n"
   "      sum_roi.s6 += roi.s6;\n"
   "      sum_roi.s7 += roi.s7;\n"
   "\n"
   "      sum_temp.s0 += temp.s0;\n"
   "      sum_temp.s1 += temp.s1;\n"
   "      sum_temp.s2 += temp.s2;\n"
   "      sum_temp.s3 += temp.s3;\n"
   "      sum_temp.s4 += temp.s4;\n"
   "      sum_temp.s5 += temp.s5;\n"
   "      sum_temp.s6 += temp.s6;\n"
   "      sum_temp.s7 += temp.s7;\n"
   "    } // END for(int tmp_x = 0; tmp_x < MAGIC_INT.s0; ++tmp_x)\n"
   "  } // END for(int tmp_y = 0; tmp_y < MAGIC_INT.s0; ++tmp_y)\n"
   "\n"
   "  const float sum_roi_temp1  = MAGIC_FLOAT.s0 * (sum_roi_temp.s0 + sum_roi_temp.s1 + sum_roi_temp.s2 + sum_roi_temp.s3 + sum_roi_temp.s4 + sum_roi_temp.s5 + sum_roi_temp.s6 + sum_roi_temp.s7);\n"
   "  const float sum_roi1 = MAGIC_FLOAT.s0 * (sum_roi.s0 + sum_roi.s1 + sum_roi.s2 + sum_roi.s3 + sum_roi.s4 + sum_roi.s5 + sum_roi.s6 + sum_roi.s7);\n"
   "  const float sum_temp1 = MAGIC_FLOAT.s0 * (sum_temp.s0 + sum_temp.s1 + sum_temp.s2 + sum_temp.s3 + sum_temp.s4 + sum_temp.s5 + sum_temp.s6 + sum_temp.s7);\n"
   "  const float sum_roi_roi1 = MAGIC_FLOAT.s0 * (sum_roi_roi.s0 + sum_roi_roi.s1 + sum_roi_roi.s2 + sum_roi_roi.s3 + sum_roi_roi.s4 + sum_roi_roi.s5 + sum_roi_roi.s6 + sum_roi_roi.s7);\n"
   "  const float sum_temp_temp1 = MAGIC_FLOAT.s0 * (sum_temp_temp.s0 + sum_temp_temp.s1 + sum_temp_temp.s2 + sum_temp_temp.s3 + sum_temp_temp.s4 + sum_temp_temp.s5 + sum_temp_temp.s6 + sum_temp_temp.s7);\n"
   "\n"
   "  const float ch  = sum_roi_temp1 - sum_roi1 * sum_temp1;\n"
   "  const float zn1 = sum_temp_temp1 - sum_temp1 * sum_temp1;\n"
   "  const float zn2 = sum_roi_roi1 - sum_roi1 * sum_roi1;\n"
   "  const float diff_roi_temp2 = sum_roi_roi1 + sum_temp_temp1 - 2.f * sum_roi_temp1;\n"
   "\n"
   "  const float img_result_float = ";
 #ifdef COMBINED
   kernel_str += "ch / sqrt(zn1 * zn2) - " + to_string(KOEFF2LIB) + " * ";
 #endif // END #ifdef COMBINED
#ifdef SQDIFF_NORMED
  kernel_str += "1.f - ";
#endif // END #ifdef SQDIFF_NORMED
   kernel_str += "diff_roi_temp2 / sqrt(sum_roi_roi1 * sum_temp_temp1);\n"
   "\n"
   "  const int img_result_int = img_result_float * 1000000;\n"
   "  atomic_max(maxVal_int, img_result_int);\n"
   "  barrier(CLK_GLOBAL_MEM_FENCE);\n"
   "  if((*maxVal_int) == img_result_int)\n"
   "  {\n"
   "     (*pix_max).bright = img_result_float;\n"
   "     (*pix_max).x = result.x;\n"
   "     (*pix_max).y = result.y;\n"
   "  } // END if((*maxVal_int) == img_result_int)\n"
   "  img_result[result.s2] = img_result_float;\n"
   "} // END work_cl\n"
   "";
} // END get_cl_string
#endif // END #ifdef ARCH_X86_64

#ifdef ARCH_ARM
void tmml_cl::get_cl_string(string& kernel_str)
{
   kernel_str = ""
   "__constant int4 MAGIC_INT = (int4)("+to_string(TEMPLATE_WIDTH)+", "+to_string(WORK_WIDTH)+", "+to_string(RESULT_WIDTH)+", 0);\n"
   "__constant float4 MAGIC_FLOAT = (float4)(" + to_string(TEMPLATE_AREA_1) + ", 0, 0, 0);\n"
   "\n"
   "struct Pix\n"
   "{\n"
   "   unsigned char x;\n"
   "   unsigned char y;\n"
   "   float bright;\n"
   "}; // END struct Pix\n"
   "\n"
   "__kernel void work_cl(__global  unsigned char * img_work,\n"
   "__global  unsigned char * img_temp,\n"
   "__global  float * img_result,\n"
   "__global  int * maxVal_int,\n"
   "__global  struct Pix * pix_max)\n"
   "{\n"
   "  int4 result = (int4)(get_global_id(0) % MAGIC_INT.s2, get_global_id(0) / MAGIC_INT.s2, get_global_id(0), 0);\n"
   "  int8 sum_roi_temp = 0;\n"
   "  int8 sum_temp_temp = 0;\n"
   "  int8 sum_roi_roi = 0;\n"
   "  int8 sum_roi = 0;\n"
   "  int8 sum_temp = 0;\n"
   "  int temp_id = 0;\n"
   "\n"
   "  for(int tmp_y = 0; tmp_y < MAGIC_INT.s0; ++tmp_y)\n"
   "  {\n"
   "    int8 roi_id0 = (int8)((result.y + tmp_y) * MAGIC_INT.s1 + result.x, (result.y + tmp_y) * MAGIC_INT.s1 + result.x + 1,\n"
   "    (result.y + tmp_y) * MAGIC_INT.s1 + result.x + 2, (result.y + tmp_y) * MAGIC_INT.s1 + result.x + 3,\n"
   "    (result.y + tmp_y) * MAGIC_INT.s1 + result.x + 4, (result.y + tmp_y) * MAGIC_INT.s1 + result.x + 5,\n"
   "    (result.y + tmp_y) * MAGIC_INT.s1 + result.x + 6, (result.y + tmp_y) * MAGIC_INT.s1 + result.x + 7);\n"
   "\n"
   "    for(int tmp_x = 0; tmp_x < MAGIC_INT.s0; tmp_x += 8, temp_id += 8)\n"
   "    {\n"
   "      int8 temp = (int8)(img_temp[temp_id], img_temp[temp_id + 1], img_temp[temp_id + 2], img_temp[temp_id + 3],\n"
   "      img_temp[temp_id + 4], img_temp[temp_id + 5], img_temp[temp_id + 6], img_temp[temp_id + 7]);\n"
   "\n"
   "      int8 roi = (int8)(img_work[roi_id0.s0 + tmp_x], img_work[roi_id0.s1 + tmp_x], img_work[roi_id0.s2 + tmp_x], img_work[roi_id0.s3 + tmp_x],\n"
   "      img_work[roi_id0.s4 + tmp_x], img_work[roi_id0.s5 + tmp_x], img_work[roi_id0.s6 + tmp_x], img_work[roi_id0.s7 + tmp_x]);\n"
   "\n"
   "      sum_roi_temp.s0 += roi.s0 * temp.s0;\n"
   "      sum_roi_temp.s1 += roi.s1 * temp.s1;\n"
   "      sum_roi_temp.s2 += roi.s2 * temp.s2;\n"
   "      sum_roi_temp.s3 += roi.s3 * temp.s3;\n"
   "      sum_roi_temp.s4 += roi.s4 * temp.s4;\n"
   "      sum_roi_temp.s5 += roi.s5 * temp.s5;\n"
   "      sum_roi_temp.s6 += roi.s6 * temp.s6;\n"
   "      sum_roi_temp.s7 += roi.s7 * temp.s7;\n"
   "\n"
   "      sum_temp_temp.s0 += temp.s0 * temp.s0;\n"
   "      sum_temp_temp.s1 += temp.s1 * temp.s1;\n"
   "      sum_temp_temp.s2 += temp.s2 * temp.s2;\n"
   "      sum_temp_temp.s3 += temp.s3 * temp.s3;\n"
   "      sum_temp_temp.s4 += temp.s4 * temp.s4;\n"
   "      sum_temp_temp.s5 += temp.s5 * temp.s5;\n"
   "      sum_temp_temp.s6 += temp.s6 * temp.s6;\n"
   "      sum_temp_temp.s7 += temp.s7 * temp.s7;\n"
   "\n"
   "      sum_roi_roi.s0 += roi.s0 * roi.s0;\n"
   "      sum_roi_roi.s1 += roi.s1 * roi.s1;\n"
   "      sum_roi_roi.s2 += roi.s2 * roi.s2;\n"
   "      sum_roi_roi.s3 += roi.s3 * roi.s3;\n"
   "      sum_roi_roi.s4 += roi.s4 * roi.s4;\n"
   "      sum_roi_roi.s5 += roi.s5 * roi.s5;\n"
   "      sum_roi_roi.s6 += roi.s6 * roi.s6;\n"
   "      sum_roi_roi.s7 += roi.s7 * roi.s7;\n"
   "\n"
   "      sum_roi.s0 += roi.s0;\n"
   "      sum_roi.s1 += roi.s1;\n"
   "      sum_roi.s2 += roi.s2;\n"
   "      sum_roi.s3 += roi.s3;\n"
   "      sum_roi.s4 += roi.s4;\n"
   "      sum_roi.s5 += roi.s5;\n"
   "      sum_roi.s6 += roi.s6;\n"
   "      sum_roi.s7 += roi.s7;\n"
   "\n"
   "      sum_temp.s0 += temp.s0;\n"
   "      sum_temp.s1 += temp.s1;\n"
   "      sum_temp.s2 += temp.s2;\n"
   "      sum_temp.s3 += temp.s3;\n"
   "      sum_temp.s4 += temp.s4;\n"
   "      sum_temp.s5 += temp.s5;\n"
   "      sum_temp.s6 += temp.s6;\n"
   "      sum_temp.s7 += temp.s7;\n"
   "    } // END for(int tmp_x = 0; tmp_x < MAGIC_INT.s0; ++tmp_x)\n"
   "  } // END for(int tmp_y = 0; tmp_y < MAGIC_INT.s0; ++tmp_y)\n"
   "\n"
   "  const float sum_roi_temp1  = MAGIC_FLOAT.s0 * (sum_roi_temp.s0 + sum_roi_temp.s1 + sum_roi_temp.s2 + sum_roi_temp.s3 + sum_roi_temp.s4 + sum_roi_temp.s5 + sum_roi_temp.s6 + sum_roi_temp.s7);\n"
   "  const float sum_roi1 = MAGIC_FLOAT.s0 * (sum_roi.s0 + sum_roi.s1 + sum_roi.s2 + sum_roi.s3 + sum_roi.s4 + sum_roi.s5 + sum_roi.s6 + sum_roi.s7);\n"
   "  const float sum_temp1 = MAGIC_FLOAT.s0 * (sum_temp.s0 + sum_temp.s1 + sum_temp.s2 + sum_temp.s3 + sum_temp.s4 + sum_temp.s5 + sum_temp.s6 + sum_temp.s7);\n"
   "  const float sum_roi_roi1 = MAGIC_FLOAT.s0 * (sum_roi_roi.s0 + sum_roi_roi.s1 + sum_roi_roi.s2 + sum_roi_roi.s3 + sum_roi_roi.s4 + sum_roi_roi.s5 + sum_roi_roi.s6 + sum_roi_roi.s7);\n"
   "  const float sum_temp_temp1 = MAGIC_FLOAT.s0 * (sum_temp_temp.s0 + sum_temp_temp.s1 + sum_temp_temp.s2 + sum_temp_temp.s3 + sum_temp_temp.s4 + sum_temp_temp.s5 + sum_temp_temp.s6 + sum_temp_temp.s7);\n"
   "\n"
   "  const float ch  = sum_roi_temp1 - sum_roi1 * sum_temp1;\n"
   "  const float zn1 = sum_temp_temp1 - sum_temp1 * sum_temp1;\n"
   "  const float zn2 = sum_roi_roi1 - sum_roi1 * sum_roi1;\n"
   "  const float diff_roi_temp2 = sum_roi_roi1 + sum_temp_temp1 - 2.f * sum_roi_temp1;\n"
   "\n"
   "  const float img_result_float = ";
 #ifdef COMBINED
   kernel_str += "ch / sqrt(zn1 * zn2) - " + to_string(KOEFF2LIB) + " * ";
 #endif // END #ifdef COMBINED
#ifdef SQDIFF_NORMED
  kernel_str += "1.f - ";
#endif // END #ifdef SQDIFF_NORMED
   kernel_str += "diff_roi_temp2 / sqrt(sum_roi_roi1 * sum_temp_temp1);\n"
   "\n"
   "  const int img_result_int = img_result_float * 1000000;\n"
   "  atomic_max(maxVal_int, img_result_int);\n"
   "  barrier(CLK_GLOBAL_MEM_FENCE);\n"
   "  if((*maxVal_int) == img_result_int)\n"
   "  {\n"
   "     (*pix_max).bright = img_result_float;\n"
   "     (*pix_max).x = result.x;\n"
   "     (*pix_max).y = result.y;\n"
   "  } // END if((*maxVal_int) == img_result_int)\n"
   "  img_result[result.s2] = img_result_float;\n"
   "} // END work_cl\n"
   "";
} // END get_cl_string
#endif // END #ifdef ARCH_ARM
