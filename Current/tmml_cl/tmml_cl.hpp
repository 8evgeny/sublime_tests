#pragma once
#include "CL/cl.hpp"
#include "opencv2/imgcodecs.hpp"
#include "opencv2/highgui.hpp"
#include "opencv2/imgproc.hpp"
#include <iostream>
#include <fstream>
const int SOURCE_WIDTH = EXT_VAL * TEMPLATE_WIDTH;
const int SOURCE_HEIGHT = EXT_VAL * TEMPLATE_HEIGHT;
const int WORK_WIDTH = SOURCE_WIDTH - 1;
const int WORK_HEIGHT = SOURCE_HEIGHT - 1;
const int WORK_AREA = WORK_WIDTH * WORK_HEIGHT;
const int RESULT_WIDTH = WORK_WIDTH - TEMPLATE_WIDTH + 1;
const int RESULT_HEIGHT = WORK_HEIGHT - TEMPLATE_HEIGHT + 1;
const int RESULT_AREA = RESULT_WIDTH * RESULT_HEIGHT;
const int TEMPLATE_AREA = TEMPLATE_WIDTH * TEMPLATE_HEIGHT;
const float RESULT_AREA_1 = 1.f / RESULT_AREA;
const float TEMPLATE_WIDTH_1 = 1.f / TEMPLATE_WIDTH;

#define KERNEL_FILE "tmml.cl"

#ifdef SQDIFF_NORMED
    #define KERNEL_NAME "work_cl_2"
#endif
#ifdef CCOEFF_NORMED
    #define KERNEL_NAME "work_cl_6"
#endif
#ifdef COMBINED
    #define KERNEL_NAME "work_cl_8"
#endif

struct Pix
{
    unsigned char x = 0;
    unsigned char y = 0;
    float bright = 0;
}; // END Pix

class tmml_cl
{
  public:
    tmml_cl(bool& ok, float& min_max_Val0);
    ~tmml_cl();

    cv::Mat img_result;
    void work_tmml(const cv::Mat & img_work, const cv::Mat & img_temp, Pix & max_pix);
    const Pix max_pix0;
    Pix max_pix = max_pix0;

    void loadDataMatToUchar(unsigned char *data, const cv::Mat &image);
    void uintToMat(const unsigned int *data, cv::Mat &image);
    std::unique_ptr<cl_float[]> mData_ptr = nullptr;

  private:
    unsigned char img_temp_arr[TEMPLATE_AREA];
    unsigned char img_work_arr[WORK_AREA];
    std::string kernel_source{""};
    cl::Kernel tmml_cl_kernel;
    cl::Buffer img_work_buff, img_temp_buff, img_result_buff;
    cl::CommandQueue queue;
    cl::Context context;
    cl::Program program;
    cl::Device default_device;
    std::vector<cl::Device> all_devices;
    cl::Platform default_platform;
    std::vector<cl::Platform> all_platforms;
    std::unique_ptr<cl_uchar[]> imageData_ptr = nullptr;
    std::unique_ptr<cl_uchar[]> templateData_ptr = nullptr;

    double minVal, maxVal;
    cv::Point minLoc, maxLoc;

    void initDevice(bool & init_OK);
    void loadAndBuildProgram(bool & init_OK, const std::string & programFile);
    std::string loadKernelFile(const std::string & program);

#ifndef KernelFromFile
    const std::string programm_CL //  \n ->  \\n"\n"
    {
        "__constant int TEMPLATE_WIDTH = 48;\n"
        "__constant int TEMPLATE_HEIGHT = 48;\n"
        "__constant int EXT_VAL = 5;\n"
        "__constant int SOURCE_WIDTH = EXT_VAL * TEMPLATE_WIDTH;\n"
        "__constant int SOURCE_HEIGHT = EXT_VAL * TEMPLATE_HEIGHT;\n"
        "__constant int WORK_WIDTH = SOURCE_WIDTH - 1;\n"
        "__constant int WORK_HEIGHT = SOURCE_HEIGHT - 1;\n"
        "__constant int RESULT_WIDTH = WORK_WIDTH - TEMPLATE_WIDTH + 1;\n"
        "__constant int RESULT_HEIGHT = WORK_HEIGHT - TEMPLATE_HEIGHT + 1;\n"
        "__constant int RESULT_AREA = RESULT_WIDTH * RESULT_HEIGHT;\n"
        "__constant int TEMPLATE_AREA = TEMPLATE_WIDTH * TEMPLATE_HEIGHT;\n"
        "__constant float RESULT_AREA_1 = 1.f / RESULT_AREA;\n"
        "__constant float TEMPLATE_WIDTH_1 = 1.f / TEMPLATE_WIDTH;\n"
        "__constant float TEMPLATE_AREA_1 = 1.f / TEMPLATE_AREA;\n"
        "__constant int k_float_to_int = 1000000;\n"
        "typedef struct tag_result\n"
        "{\n"
        "    int xpos;\n"
        "    int ypos;\n"
        "    unsigned int tm_result;\n"
        "}result;\n"
        "__kernel void work_cl_2(__global unsigned char * imData, __global unsigned char * tmData, __global result* res, __global int* maxVal, __global int* matchData )\n"
        "{\n"
        "    int work_item_X = get_global_id(0);\n"
        "    int work_item_Y = get_global_id(1);\n"
        "    int iGID = (work_item_Y * RESULT_HEIGHT  + work_item_X);\n"
        "    int diff_roi_temp = 0;\n"
        "    int sum_roi_temp = 0;\n"
        "\n"
        "    int dev_result_array_bright = 0;\n"
        "    unsigned char roi = 0;\n"
        "    unsigned char temp = 0;\n"
        "    for ( int Y = 0; Y < TEMPLATE_HEIGHT; Y += 1 )\n"
        "    {\n"
        "        int tmp1 = (work_item_Y + Y) * WORK_WIDTH + work_item_X ;\n"
        "        int tmp2 = Y * TEMPLATE_WIDTH;\n"
        "        for ( int X = 0; X < TEMPLATE_WIDTH; X += 1 )\n"
        "        {\n"
        "            roi = imData[ tmp1 + X  ];\n"
        "            temp = tmData[ tmp2 + X ];\n"
        "            diff_roi_temp += abs(roi - temp);\n"
        "            sum_roi_temp += roi + temp;\n"
        "        }// END for ( int X = 0; X < TEMPLATE_WIDTH; X +=1 )\n"
        "    }// END for ( int Y = 0; Y < TEMPLATE_HEIGHT; Y += 1 )\n"
        "    dev_result_array_bright = k_float_to_int * diff_roi_temp / sum_roi_temp;\n"
        "    matchData[ iGID ] = dev_result_array_bright;\n"
        "    atomic_min(maxVal, dev_result_array_bright);\n"
        "    barrier(CLK_GLOBAL_MEM_FENCE);\n"
        "    if ( (*maxVal) == dev_result_array_bright )\n"
        "    {\n"
        "        (*res).tm_result = dev_result_array_bright;\n"
        "        (*res).xpos = work_item_X;\n"
        "        (*res).ypos = work_item_Y;\n"
        "    }// END if ( (*maxVal) == dev_result_array_bright )\n"
        "}// END void work_cl_2\n"
        "__kernel void work_cl_2_no_img(__global unsigned char * imData, __global unsigned char * tmData, __global result* res, __global int* maxVal)\n"
        "{\n"
        "    int work_item_X = get_global_id(0);\n"
        "    int work_item_Y = get_global_id(1);\n"
        "    int iGID = (work_item_Y * RESULT_HEIGHT  + work_item_X);\n"
        "    int diff_roi_temp = 0;\n"
        "    int sum_roi_temp = 0;\n"
        "\n"
        "    int dev_result_array_bright = 0;\n"
        "    unsigned char roi = 0;\n"
        "    unsigned char temp = 0;\n"
        "\n"
        "    for ( int Y = 0; Y < TEMPLATE_HEIGHT; Y += 1 )\n"
        "    {\n"
        "        int tmp1 = (work_item_Y + Y) * WORK_WIDTH + work_item_X ;\n"
        "        int tmp2 = Y * TEMPLATE_WIDTH;\n"
        "        for ( int X = 0; X < TEMPLATE_WIDTH; X += 1 )\n"
        "        {\n"
        "            roi = imData[ tmp1 + X  ];\n"
        "            temp = tmData[ tmp2 + X ];\n"
        "            diff_roi_temp += abs(roi - temp);\n"
        "            sum_roi_temp += roi + temp;\n"
        "        }// END for ( int X = 0; X < TEMPLATE_WIDTH; X +=1 )\n"
        "    }// END for ( int Y = 0; Y < TEMPLATE_HEIGHT; Y += 1 )\n"
        "\n"
        "    dev_result_array_bright = k_float_to_int * diff_roi_temp / sum_roi_temp;\n"
        "\n"
        "    atomic_min(maxVal, dev_result_array_bright);\n"
        "    barrier(CLK_GLOBAL_MEM_FENCE);\n"
        "    if ( (*maxVal) == dev_result_array_bright )\n"
        "    {\n"
        "        (*res).tm_result = dev_result_array_bright;\n"
        "        (*res).xpos = work_item_X;\n"
        "        (*res).ypos = work_item_Y;\n"
        "    }// END if ( (*maxVal) == dev_result_array_bright )\n"
        "}// END void work_cl_2_no_img\n"
        "__kernel void work_cl_6(__global unsigned char * imData, __global unsigned char * tmData, __global result* res, __global int* maxVal, __global int* matchData )\n"
        "{\n"
        "    int work_item_X = get_global_id(0);\n"
        "    int work_item_Y = get_global_id(1);\n"
        "    int iGID = (work_item_Y * RESULT_HEIGHT  + work_item_X);\n"
        "    int sum_roi_temp = 0;\n"
        "    int sum_temp_temp = 0;\n"
        "    int diff_roi_temp = 0;\n"
        "    int sum_roi_roi = 0;\n"
        "    int sum_roi = 0;\n"
        "    int sum_temp = 0;\n"
        "    int dev_result_array_bright = 0;\n"
        "    unsigned char roi = 0;\n"
        "    unsigned char temp = 0;\n"
        "    for ( int Y = 0; Y < TEMPLATE_HEIGHT; Y += 1 )\n"
        "    {\n"
        "        int tmp1 = (work_item_Y + Y) * WORK_WIDTH + work_item_X ;\n"
        "        int tmp2 = Y * TEMPLATE_WIDTH;\n"
        "        for ( int X = 0; X < TEMPLATE_WIDTH; X += 1 )\n"
        "        {\n"
        "            roi = imData[ tmp1 + X  ];\n"
        "            temp = tmData[ tmp2 + X ];\n"
        "            sum_roi_temp += roi * temp;\n"
        "            sum_temp_temp += temp * temp;\n"
        "            sum_roi_roi += roi * roi;\n"
        "            sum_roi += roi;\n"
        "            sum_temp += temp;\n"
        "        }// END for ( int X = 0; X < TEMPLATE_WIDTH; X +=1 )\n"
        "    }// END for ( int Y = 0; Y < TEMPLATE_HEIGHT; Y += 1 )\n"
        "    const float sum_roi_temp1 = TEMPLATE_AREA_1 * sum_roi_temp;\n"
        "    const float sum_roi1 = TEMPLATE_AREA_1 * sum_roi;\n"
        "    const float sum_temp1 = TEMPLATE_AREA_1 * sum_temp;\n"
        "    const float sum_roi_roi1 = TEMPLATE_AREA_1 * sum_roi_roi;\n"
        "    const float sum_temp_temp1 = TEMPLATE_AREA_1 * sum_temp_temp;\n"
        "    const float ch  = sum_roi_temp1 - sum_roi1 * sum_temp1;\n"
        "    const float zn1 = sum_temp_temp1 - sum_temp1 * sum_temp1;\n"
        "    const float zn2 = sum_roi_roi1 - sum_roi1 * sum_roi1;\n"
        "    dev_result_array_bright = k_float_to_int * ch / sqrt(zn1 * zn2);\n"
        "    matchData[ iGID ] = dev_result_array_bright;\n"
        "    atomic_max(maxVal, dev_result_array_bright);\n"
        "    barrier(CLK_GLOBAL_MEM_FENCE);\n"
        "    if ( (*maxVal) == dev_result_array_bright )\n"
        "    {\n"
        "        (*res).tm_result = dev_result_array_bright;\n"
        "        (*res).xpos = work_item_X;\n"
        "        (*res).ypos = work_item_Y;\n"
        "    }// END if ( (*maxVal) == dev_result_array_bright )\n"
        "}// END void work_cl_6\n"
        "__kernel void work_cl_6_no_img(__global unsigned char * imData, __global unsigned char * tmData, __global result* res, __global int* maxVal )\n"
        "{\n"
        "    int work_item_X = get_global_id(0);\n"
        "    int work_item_Y = get_global_id(1);\n"
        "    int sum_roi_temp = 0;\n"
        "    int sum_temp_temp = 0;\n"
        "    int diff_roi_temp = 0;\n"
        "    int sum_roi_roi = 0;\n"
        "    int sum_roi = 0;\n"
        "    int sum_temp = 0;\n"
        "    int dev_result_array_bright = 0;\n"
        "    unsigned char roi = 0;\n"
        "    unsigned char temp = 0;\n"
        "    for ( int Y = 0; Y < TEMPLATE_HEIGHT; ++Y )\n"
        "    {\n"
        "        int tmp1 = (work_item_Y + Y) * WORK_WIDTH + work_item_X ;\n"
        "        int tmp2 = Y * TEMPLATE_WIDTH;\n"
        "        for ( int X = 0; X < TEMPLATE_WIDTH; ++X )\n"
        "        {\n"
        "            roi = imData[ tmp1 + X  ];\n"
        "            temp = tmData[ tmp2 + X ];\n"
        "            sum_roi_temp += roi * temp;\n"
        "            sum_temp_temp += temp * temp;\n"
        "            sum_roi_roi += roi * roi;\n"
        "            sum_roi += roi;\n"
        "            sum_temp += temp;\n"
        "        }// END for ( int X = 0; X < TEMPLATE_WIDTH; X +=1 )\n"
        "    }// END for ( int Y = 0; Y < TEMPLATE_HEIGHT; Y += 1 )\n"
        "    const float sum_roi_temp1 = TEMPLATE_AREA_1 * sum_roi_temp;\n"
        "    const float sum_roi1 = TEMPLATE_AREA_1 * sum_roi;\n"
        "    const float sum_temp1 = TEMPLATE_AREA_1 * sum_temp;\n"
        "    const float sum_roi_roi1 = TEMPLATE_AREA_1 * sum_roi_roi;\n"
        "    const float sum_temp_temp1 = TEMPLATE_AREA_1 * sum_temp_temp;\n"
        "    const float ch  = sum_roi_temp1 - sum_roi1 * sum_temp1;\n"
        "    const float zn1 = sum_temp_temp1 - sum_temp1 * sum_temp1;\n"
        "    const float zn2 = sum_roi_roi1 - sum_roi1 * sum_roi1;\n"
        "    dev_result_array_bright = k_float_to_int * ch / sqrt(zn1 * zn2);\n"
        "    atomic_max(maxVal, dev_result_array_bright);\n"
        "    barrier(CLK_GLOBAL_MEM_FENCE);\n"
        "    if ( (*maxVal) == dev_result_array_bright )\n"
        "    {\n"
        "        (*res).tm_result = dev_result_array_bright;\n"
        "        (*res).xpos = work_item_X;\n"
        "        (*res).ypos = work_item_Y;\n"
        "    }// END if ( (*maxVal) == dev_result_array_bright )\n"
        "}// END work_cl_6_no_img\n"
        "__kernel void work_cl_8(__global unsigned char * imData, __global unsigned char * tmData, __global result* res, __global int* maxVal, __global int* matchData )\n"
        "{\n"
        "    int work_item_X = get_global_id(0);\n"
        "    int work_item_Y = get_global_id(1);\n"
        "    int iGID = (work_item_Y * RESULT_HEIGHT  + work_item_X);\n"
        "    int sum_roi_temp = 0;\n"
        "    int sum_roi_temp_2 = 0;\n"
        "    int sum_temp_temp = 0;\n"
        "    int diff_roi_temp = 0;\n"
        "    int sum_roi_roi = 0;\n"
        "    int sum_roi = 0;\n"
        "    int sum_temp = 0;\n"
        "    int dev_result_array_bright = 0;\n"
        "    unsigned char roi = 0;\n"
        "    unsigned char temp = 0;\n"
        "    for ( int Y = 0; Y < TEMPLATE_HEIGHT; Y += 1 )\n"
        "    {\n"
        "        int tmp1 = (work_item_Y + Y) * WORK_WIDTH + work_item_X ;\n"
        "        int tmp2 = Y * TEMPLATE_WIDTH;\n"
        "        for ( int X = 0; X < TEMPLATE_WIDTH; X += 1 )\n"
        "        {\n"
        "            roi = imData[ tmp1 + X  ];\n"
        "            temp = tmData[ tmp2 + X ];\n"
        "            sum_roi_temp += roi * temp;\n"
        "            sum_temp_temp += temp * temp;\n"
        "            sum_roi_roi += roi * roi;\n"
        "            sum_roi += roi;\n"
        "            sum_temp += temp;\n"
        "            diff_roi_temp += abs(roi - temp);\n"
        "            sum_roi_temp_2 += (roi + temp);\n"
        "        }// END for ( int X = 0; X < TEMPLATE_WIDTH; X +=1 )\n"
        "    }// END for ( int Y = 0; Y < TEMPLATE_HEIGHT; Y += 1 )\n"
        "    const float sum_roi_temp1 = TEMPLATE_AREA_1 * sum_roi_temp;\n"
        "    const float sum_roi1 = TEMPLATE_AREA_1 * sum_roi;\n"
        "    const float sum_temp1 = TEMPLATE_AREA_1 * sum_temp;\n"
        "    const float sum_roi_roi1 = TEMPLATE_AREA_1 * sum_roi_roi;\n"
        "    const float sum_temp_temp1 = TEMPLATE_AREA_1 * sum_temp_temp;\n"
        "    const float ch  = sum_roi_temp1 - sum_roi1 * sum_temp1;\n"
        "    const float zn1 = sum_temp_temp1 - sum_temp1 * sum_temp1;\n"
        "    const float zn2 = sum_roi_roi1 - sum_roi1 * sum_roi1;\n"
        "    dev_result_array_bright = k_float_to_int * (ch / sqrt(zn1 * zn2) - (float)diff_roi_temp / sum_roi_temp_2);\n"
        "    matchData[ iGID ] = dev_result_array_bright;\n"
        "    atomic_max(maxVal, dev_result_array_bright);\n"
        "    barrier(CLK_GLOBAL_MEM_FENCE);\n"
        "    if ( (*maxVal) == dev_result_array_bright )\n"
        "    {\n"
        "        (*res).tm_result = dev_result_array_bright;\n"
        "        (*res).xpos = work_item_X;\n"
        "        (*res).ypos = work_item_Y;\n"
        "    }// END if ( (*maxVal) == dev_result_array_bright )\n"
        "}// END tmml_cl_8\n"
        "__kernel void work_cl_8_no_img(__global unsigned char * imData, __global unsigned char * tmData, __global result* res, __global int* maxVal )\n"
        "{\n"
        "    int work_item_X = get_global_id(0);\n"
        "    int work_item_Y = get_global_id(1);\n"
        "    int sum_roi_temp = 0;\n"
        "    int sum_roi_temp_2 = 0;\n"
        "    int sum_temp_temp = 0;\n"
        "    int diff_roi_temp = 0;\n"
        "    int sum_roi_roi = 0;\n"
        "    int sum_roi = 0;\n"
        "    int sum_temp = 0;\n"
        "    int dev_result_array_bright = 0;\n"
        "    unsigned char roi = 0;\n"
        "    unsigned char temp = 0;\n"
        "    for ( int Y = 0; Y < TEMPLATE_HEIGHT; Y += 1 )\n"
        "    {\n"
        "        int tmp1 = (work_item_Y + Y) * WORK_WIDTH + work_item_X ;\n"
        "        int tmp2 = Y * TEMPLATE_WIDTH;\n"
        "        for ( int X = 0; X < TEMPLATE_WIDTH; X += 1 )\n"
        "        {\n"
        "            roi = imData[ tmp1 + X  ];\n"
        "            temp = tmData[ tmp2 + X ];\n"
        "            sum_roi_temp += roi * temp;\n"
        "            sum_temp_temp += temp * temp;\n"
        "            sum_roi_roi += roi * roi;\n"
        "            sum_roi += roi;\n"
        "            sum_temp += temp;\n"
        "            diff_roi_temp += abs(roi - temp);\n"
        "            sum_roi_temp_2 += (roi + temp);\n"
        "        }// END for ( int X = 0; X < TEMPLATE_WIDTH; X +=1 )\n"
        "    }// END for ( int Y = 0; Y < TEMPLATE_HEIGHT; Y += 1 )\n"
        "    const float sum_roi_temp1 = TEMPLATE_AREA_1 * sum_roi_temp;\n"
        "    const float sum_roi1 = TEMPLATE_AREA_1 * sum_roi;\n"
        "    const float sum_temp1 = TEMPLATE_AREA_1 * sum_temp;\n"
        "    const float sum_roi_roi1 = TEMPLATE_AREA_1 * sum_roi_roi;\n"
        "    const float sum_temp_temp1 = TEMPLATE_AREA_1 * sum_temp_temp;\n"
        "    const float ch  = sum_roi_temp1 - sum_roi1 * sum_temp1;\n"
        "    const float zn1 = sum_temp_temp1 - sum_temp1 * sum_temp1;\n"
        "    const float zn2 = sum_roi_roi1 - sum_roi1 * sum_roi1;\n"
        "    dev_result_array_bright = k_float_to_int * (ch / sqrt(zn1 * zn2) - (float)diff_roi_temp / sum_roi_temp_2);\n"
        "    atomic_max(maxVal, dev_result_array_bright);\n"
        "    barrier(CLK_GLOBAL_MEM_FENCE);\n"
        "    if ( (*maxVal) == dev_result_array_bright )\n"
        "    {\n"
        "        (*res).tm_result = dev_result_array_bright;\n"
        "        (*res).xpos = work_item_X;\n"
        "        (*res).ypos = work_item_Y;\n"
        "    }// END if ( (*maxVal) == dev_result_array_bright )\n"
        "}// END work_cl_8_no_img\n"
        "__kernel void work_cl_return_float(__global unsigned char * img_work, __global unsigned char * img_temp, __global float* matchData )\n"
        "{\n"
        "    int result_x = get_global_id(0);\n"
        "    int result_y = get_global_id(1);\n"
        "    int iGID = (result_y * RESULT_HEIGHT  + result_x);\n"
        "\n"
        "    int sum_roi_temp = 0;\n"
        "    int sum_roi_temp_2 = 0;\n"
        "    int sum_temp_temp = 0;\n"
        "    int diff_roi_temp = 0;\n"
        "    int sum_roi_roi = 0;\n"
        "    int sum_roi = 0;\n"
        "    int sum_temp = 0;\n"
        "    double dev_result_array_bright0 = 0;\n"
        "    unsigned char roi = 0;\n"
        "    unsigned char temp = 0;\n"
        "    for ( int tmp_y = 0; tmp_y < TEMPLATE_HEIGHT; ++tmp_y )\n"
        "    {\n"
        "        int roi_y = result_y + tmp_y;\n"
        "        for ( int tmp_x = 0; tmp_x < TEMPLATE_WIDTH; ++tmp_x )\n"
        "        {\n"
        "            int tmp_id = tmp_y * TEMPLATE_WIDTH + tmp_x;\n"
        "            temp = img_temp[tmp_id];\n"
        "            int roi_x = result_x + tmp_x;\n"
        "            int roi_id = roi_y * WORK_WIDTH + roi_x;\n"
        "            roi = img_work[roi_id];\n"
        "            sum_roi_temp += roi * temp;\n"
        "            sum_temp_temp += temp * temp;\n"
        "            sum_roi_roi += roi * roi;\n"
        "            sum_roi += roi;\n"
        "            sum_temp += temp;\n"
        "            diff_roi_temp += abs(roi - temp);\n"
        "            sum_roi_temp_2 += (roi + temp);\n"
        "        }// END for ( int tmp_x = 0; tmp_x < TEMPLATE_WIDTH; ++tmp_x )\n"
        "    }// END for ( int tmp_y = 0; tmp_y < TEMPLATE_HEIGHT; ++tmp_y )\n"
        "    const double sum_roi_temp1 = TEMPLATE_AREA_1 * sum_roi_temp;\n"
        "    const double sum_roi1 = TEMPLATE_AREA_1 * sum_roi;\n"
        "    const double sum_temp1 = TEMPLATE_AREA_1 * sum_temp;\n"
        "    const double sum_roi_roi1 = TEMPLATE_AREA_1 * sum_roi_roi;\n"
        "    const double sum_temp_temp1 = TEMPLATE_AREA_1 * sum_temp_temp;\n"
        "    const double ch  = sum_roi_temp1 - sum_roi1 * sum_temp1;\n"
        "    const double zn1 = sum_temp_temp1 - sum_temp1 * sum_temp1;\n"
        "    const double zn2 = sum_roi_roi1 - sum_roi1 * sum_roi1;\n"
        "    matchData[ iGID ] = ch / sqrt(zn1 * zn2) - (float)diff_roi_temp / sum_roi_temp_2;\n"
        "}// END void work_cl_return_float\n"
    };
#endif

}; // END tmml_cl

