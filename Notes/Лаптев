В C++ допускается и другая форма инициализации — в скобках. В скобках же можно задавать и значение константы:
float t (0.456), p<(1e-23);
long double x(1), z(0);
const double d (0.123456);

Целые константы можно задавать и другим способом — с помощью конструкции enum, например:
enum { one = 1, two = 2, ten =10 };
Такая запись эквивалентна следующему объявлению:
const int one = 1, two = 2, ten = 10;

Если мы хотим объявить несколько констант с последовательными целыми
значениями, то можно не присваивать значение константам, кроме первой, например:
enum { one = 1, two, three, four, five, six, seven, eight, nine, ten };

Встроенного строкового типа в C++ нет. А вот символьный тип появился еще в С и является встроенным в C++. Константы-символы записываются в одиночных кавычках (знак апострофа): 'а', ' + ', 'п'. Символы
внутри апострофов можно указывать любые. C++ предоставляет конструкцию для представления любых символов. Это делается с помощью обратной косой черты \ (backslash). Апостроф в программе на C++ изображается как '\'', кавычки— '\"', сама обратная косая черта— '\\' Звуковой сигнал можно подать константой '\а', выполнив оператор вывода: cout « '\а ' « endl;

Поскольку присваивание — операция, ее можно смешивать с другими операциями в выражениях, например:
а = 5 + (Ь = 6) ;
В этом операторе переменная ь получает значение б, а переменная а становится равной 11 (5 + б). Другой необычный пример:
a = (b > 5);
Переменная а получит значение 0 или 1 в зависимости от истинности или
ложности условия. На самом деле это не условие, а логическое выражение.

условие в условном операторе и в операторах цикла (и в условной операции) на самом деле являются просто выражением, результат которого не обязательно должен быть истинным или ложным. Результат может
быть любым числом, в т. ч. дробным или даже отрицательным. Если результат не равен нулю, го условие считается истинным, в противном случае - ложным. 

Одним из традиционных применений статических переменных является использование их в качестве счетчиков для сбора различной статистической информации о вызове функции, например, о количестве вызовов. Это делается так:
unsigned int f (параметры){
static unsigned int count = 0;
// . . .
++count ;
return count;
}
