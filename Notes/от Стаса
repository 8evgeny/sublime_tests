############################################################################################
Вместо создания экземпляра класса создаем указатель и затем инициализируем его в нужное время

brightness_adjustment.cpp

#include <logger/logger.h>
#include <settings.h>

#include "brightness_adjustor/brightness_adjustor.h"
#include "modules/module.h"
using namespace runtime;
namespace brightness_adjustment {
class BrightnessAdjustment : public Module {
 public:
  bool Init(std::shared_ptr<const domain::Settings> settings) override {
    ba = std::make_shared<BrightnessAdjustor>(settings);
    return true;
  }
  //  BrightnessAdjustment();
  ModuleResult Run(const hardware::ImagePtr& image,
                   const ModulesData& previous_modules_output) override {
    return ba->Run(image, previous_modules_output);
  }
  bool ApplySettings(const Feedback&) override {
    // TODO replace _thresholds with new values
    return false;
  }
  const std::string& name() const override { return _name; }

 private:
  const std::string _name = "brightness_adjustment";
  std::shared_ptr<BrightnessAdjustor> ba;
};
extern "C" BrightnessAdjustment* Create() { return new BrightnessAdjustment(); }
extern "C" void Destroy(BrightnessAdjustment* m) { delete m; }
}  // namespace brightness_adjustment

строка 29 - вместо создания экземпляра класса создаем указатель на класс !
строка 13 - в методе Init  инициализируем класс - передаем в конструктор settings !

###############################################################################################


sudo LOG_REGIME=console bash -c "../scripts/shooter/run_shooter.sh viewer"
sudo LOG_REGIME=console ./shooter/run_shooter.sh viewer

sudo LOG_REGIME=console bash -c "./gdb_remote_run_shooter.sh viewer"

sudo LOG_REGIME=files ./run_shooter.sh viewer 
(перед скриптом - переменная явным образом)

эта-же переменная в сервисе sudo LOG_REGIME=files ./run_shooter.sh viewer 
[Unit]
Description=shooter
Wants=network-online.target ptpd.service wdkicker.service
After=network.target network-online.target ptpd.service wdkicker.service

[Install]
WantedBy=multi-user.target
[Service]
Environment="LOG_REGIME=files"
Type=simple
Restart=on-failure
RestartSec=20
ExecStart=/usr/bin/bash __SCRIPT_PATH__/run_shooter.sh %i %n
#ExecStop=/usr/bin/pkill -SIGINT shooter


Убрана передача как позиционного параметра
теперь передавать как именной параметр
sudo LOG_REGIME=files LOG_LEVEL=DEBUG ./run_shooter.sh viewer

настройка доступа к postgresql без пароля извне
Допустим, есть комплекс 10.8.1.93
Правим на нем:
sudo mcedit /var/lib/postgres/data/pg_hba.conf
добавить:
host    all             all             0.0.0.0/0               trust
sudo mcedit /var/lib/postgres/data/postgresql.conf
listen_addresses='*'
После этого со своей машины можно выполнять скрипты к базам комплекса напрямую.
например:
psql -U postgres -h 10.8.1.93 -d sadko -c "select count(*) from plates"

развернуть дамп
psql -U postgres -d sadko_93_20210215 -f ./sadko.dump

alias con40='sshpass -p a40-vbersi34 ssh alager@10.99.40.108'

sshfs alager@10.99.40.108:/ /home/eparubets/share/novosib_40/

alias fix_vpn='sudo systemctl restart openfortivpn && sudo systemctl restart openvpn-client@client'



std::string exec(const char* cmd) {
  std::array<char, 128> buffer;
  std::string result;
  std::unique_ptr<FILE, decltype(&pclose)> pipe(popen(cmd, "r"), pclose);
  if (!pipe) {
    throw std::runtime_error("popen() failed!");
  }
  while (fgets(buffer.data(), buffer.size(), pipe.get()) != nullptr) {
    result += buffer.data();
  }
  return result;
}


/home/sfedorov/source/sadko/src/complex/commons/device_controller/test/camera_test.cpp

sudo systemctl list-units | grep shooter




Официально sadko начал поддерживать помимо arch linux также ubuntu 18 и ubuntu 20:)


Чтобы не затягивать, для возможности возврата к предыдущему варианту, создал бэкап ветки develop и перевел все на новый пайплайн, создав также дополнительную ветку release_1.6.1.rc3

Web streaming

В последнем develop появился онлайн веб стриминг из коробки. Модуль называется libweb_streaming_module.so. При отсутствующих соединениях совершенно не нагружает пайплайн, по причине чего включен по дефолту в пайплайн.
Если все таки что-либо выяснится - отключается простым комментированием этого модуля в конфиге модулей и перезапуском шутера.

Как пользоваться:
[http://<complex_ip>:8888]http://<complex_ip>:8888

Нажать старт
Затем не забыть нажать стоп либо закрыть страницу(чтобы не нагружать комплекс сжатием картинок)


Continuous Integration And Continuous Deployment


в любой ветке, включающей в себя ветку develop начиная с 2021.03.31, билд система поддерживает особые коммит слова:

- FORCE_RELEASE - сборка серверного дистрибутива

- FORCE_CLIENT_RELEASE - сборка клиентского дистрибутива


По завершению пайплайна https://gitlab.com/alager/sadko/-/pipelines генерится билд


//192.168.77.178/builds/sadko/<uname -m>/sadko_<client|server>_<sadko_version>_<release|debug>_<arch|ubuntu_18.04|ubuntu_20.04>_<uname -m>_<commit_hash>.tar


подключить на чтение можно так:

//192.168.77.178/builds/sadko /home/<user>/share/builds cifs username=ro,password=ro,workgroup=WORKGROUP,iocharset=utf8,uid=gitlab-runner,gid=0,x-systemd.automount,_netdev 0 0



Архив после чего можно закинуть на комплекс и произвести развертку после распаковки:


mkdir -p /soft/<sadko_release_has_commit>

tar -xf <sadko_server_release..<has_commit>.tar> --directory <sadko_release_has_commit>

cd <sadko_release_has_commit>

./deploy.sh