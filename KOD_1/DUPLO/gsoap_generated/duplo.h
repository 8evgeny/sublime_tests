// Reminder: Modify typemap.dat to customize the header file generated by wsdl2h
/* duplo.h
   Generated by wsdl2h 2.8.74 from duplo2.wsdl and typemap.dat
   2018-12-20 16:30:11 GMT

   DO NOT INCLUDE THIS FILE DIRECTLY INTO YOUR PROJECT BUILDS
   USE THE soapcpp2-GENERATED SOURCE CODE FILES FOR YOUR PROJECT BUILDS

gSOAP XML Web services tools
Copyright (C) 2000-2018, Robert van Engelen, Genivia Inc. All Rights Reserved.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

/** @page page_notes Notes

@note HINTS:
 - Run soapcpp2 on duplo.h to generate the SOAP/XML processing logic.
   Use soapcpp2 -I to specify paths for #import
   Use soapcpp2 -j to generate improved proxy and server classes.
   Use soapcpp2 -r to generate a report.
 - Use wsdl2h -c and -s to generate pure C code or C++ code without STL.
 - Use 'typemap.dat' to control namespace bindings and type mappings.
   It is strongly recommended to customize the names of the namespace prefixes
   generated by wsdl2h. To do so, modify the prefix bindings in the Namespaces
   section below and add the modified lines to 'typemap.dat' to rerun wsdl2h.
 - Run Doxygen (www.doxygen.org) on this file to generate documentation.
 - Use wsdl2h -R to generate REST operations.
 - Use wsdl2h -Onum to optimize output by removing unused schema components.
 - Use wsdl2h -nname to use name as the base namespace prefix instead of 'ns'.
 - Use wsdl2h -Nname for service prefix and produce multiple service bindings
 - Use wsdl2h -d to enable DOM support for xsd:anyType.
 - Use wsdl2h -g to auto-generate readers and writers for root elements.
 - Use wsdl2h -b to auto-generate bi-directional operations (duplex ops).
 - Use wsdl2h -U to map XML names to C++ Unicode identifiers instead of _xNNNN.
 - Use wsdl2h -u to disable the generation of unions.
 - Struct/class members serialized as XML attributes are annotated with a '@'.
 - Struct/class members that have a special role are annotated with a '$'.

@warning
   DO NOT INCLUDE THIS ANNOTATED FILE DIRECTLY IN YOUR PROJECT SOURCE CODE.
   USE THE FILES GENERATED BY soapcpp2 FOR YOUR PROJECT'S SOURCE CODE:
   THE soapStub.h FILE CONTAINS THIS CONTENT WITHOUT ANNOTATIONS.

@copyright LICENSE:
@verbatim
--------------------------------------------------------------------------------
gSOAP XML Web services tools
Copyright (C) 2000-2018, Robert van Engelen, Genivia Inc. All Rights Reserved.
The wsdl2h tool and its generated software are released under the GPL.
This software is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
GPL license.

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation; either version 2 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
this program; if not, write to the Free Software Foundation, Inc., 59 Temple
Place, Suite 330, Boston, MA 02111-1307 USA

Author contact information:
engelen@genivia.com / engelen@acm.org

This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial-use license is available from Genivia, Inc., contact@genivia.com
--------------------------------------------------------------------------------
@endverbatim

*/


//gsoapopt c++,w

/******************************************************************************\
 *                                                                            *
 * Definitions                                                                *
 *   http://service/                                                          *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * $CONTAINER                                                                 *
 *   std::vector                                                              *
 *                                                                            *
\******************************************************************************/

#include <vector>
template <class T> class std::vector;

/******************************************************************************\
 *                                                                            *
 * Import                                                                     *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Namespaces                                                          *
 *                                                                            *
\******************************************************************************/


/* NOTE:

It is strongly recommended to customize the names of the namespace prefixes
generated by wsdl2h. To do so, modify the prefix bindings below and add the
modified lines to typemap.dat to rerun wsdl2h:

ns1 = "http://service/"

*/

#define SOAP_NAMESPACE_OF_ns1	"http://service/"
//gsoap ns1   schema namespace:	http://service/
//gsoap ns1   schema form:	unqualified

/******************************************************************************\
 *                                                                            *
 * Built-in Schema Types and Top-Level Elements and Attributes                *
 *                                                                            *
\******************************************************************************/

/// Built-in XSD type "xs:base64Binary".
class xsd__base64Binary
{	unsigned char *__ptr;
	int __size;
	char *id, *type, *options; // NOTE: non-NULL for DIME/MIME/MTOM XOP attachments only
};

/// Primitive built-in type "xs:decimal".
typedef std::string xsd__decimal;


/******************************************************************************\
 *                                                                            *
 * Forward Declarations                                                       *
 *                                                                            *
\******************************************************************************/


//  Forward declaration of class ns1__processGetInfo.
class ns1__processGetInfo;

//  Forward declaration of class ns1__processGetInfoResponse.
class ns1__processGetInfoResponse;

//  Forward declaration of class ns1__cameraInfo.
class ns1__cameraInfo;

//  Forward declaration of class ns1__duploFault.
class ns1__duploFault;

//  Forward declaration of class ns1__process.
class ns1__process;

//  Forward declaration of class ns1__message.
class ns1__message;

//  Forward declaration of class ns1__trCheckIn.
class ns1__trCheckIn;

//  Forward declaration of class ns1__photoExtra.
class ns1__photoExtra;

//  Forward declaration of class ns1__processResponse.
class ns1__processResponse;

//  Forward declaration of class ns1__getVersion.
class ns1__getVersion;

//  Forward declaration of class ns1__getVersionResponse.
class ns1__getVersionResponse;

//  Forward declaration of class ns1__Version.
class ns1__Version;


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://service/                                                          *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   http://service/                                                          *
 *                                                                            *
\******************************************************************************/

/// @brief "http://service/":processGetInfo is a complexType.
///
/// class ns1__processGetInfo operations:
/// - ns1__processGetInfo* soap_new_ns1__processGetInfo(soap*) allocate and default initialize
/// - ns1__processGetInfo* soap_new_ns1__processGetInfo(soap*, int num) allocate array and default initialize values
/// - ns1__processGetInfo* soap_new_req_ns1__processGetInfo(soap*, ...) allocate, set required members
/// - ns1__processGetInfo* soap_new_set_ns1__processGetInfo(soap*, ...) allocate, set all public members
/// - ns1__processGetInfo::soap_default(soap*) default initialize members
/// - int soap_read_ns1__processGetInfo(soap*, ns1__processGetInfo*) deserialize from a stream
/// - int soap_write_ns1__processGetInfo(soap*, ns1__processGetInfo*) serialize to a stream
/// - ns1__processGetInfo* ns1__processGetInfo::soap_dup(soap*) returns deep copy of ns1__processGetInfo, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__processGetInfo::soap_del() deep deletes ns1__processGetInfo data members, use only after ns1__processGetInfo::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__processGetInfo
{ public:
/// Element "camera" of XSD type xs:string.
    std::string*                         camera                         0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief "http://service/":processGetInfoResponse is a complexType.
///
/// class ns1__processGetInfoResponse operations:
/// - ns1__processGetInfoResponse* soap_new_ns1__processGetInfoResponse(soap*) allocate and default initialize
/// - ns1__processGetInfoResponse* soap_new_ns1__processGetInfoResponse(soap*, int num) allocate array and default initialize values
/// - ns1__processGetInfoResponse* soap_new_req_ns1__processGetInfoResponse(soap*, ...) allocate, set required members
/// - ns1__processGetInfoResponse* soap_new_set_ns1__processGetInfoResponse(soap*, ...) allocate, set all public members
/// - ns1__processGetInfoResponse::soap_default(soap*) default initialize members
/// - int soap_read_ns1__processGetInfoResponse(soap*, ns1__processGetInfoResponse*) deserialize from a stream
/// - int soap_write_ns1__processGetInfoResponse(soap*, ns1__processGetInfoResponse*) serialize to a stream
/// - ns1__processGetInfoResponse* ns1__processGetInfoResponse::soap_dup(soap*) returns deep copy of ns1__processGetInfoResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__processGetInfoResponse::soap_del() deep deletes ns1__processGetInfoResponse data members, use only after ns1__processGetInfoResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__processGetInfoResponse
{ public:
/// Element "return" of XSD type "http://service/":cameraInfo.
    ns1__cameraInfo*                     return_                        0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief "http://service/":cameraInfo is a complexType.
///
/// class ns1__cameraInfo operations:
/// - ns1__cameraInfo* soap_new_ns1__cameraInfo(soap*) allocate and default initialize
/// - ns1__cameraInfo* soap_new_ns1__cameraInfo(soap*, int num) allocate array and default initialize values
/// - ns1__cameraInfo* soap_new_req_ns1__cameraInfo(soap*, ...) allocate, set required members
/// - ns1__cameraInfo* soap_new_set_ns1__cameraInfo(soap*, ...) allocate, set all public members
/// - ns1__cameraInfo::soap_default(soap*) default initialize members
/// - int soap_read_ns1__cameraInfo(soap*, ns1__cameraInfo*) deserialize from a stream
/// - int soap_write_ns1__cameraInfo(soap*, ns1__cameraInfo*) serialize to a stream
/// - ns1__cameraInfo* ns1__cameraInfo::soap_dup(soap*) returns deep copy of ns1__cameraInfo, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__cameraInfo::soap_del() deep deletes ns1__cameraInfo data members, use only after ns1__cameraInfo::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__cameraInfo
{ public:
/// Element "azimut" of XSD type xs:decimal.
    xsd__decimal*                        azimut                         0;	///< Optional element.
/// Element "camera" of XSD type xs:string.
    std::string*                         camera                         0;	///< Optional element.
/// Element "camera_id" of XSD type xs:int.
    int*                                 camera_USCOREid                0;	///< Optional element.
/// Element "camera_model" of XSD type xs:string.
    std::string*                         camera_USCOREmodel             0;	///< Optional element.
/// Element "camera_place" of XSD type xs:string.
    std::string*                         camera_USCOREplace             0;	///< Optional element.
/// Element "gps_x" of XSD type xs:decimal.
    xsd__decimal*                        gps_USCOREx                    0;	///< Optional element.
/// Element "gps_y" of XSD type xs:decimal.
    xsd__decimal*                        gps_USCOREy                    0;	///< Optional element.
/// Element "lane_num" of XSD type xs:int.
    int*                                 lane_USCOREnum                 0;	///< Optional element.
/// Element "p_node" of XSD type xs:int.
    int*                                 p_USCOREnode                   0;	///< Optional element.
/// Element "print_name" of XSD type xs:string.
    std::string*                         print_USCOREname               0;	///< Optional element.
/// Element "priz_arh" of XSD type xs:string.
    std::string*                         priz_USCOREarh                 0;	///< Optional element.
/// Element "serial_no" of XSD type xs:string.
    std::string*                         serial_USCOREno                0;	///< Optional element.
/// Element "type" of XSD type xs:string.
    std::string*                         type                           0;	///< Optional element.
/// Element "v_class" of XSD type xs:string.
    std::string*                         v_USCOREclass                  0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief "http://service/":duploFault is a complexType.
///
/// class ns1__duploFault operations:
/// - ns1__duploFault* soap_new_ns1__duploFault(soap*) allocate and default initialize
/// - ns1__duploFault* soap_new_ns1__duploFault(soap*, int num) allocate array and default initialize values
/// - ns1__duploFault* soap_new_req_ns1__duploFault(soap*, ...) allocate, set required members
/// - ns1__duploFault* soap_new_set_ns1__duploFault(soap*, ...) allocate, set all public members
/// - ns1__duploFault::soap_default(soap*) default initialize members
/// - int soap_read_ns1__duploFault(soap*, ns1__duploFault*) deserialize from a stream
/// - int soap_write_ns1__duploFault(soap*, ns1__duploFault*) serialize to a stream
/// - ns1__duploFault* ns1__duploFault::soap_dup(soap*) returns deep copy of ns1__duploFault, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__duploFault::soap_del() deep deletes ns1__duploFault data members, use only after ns1__duploFault::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__duploFault
{ public:
/// Element "faultCode" of XSD type xs:string.
    std::string*                         faultCode                      0;	///< Optional element.
/// Element "faultMessage" of XSD type xs:string.
    std::string*                         faultMessage                   0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief "http://service/":process is a complexType.
///
/// class ns1__process operations:
/// - ns1__process* soap_new_ns1__process(soap*) allocate and default initialize
/// - ns1__process* soap_new_ns1__process(soap*, int num) allocate array and default initialize values
/// - ns1__process* soap_new_req_ns1__process(soap*, ...) allocate, set required members
/// - ns1__process* soap_new_set_ns1__process(soap*, ...) allocate, set all public members
/// - ns1__process::soap_default(soap*) default initialize members
/// - int soap_read_ns1__process(soap*, ns1__process*) deserialize from a stream
/// - int soap_write_ns1__process(soap*, ns1__process*) serialize to a stream
/// - ns1__process* ns1__process::soap_dup(soap*) returns deep copy of ns1__process, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__process::soap_del() deep deletes ns1__process data members, use only after ns1__process::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__process
{ public:
/// Element "message" of XSD type "http://service/":message.
    ns1__message*                        message                        0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief "http://service/":message is a complexType.
///
/// class ns1__message operations:
/// - ns1__message* soap_new_ns1__message(soap*) allocate and default initialize
/// - ns1__message* soap_new_ns1__message(soap*, int num) allocate array and default initialize values
/// - ns1__message* soap_new_req_ns1__message(soap*, ...) allocate, set required members
/// - ns1__message* soap_new_set_ns1__message(soap*, ...) allocate, set all public members
/// - ns1__message::soap_default(soap*) default initialize members
/// - int soap_read_ns1__message(soap*, ns1__message*) deserialize from a stream
/// - int soap_write_ns1__message(soap*, ns1__message*) serialize to a stream
/// - ns1__message* ns1__message::soap_dup(soap*) returns deep copy of ns1__message, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__message::soap_del() deep deletes ns1__message data members, use only after ns1__message::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__message
{ public:
/// Element "tr_checkIn" of XSD type "http://service/":trCheckIn.
    ns1__trCheckIn*                      tr_USCOREcheckIn               1;	///< Required element.
/// Vector of ns1__photoExtra* of length 0..unbounded.
    std::vector<ns1__photoExtra*       > photo_USCOREextra              0;	///< Multiple elements.
    struct soap                         *soap                          ;
};

/// @brief "http://service/":trCheckIn is a complexType.
///
/// class ns1__trCheckIn operations:
/// - ns1__trCheckIn* soap_new_ns1__trCheckIn(soap*) allocate and default initialize
/// - ns1__trCheckIn* soap_new_ns1__trCheckIn(soap*, int num) allocate array and default initialize values
/// - ns1__trCheckIn* soap_new_req_ns1__trCheckIn(soap*, ...) allocate, set required members
/// - ns1__trCheckIn* soap_new_set_ns1__trCheckIn(soap*, ...) allocate, set all public members
/// - ns1__trCheckIn::soap_default(soap*) default initialize members
/// - int soap_read_ns1__trCheckIn(soap*, ns1__trCheckIn*) deserialize from a stream
/// - int soap_write_ns1__trCheckIn(soap*, ns1__trCheckIn*) serialize to a stream
/// - ns1__trCheckIn* ns1__trCheckIn::soap_dup(soap*) returns deep copy of ns1__trCheckIn, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__trCheckIn::soap_del() deep deletes ns1__trCheckIn data members, use only after ns1__trCheckIn::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__trCheckIn
{ public:
/// Element "v_time_check" of XSD type xs:dateTime.
    time_t                               v_USCOREtime_USCOREcheck       1;	///< Required element.
/// Element "v_camera" of XSD type xs:string.
    std::string                          v_USCOREcamera                 1;	///< Required element.
/// Element "v_gps_x" of XSD type xs:decimal.
    xsd__decimal*                        v_USCOREgps_USCOREx            0;	///< Optional element.
/// Element "v_gps_y" of XSD type xs:decimal.
    xsd__decimal*                        v_USCOREgps_USCOREy            0;	///< Optional element.
/// Element "v_azimut" of XSD type xs:decimal.
    xsd__decimal*                        v_USCOREazimut                 0;	///< Optional element.
/// Element "v_direction" of XSD type xs:string.
    std::string*                         v_USCOREdirection              0;	///< Optional element.
/// Element "v_speed_limit" of XSD type xs:int.
    int*                                 v_USCOREspeed_USCORElimit      0;	///< Optional element.
/// Element "v_speed" of XSD type xs:decimal.
    xsd__decimal*                        v_USCOREspeed                  0;	///< Optional element.
/// Element "v_regno_country_id" of XSD type xs:string.
    std::string*                         v_USCOREregno_USCOREcountry_USCOREid 0;	///< Optional element.
/// Element "v_regno_color_id" of XSD type xs:int.
    int*                                 v_USCOREregno_USCOREcolor_USCOREid 0;	///< Optional element.
/// Element "v_recognition_accuracy" of XSD type xs:decimal.
    xsd__decimal*                        v_USCORErecognition_USCOREaccuracy 0;	///< Optional element.
/// Element "v_regno" of XSD type xs:string.
    std::string*                         v_USCOREregno                  0;	///< Optional element.
/// Vector of int of length 0..unbounded.
    std::vector<int                    > v_USCOREpr_USCOREviol          0;	///< Multiple elements.
/// Element "v_parking_num" of XSD type xs:int.
    int*                                 v_USCOREparking_USCOREnum      0;	///< Optional element.
/// Element "v_parking_zone" of XSD type xs:int.
    int*                                 v_USCOREparking_USCOREzone     0;	///< Optional element.
/// Element "v_lane_num" of XSD type xs:int.
    int*                                 v_USCORElane_USCOREnum         0;	///< Optional element.
/// Element "v_camera_place" of XSD type xs:string.
    std::string*                         v_USCOREcamera_USCOREplace     0;	///< Optional element.
/// Element "v_photo_grz" of XSD type xs:base64Binary.
    xsd__base64Binary*                   v_USCOREphoto_USCOREgrz        0;	///< Optional element.
/// Element "v_photo_ts" of XSD type xs:base64Binary.
    xsd__base64Binary*                   v_USCOREphoto_USCOREts         0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief "http://service/":photoExtra is a complexType.
///
/// class ns1__photoExtra operations:
/// - ns1__photoExtra* soap_new_ns1__photoExtra(soap*) allocate and default initialize
/// - ns1__photoExtra* soap_new_ns1__photoExtra(soap*, int num) allocate array and default initialize values
/// - ns1__photoExtra* soap_new_req_ns1__photoExtra(soap*, ...) allocate, set required members
/// - ns1__photoExtra* soap_new_set_ns1__photoExtra(soap*, ...) allocate, set all public members
/// - ns1__photoExtra::soap_default(soap*) default initialize members
/// - int soap_read_ns1__photoExtra(soap*, ns1__photoExtra*) deserialize from a stream
/// - int soap_write_ns1__photoExtra(soap*, ns1__photoExtra*) serialize to a stream
/// - ns1__photoExtra* ns1__photoExtra::soap_dup(soap*) returns deep copy of ns1__photoExtra, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__photoExtra::soap_del() deep deletes ns1__photoExtra data members, use only after ns1__photoExtra::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__photoExtra
{ public:
/// Element "v_frame_datetime" of XSD type xs:dateTime.
    time_t*                              v_USCOREframe_USCOREdatetime   0;	///< Optional element.
/// Element "v_photo_extra" of XSD type xs:base64Binary.
    xsd__base64Binary*                   v_USCOREphoto_USCOREextra      0;	///< Optional element.
/// Element "v_type_photo" of XSD type xs:string.
    std::string*                         v_USCOREtype_USCOREphoto       0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief "http://service/":processResponse is a complexType.
///
/// class ns1__processResponse operations:
/// - ns1__processResponse* soap_new_ns1__processResponse(soap*) allocate and default initialize
/// - ns1__processResponse* soap_new_ns1__processResponse(soap*, int num) allocate array and default initialize values
/// - ns1__processResponse* soap_new_req_ns1__processResponse(soap*, ...) allocate, set required members
/// - ns1__processResponse* soap_new_set_ns1__processResponse(soap*, ...) allocate, set all public members
/// - ns1__processResponse::soap_default(soap*) default initialize members
/// - int soap_read_ns1__processResponse(soap*, ns1__processResponse*) deserialize from a stream
/// - int soap_write_ns1__processResponse(soap*, ns1__processResponse*) serialize to a stream
/// - ns1__processResponse* ns1__processResponse::soap_dup(soap*) returns deep copy of ns1__processResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__processResponse::soap_del() deep deletes ns1__processResponse data members, use only after ns1__processResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__processResponse
{ public:
/// Element "return" of XSD type xs:boolean.
    bool                                 return_                        1;	///< Required element.
    struct soap                         *soap                          ;
};

/// @brief "http://service/":getVersion is a complexType.
///
/// class ns1__getVersion operations:
/// - ns1__getVersion* soap_new_ns1__getVersion(soap*) allocate and default initialize
/// - ns1__getVersion* soap_new_ns1__getVersion(soap*, int num) allocate array and default initialize values
/// - ns1__getVersion* soap_new_req_ns1__getVersion(soap*, ...) allocate, set required members
/// - ns1__getVersion* soap_new_set_ns1__getVersion(soap*, ...) allocate, set all public members
/// - ns1__getVersion::soap_default(soap*) default initialize members
/// - int soap_read_ns1__getVersion(soap*, ns1__getVersion*) deserialize from a stream
/// - int soap_write_ns1__getVersion(soap*, ns1__getVersion*) serialize to a stream
/// - ns1__getVersion* ns1__getVersion::soap_dup(soap*) returns deep copy of ns1__getVersion, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__getVersion::soap_del() deep deletes ns1__getVersion data members, use only after ns1__getVersion::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__getVersion
{ public:
    struct soap                         *soap                          ;
};

/// @brief "http://service/":getVersionResponse is a complexType.
///
/// class ns1__getVersionResponse operations:
/// - ns1__getVersionResponse* soap_new_ns1__getVersionResponse(soap*) allocate and default initialize
/// - ns1__getVersionResponse* soap_new_ns1__getVersionResponse(soap*, int num) allocate array and default initialize values
/// - ns1__getVersionResponse* soap_new_req_ns1__getVersionResponse(soap*, ...) allocate, set required members
/// - ns1__getVersionResponse* soap_new_set_ns1__getVersionResponse(soap*, ...) allocate, set all public members
/// - ns1__getVersionResponse::soap_default(soap*) default initialize members
/// - int soap_read_ns1__getVersionResponse(soap*, ns1__getVersionResponse*) deserialize from a stream
/// - int soap_write_ns1__getVersionResponse(soap*, ns1__getVersionResponse*) serialize to a stream
/// - ns1__getVersionResponse* ns1__getVersionResponse::soap_dup(soap*) returns deep copy of ns1__getVersionResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__getVersionResponse::soap_del() deep deletes ns1__getVersionResponse data members, use only after ns1__getVersionResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__getVersionResponse
{ public:
/// Element "return" of XSD type "http://service/":Version.
    ns1__Version*                        return_                        0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief "http://service/":Version is a complexType.
///
/// class ns1__Version operations:
/// - ns1__Version* soap_new_ns1__Version(soap*) allocate and default initialize
/// - ns1__Version* soap_new_ns1__Version(soap*, int num) allocate array and default initialize values
/// - ns1__Version* soap_new_req_ns1__Version(soap*, ...) allocate, set required members
/// - ns1__Version* soap_new_set_ns1__Version(soap*, ...) allocate, set all public members
/// - ns1__Version::soap_default(soap*) default initialize members
/// - int soap_read_ns1__Version(soap*, ns1__Version*) deserialize from a stream
/// - int soap_write_ns1__Version(soap*, ns1__Version*) serialize to a stream
/// - ns1__Version* ns1__Version::soap_dup(soap*) returns deep copy of ns1__Version, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__Version::soap_del() deep deletes ns1__Version data members, use only after ns1__Version::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__Version
{ public:
/// Element "buildVer" of XSD type xs:string.
    std::string*                         buildVer                       0;	///< Optional element.
    struct soap                         *soap                          ;
};


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   http://service/                                                          *
 *                                                                            *
\******************************************************************************/

/// @brief Top-level root element "http://service/":getVersion of XSD type "http://service/":getVersion.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://service/":getVersionResponse of XSD type "http://service/":getVersionResponse.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://service/":process of XSD type "http://service/":process.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://service/":processGetInfo of XSD type "http://service/":processGetInfo.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://service/":processGetInfoResponse of XSD type "http://service/":processGetInfoResponse.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://service/":processResponse of XSD type "http://service/":processResponse.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://service/":DuploFault of XSD type "http://service/":duploFault.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   http://service/                                                          *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Services                                                                   *
 *                                                                            *
\******************************************************************************/

// This service supports SOAP 1.2 namespaces:
#import "soap12.h"

//gsoap ns1  service name:	MessengerServiceSoapBinding 
//gsoap ns1  service type:	MessengerSEI 
//gsoap ns1  service port:	http://services.stdpr.ru:8092/duplo/services/duplo2 
//gsoap ns1  service namespace:	http://service/ 
//gsoap ns1  service transport:	http://schemas.xmlsoap.org/soap/http 

/** @mainpage MessengerService Definitions

@section MessengerService_bindings Service Bindings

  - @ref MessengerServiceSoapBinding

@section MessengerService_more More Information

  - @ref page_notes "Notes"

  - @ref page_XMLDataBinding "XML Data Binding"

  - @ref SOAP_ENV__Header "SOAP Header Content" (when applicable)

  - @ref SOAP_ENV__Detail "SOAP Fault Detail Content" (when applicable)


*/

/**

@page MessengerServiceSoapBinding Binding "MessengerServiceSoapBinding"

@section MessengerServiceSoapBinding_operations Operations of Binding "MessengerServiceSoapBinding"

  - @ref __ns1__process

  - @ref __ns1__processGetInfo

  - @ref __ns1__getVersion

@section MessengerServiceSoapBinding_ports Default endpoints of Binding "MessengerServiceSoapBinding"

  - http://services.stdpr.ru:8092/duplo/services/duplo2

@note Use wsdl2h option -Nname to change the service binding prefix name


*/

/******************************************************************************\
 *                                                                            *
 * SOAP Fault Detail                                                          *
 *                                                                            *
\******************************************************************************/

/**

The SOAP Fault is part of the gSOAP context and its content is accessed
through the soap.fault->detail variable (SOAP 1.1) or the
soap.fault->SOAP_ENV__Detail variable (SOAP 1.2).
Use wsdl2h option -j to omit these declarations.

*/
mutable struct SOAP_ENV__Detail
{
/// xsd:anyAttribute omitted: to parse attribute content of the Detail element into DOM anyAttribute, use wsdl2h option -d.
/// SOAP Fault message "DuploException" part "DuploException" element ""http://service/":DuploFault".
    ns1__duploFault*                     ns1__DuploFault               ;
    int                                  __type                        ;	///< set to SOAP_TYPE_X for a serializable type X
    void                                *fault                         ;	///< points to serializable object of type X or NULL
    _XML                                 __any                         ;	///< Catch any other content in XML string.
};


/******************************************************************************\
 *                                                                            *
 * Service Binding                                                            *
 *   MessengerServiceSoapBinding                                              *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__process                                                           *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__process" of service binding "MessengerServiceSoapBinding".

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://services.stdpr.ru:8092/duplo/services/duplo2

  - Addressing input action: ""

  - Addressing output action: "Response"

  - Output Fault: "http://service/":DuploFault (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__process(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    ns1__process*                       ns1__process_,
    // output parameters:
    ns1__processResponse               &ns1__processResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__process(
    struct soap *soap,
    // input parameters:
    ns1__process*                       ns1__process_,
    // output parameters:
    ns1__processResponse               &ns1__processResponse_
  );
@endcode

C++ proxy class (defined in soapMessengerServiceSoapBindingProxy.h generated with soapcpp2):
@code
  class MessengerServiceSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapMessengerServiceSoapBindingService.h generated with soapcpp2):
@code
  class MessengerServiceSoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	process SOAP
//gsoap ns1  service method-style:	process document
//gsoap ns1  service method-encoding:	process literal
//gsoap ns1  service method-action:	process ""
//gsoap ns1  service method-output-action:	process Response
//gsoap ns1  service method-fault:	process ns1__DuploFault
int __ns1__process(
    ns1__process*                       ns1__process_,	///< Input parameter
    ns1__processResponse               &ns1__processResponse_	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__processGetInfo                                                    *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__processGetInfo" of service binding "MessengerServiceSoapBinding".

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://services.stdpr.ru:8092/duplo/services/duplo2

  - Addressing input action: ""

  - Addressing output action: "Response"

  - Output Fault: "http://service/":DuploFault (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__processGetInfo(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    ns1__processGetInfo*                ns1__processGetInfo_,
    // output parameters:
    ns1__processGetInfoResponse        &ns1__processGetInfoResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__processGetInfo(
    struct soap *soap,
    // input parameters:
    ns1__processGetInfo*                ns1__processGetInfo_,
    // output parameters:
    ns1__processGetInfoResponse        &ns1__processGetInfoResponse_
  );
@endcode

C++ proxy class (defined in soapMessengerServiceSoapBindingProxy.h generated with soapcpp2):
@code
  class MessengerServiceSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapMessengerServiceSoapBindingService.h generated with soapcpp2):
@code
  class MessengerServiceSoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	processGetInfo SOAP
//gsoap ns1  service method-style:	processGetInfo document
//gsoap ns1  service method-encoding:	processGetInfo literal
//gsoap ns1  service method-action:	processGetInfo ""
//gsoap ns1  service method-output-action:	processGetInfo Response
//gsoap ns1  service method-fault:	processGetInfo ns1__DuploFault
int __ns1__processGetInfo(
    ns1__processGetInfo*                ns1__processGetInfo_,	///< Input parameter
    ns1__processGetInfoResponse        &ns1__processGetInfoResponse_	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__getVersion                                                        *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__getVersion" of service binding "MessengerServiceSoapBinding".

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://services.stdpr.ru:8092/duplo/services/duplo2

  - Addressing input action: ""

  - Addressing output action: "Response"

  - Output Fault: "http://service/":DuploFault (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__getVersion(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    ns1__getVersion*                    ns1__getVersion_,
    // output parameters:
    ns1__getVersionResponse            &ns1__getVersionResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__getVersion(
    struct soap *soap,
    // input parameters:
    ns1__getVersion*                    ns1__getVersion_,
    // output parameters:
    ns1__getVersionResponse            &ns1__getVersionResponse_
  );
@endcode

C++ proxy class (defined in soapMessengerServiceSoapBindingProxy.h generated with soapcpp2):
@code
  class MessengerServiceSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapMessengerServiceSoapBindingService.h generated with soapcpp2):
@code
  class MessengerServiceSoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	getVersion SOAP
//gsoap ns1  service method-style:	getVersion document
//gsoap ns1  service method-encoding:	getVersion literal
//gsoap ns1  service method-action:	getVersion ""
//gsoap ns1  service method-output-action:	getVersion Response
//gsoap ns1  service method-fault:	getVersion ns1__DuploFault
int __ns1__getVersion(
    ns1__getVersion*                    ns1__getVersion_,	///< Input parameter
    ns1__getVersionResponse            &ns1__getVersionResponse_	///< Output parameter
);

/**

@page MessengerServiceSoapBinding Binding "MessengerServiceSoapBinding"

@section MessengerServiceSoapBinding_policy_enablers Policy Enablers of Binding "MessengerServiceSoapBinding"

None specified.

*/

/******************************************************************************\
 *                                                                            *
 * XML Data Binding                                                           *
 *                                                                            *
\******************************************************************************/


/**

@page page_XMLDataBinding XML Data Binding

SOAP/XML services use data bindings contractually bound by WSDL and auto-
generated by wsdl2h and soapcpp2 (see Service Bindings). Plain data bindings
are adopted from XML schemas as part of the WSDL types section or when running
wsdl2h on a set of schemas to produce non-SOAP-based XML data bindings.

The following readers and writers are C/C++ data type (de)serializers auto-
generated by wsdl2h and soapcpp2. Run soapcpp2 on this file to generate the
(de)serialization code, which is stored in soapC.c[pp]. Include "soapH.h" in
your code to import these data type and function declarations. Only use the
soapcpp2-generated files in your project build. Do not include the wsdl2h-
generated .h file in your code.

Data can be read and deserialized from:
  - an int file descriptor, using soap->recvfd = fd
  - a socket, using soap->socket = (int)...
  - a C++ stream (istream, stringstream), using soap->is = (istream*)...
  - a C string, using soap->is = (const char*)...
  - any input, using the soap->frecv() callback

Data can be serialized and written to:
  - an int file descriptor, using soap->sendfd = (int)...
  - a socket, using soap->socket = (int)...
  - a C++ stream (ostream, stringstream), using soap->os = (ostream*)...
  - a C string, using soap->os = (const char**)...
  - any output, using the soap->fsend() callback

The following options are available for (de)serialization control:
  - soap->encodingStyle = NULL; to remove SOAP 1.1/1.2 encodingStyle
  - soap_mode(soap, SOAP_XML_TREE); XML without id-ref (no cycles!)
  - soap_mode(soap, SOAP_XML_GRAPH); XML with id-ref (including cycles)
  - soap_set_namespaces(soap, struct Namespace *nsmap); to set xmlns bindings


@section ns1 Top-level root elements of schema "http://service/"

  - <ns1:getVersion> (use wsdl2h option -g to auto-generate type _ns1__getVersion)

  - <ns1:getVersionResponse> (use wsdl2h option -g to auto-generate type _ns1__getVersionResponse)

  - <ns1:process> (use wsdl2h option -g to auto-generate type _ns1__process)

  - <ns1:processGetInfo> (use wsdl2h option -g to auto-generate type _ns1__processGetInfo)

  - <ns1:processGetInfoResponse> (use wsdl2h option -g to auto-generate type _ns1__processGetInfoResponse)

  - <ns1:processResponse> (use wsdl2h option -g to auto-generate type _ns1__processResponse)

  - <ns1:DuploFault> (use wsdl2h option -g to auto-generate type _ns1__DuploFault)

*/

/* End of duplo.h */
