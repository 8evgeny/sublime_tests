/* soapMessengerServiceSoapBindingService.cpp
   Generated by gSOAP 2.8.74 for duplo.h

gSOAP XML Web services tools
Copyright (C) 2000-2018, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#include "soapMessengerServiceSoapBindingService.h"

MessengerServiceSoapBindingService::MessengerServiceSoapBindingService()
{	this->soap = soap_new();
	this->soap_own = true;
	MessengerServiceSoapBindingService_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

MessengerServiceSoapBindingService::MessengerServiceSoapBindingService(const MessengerServiceSoapBindingService& rhs)
{	this->soap = rhs.soap;
	this->soap_own = false;
}

MessengerServiceSoapBindingService::MessengerServiceSoapBindingService(struct soap *_soap)
{	this->soap = _soap;
	this->soap_own = false;
	MessengerServiceSoapBindingService_init(_soap->imode, _soap->omode);
}

MessengerServiceSoapBindingService::MessengerServiceSoapBindingService(soap_mode iomode)
{	this->soap = soap_new();
	this->soap_own = true;
	MessengerServiceSoapBindingService_init(iomode, iomode);
}

MessengerServiceSoapBindingService::MessengerServiceSoapBindingService(soap_mode imode, soap_mode omode)
{	this->soap = soap_new();
	this->soap_own = true;
	MessengerServiceSoapBindingService_init(imode, omode);
}

MessengerServiceSoapBindingService::~MessengerServiceSoapBindingService()
{	if (this->soap_own)
		soap_free(this->soap);
}

void MessengerServiceSoapBindingService::MessengerServiceSoapBindingService_init(soap_mode imode, soap_mode omode)
{	soap_imode(this->soap, imode);
	soap_omode(this->soap, omode);
	static const struct Namespace namespaces[] = {
        { "SOAP-ENV", "http://www.w3.org/2003/05/soap-envelope", "http://schemas.xmlsoap.org/soap/envelope/", NULL },
        { "SOAP-ENC", "http://www.w3.org/2003/05/soap-encoding", "http://schemas.xmlsoap.org/soap/encoding/", NULL },
        { "xsi", "http://www.w3.org/2001/XMLSchema-instance", "http://www.w3.org/*/XMLSchema-instance", NULL },
        { "xsd", "http://www.w3.org/2001/XMLSchema", "http://www.w3.org/*/XMLSchema", NULL },
        { "ns1", "http://service/", NULL, NULL },
        { NULL, NULL, NULL, NULL}
    };
	soap_set_namespaces(this->soap, namespaces);
}

void MessengerServiceSoapBindingService::destroy()
{	soap_destroy(this->soap);
	soap_end(this->soap);
}

void MessengerServiceSoapBindingService::reset()
{	this->destroy();
	soap_done(this->soap);
	soap_initialize(this->soap);
	MessengerServiceSoapBindingService_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

#ifndef WITH_PURE_VIRTUAL
MessengerServiceSoapBindingService *MessengerServiceSoapBindingService::copy()
{	MessengerServiceSoapBindingService *dup = SOAP_NEW_UNMANAGED(MessengerServiceSoapBindingService);
	if (dup)
	{	soap_done(dup->soap);
		soap_copy_context(dup->soap, this->soap);
	}
	return dup;
}
#endif

MessengerServiceSoapBindingService& MessengerServiceSoapBindingService::operator=(const MessengerServiceSoapBindingService& rhs)
{	if (this->soap != rhs.soap)
	{	if (this->soap_own)
			soap_free(this->soap);
		this->soap = rhs.soap;
		this->soap_own = false;
	}
	return *this;
}

int MessengerServiceSoapBindingService::soap_close_socket()
{	return soap_closesock(this->soap);
}

int MessengerServiceSoapBindingService::soap_force_close_socket()
{	return soap_force_closesock(this->soap);
}

int MessengerServiceSoapBindingService::soap_senderfault(const char *string, const char *detailXML)
{	return ::soap_sender_fault(this->soap, string, detailXML);
}

int MessengerServiceSoapBindingService::soap_senderfault(const char *subcodeQName, const char *string, const char *detailXML)
{	return ::soap_sender_fault_subcode(this->soap, subcodeQName, string, detailXML);
}

int MessengerServiceSoapBindingService::soap_receiverfault(const char *string, const char *detailXML)
{	return ::soap_receiver_fault(this->soap, string, detailXML);
}

int MessengerServiceSoapBindingService::soap_receiverfault(const char *subcodeQName, const char *string, const char *detailXML)
{	return ::soap_receiver_fault_subcode(this->soap, subcodeQName, string, detailXML);
}

void MessengerServiceSoapBindingService::soap_print_fault(FILE *fd)
{	::soap_print_fault(this->soap, fd);
}

#ifndef WITH_LEAN
#ifndef WITH_COMPAT
void MessengerServiceSoapBindingService::soap_stream_fault(std::ostream& os)
{	::soap_stream_fault(this->soap, os);
}
#endif

char *MessengerServiceSoapBindingService::soap_sprint_fault(char *buf, size_t len)
{	return ::soap_sprint_fault(this->soap, buf, len);
}
#endif

void MessengerServiceSoapBindingService::soap_noheader()
{	this->soap->header = NULL;
}

::SOAP_ENV__Header *MessengerServiceSoapBindingService::soap_header()
{	return this->soap->header;
}

#ifndef WITH_NOIO
int MessengerServiceSoapBindingService::run(int port, int backlog)
{	if (!soap_valid_socket(this->soap->master) && !soap_valid_socket(this->bind(NULL, port, backlog)))
		return this->soap->error;
	for (;;)
	{	if (!soap_valid_socket(this->accept()))
		{	if (this->soap->errnum == 0) // timeout?
				this->soap->error = SOAP_OK;
			break;
		}
		if (this->serve())
			break;
		this->destroy();
	}
	return this->soap->error;
}

#if defined(WITH_OPENSSL) || defined(WITH_GNUTLS)
int MessengerServiceSoapBindingService::ssl_run(int port, int backlog)
{	if (!soap_valid_socket(this->soap->master) && !soap_valid_socket(this->bind(NULL, port, backlog)))
		return this->soap->error;
	for (;;)
	{	if (!soap_valid_socket(this->accept()))
		{	if (this->soap->errnum == 0) // timeout?
				this->soap->error = SOAP_OK;
			break;
		}
		if (this->ssl_accept() || this->serve())
			break;
		this->destroy();
	}
	return this->soap->error;
}
#endif

SOAP_SOCKET MessengerServiceSoapBindingService::bind(const char *host, int port, int backlog)
{	return soap_bind(this->soap, host, port, backlog);
}

SOAP_SOCKET MessengerServiceSoapBindingService::accept()
{	return soap_accept(this->soap);
}

#if defined(WITH_OPENSSL) || defined(WITH_GNUTLS)
int MessengerServiceSoapBindingService::ssl_accept()
{	return soap_ssl_accept(this->soap);
}
#endif
#endif

int MessengerServiceSoapBindingService::serve()
{
#ifndef WITH_FASTCGI
	this->soap->keep_alive = this->soap->max_keep_alive + 1;
#endif
	do
	{
#ifndef WITH_FASTCGI
		if (this->soap->keep_alive > 0 && this->soap->max_keep_alive > 0)
			this->soap->keep_alive--;
#endif
		if (soap_begin_serve(this->soap))
		{	if (this->soap->error >= SOAP_STOP)
				continue;
			return this->soap->error;
		}
		if ((dispatch() || (this->soap->fserveloop && this->soap->fserveloop(this->soap))) && this->soap->error && this->soap->error < SOAP_STOP)
		{
#ifdef WITH_FASTCGI
			soap_send_fault(this->soap);
#else
			return soap_send_fault(this->soap);
#endif
		}
#ifdef WITH_FASTCGI
		soap_destroy(this->soap);
		soap_end(this->soap);
	} while (1);
#else
	} while (this->soap->keep_alive);
#endif
	return SOAP_OK;
}

static int serve___ns1__process(struct soap*, MessengerServiceSoapBindingService*);
static int serve___ns1__processGetInfo(struct soap*, MessengerServiceSoapBindingService*);
static int serve___ns1__getVersion(struct soap*, MessengerServiceSoapBindingService*);

int MessengerServiceSoapBindingService::dispatch()
{	return dispatch(this->soap);
}

int MessengerServiceSoapBindingService::dispatch(struct soap* soap)
{
	MessengerServiceSoapBindingService_init(soap->imode, soap->omode);

	soap_peek_element(soap);
	if (!soap_match_tag(soap, soap->tag, "ns1:process"))
		return serve___ns1__process(soap, this);
	if (!soap_match_tag(soap, soap->tag, "ns1:processGetInfo"))
		return serve___ns1__processGetInfo(soap, this);
	if (!soap_match_tag(soap, soap->tag, "ns1:getVersion"))
		return serve___ns1__getVersion(soap, this);
	return soap->error = SOAP_NO_METHOD;
}

static int serve___ns1__process(struct soap *soap, MessengerServiceSoapBindingService *service)
{	struct __ns1__process soap_tmp___ns1__process;
	ns1__processResponse ns1__processResponse_;
	ns1__processResponse_.soap_default(soap);
	soap_default___ns1__process(soap, &soap_tmp___ns1__process);
	if (!soap_get___ns1__process(soap, &soap_tmp___ns1__process, "-ns1:process", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->process(soap_tmp___ns1__process.ns1__process_, ns1__processResponse_);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	ns1__processResponse_.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || ns1__processResponse_.soap_put(soap, "ns1:processResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || ns1__processResponse_.soap_put(soap, "ns1:processResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___ns1__processGetInfo(struct soap *soap, MessengerServiceSoapBindingService *service)
{	struct __ns1__processGetInfo soap_tmp___ns1__processGetInfo;
	ns1__processGetInfoResponse ns1__processGetInfoResponse_;
	ns1__processGetInfoResponse_.soap_default(soap);
	soap_default___ns1__processGetInfo(soap, &soap_tmp___ns1__processGetInfo);
	if (!soap_get___ns1__processGetInfo(soap, &soap_tmp___ns1__processGetInfo, "-ns1:processGetInfo", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->processGetInfo(soap_tmp___ns1__processGetInfo.ns1__processGetInfo_, ns1__processGetInfoResponse_);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	ns1__processGetInfoResponse_.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || ns1__processGetInfoResponse_.soap_put(soap, "ns1:processGetInfoResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || ns1__processGetInfoResponse_.soap_put(soap, "ns1:processGetInfoResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___ns1__getVersion(struct soap *soap, MessengerServiceSoapBindingService *service)
{	struct __ns1__getVersion soap_tmp___ns1__getVersion;
	ns1__getVersionResponse ns1__getVersionResponse_;
	ns1__getVersionResponse_.soap_default(soap);
	soap_default___ns1__getVersion(soap, &soap_tmp___ns1__getVersion);
	if (!soap_get___ns1__getVersion(soap, &soap_tmp___ns1__getVersion, "-ns1:getVersion", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->getVersion(soap_tmp___ns1__getVersion.ns1__getVersion_, ns1__getVersionResponse_);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	ns1__getVersionResponse_.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || ns1__getVersionResponse_.soap_put(soap, "ns1:getVersionResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || ns1__getVersionResponse_.soap_put(soap, "ns1:getVersionResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}
/* End of server object code */
