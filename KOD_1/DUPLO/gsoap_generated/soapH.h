/* soapH.h
   Generated by gSOAP 2.8.74 for duplo.h

gSOAP XML Web services tools
Copyright (C) 2000-2018, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#ifndef soapH_H
#define soapH_H
#include "soapStub.h"
#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap*, const void*, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap*);
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap*);
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void * SOAP_FMAC4 soap_getelement(struct soap*, int*);
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap*, const void*, const char*, int, int);
SOAP_FMAC3 void * SOAP_FMAC4 soap_dupelement(struct soap*, const void*, int);
SOAP_FMAC3 void SOAP_FMAC4 soap_delelement(const void*, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap*);

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap);
SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap*, int, const char*, const char*, size_t*);
SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap *soap, struct soap_clist*);
SOAP_FMAC3 int SOAP_FMAC4 soap_fbase(int, int);
SOAP_FMAC3 void SOAP_FMAC4 soap_finsert(struct soap*, int, int, void*, size_t, const void*, void**);

#ifndef SOAP_TYPE_byte_DEFINED
#define SOAP_TYPE_byte_DEFINED

inline void soap_default_byte(struct soap *soap, char *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_byte
	*a = SOAP_DEFAULT_byte;
#else
	*a = (char)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap*, const char*, int, const char *, const char*);
SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap*, const char*, char *, const char*);

SOAP_FMAC3 char * SOAP_FMAC4 soap_new_byte(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap*, const char *, const char*, const char*);

inline int soap_write_byte(struct soap *soap, char const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_byte(soap, p, "byte", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_byte(struct soap *soap, const char *URL, char const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_byte(soap, p, "byte", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_byte(struct soap *soap, const char *URL, char const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_byte(soap, p, "byte", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_byte(struct soap *soap, const char *URL, char const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_byte(soap, p, "byte", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap*, char *, const char*, const char*);

inline int soap_read_byte(struct soap *soap, char *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_byte(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_byte(struct soap *soap, const char *URL, char *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_byte(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_byte(struct soap *soap, char *p)
{
	if (::soap_read_byte(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_int_DEFINED
#define SOAP_TYPE_int_DEFINED

inline void soap_default_int(struct soap *soap, int *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_int
	*a = SOAP_DEFAULT_int;
#else
	*a = (int)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap*, const char*, int, const int *, const char*);
SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap*, const char*, int *, const char*);

SOAP_FMAC3 int * SOAP_FMAC4 soap_new_int(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap*, const int *, const char*, const char*);

inline int soap_write_int(struct soap *soap, int const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_int(soap, p, "int", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_int(struct soap *soap, const char *URL, int const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_int(soap, p, "int", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_int(struct soap *soap, const char *URL, int const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_int(soap, p, "int", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_int(struct soap *soap, const char *URL, int const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_int(soap, p, "int", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap*, int *, const char*, const char*);

inline int soap_read_int(struct soap *soap, int *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_int(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_int(struct soap *soap, const char *URL, int *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_int(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_int(struct soap *soap, int *p)
{
	if (::soap_read_int(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_unsignedByte_DEFINED
#define SOAP_TYPE_unsignedByte_DEFINED

inline void soap_default_unsignedByte(struct soap *soap, unsigned char *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_unsignedByte
	*a = SOAP_DEFAULT_unsignedByte;
#else
	*a = (unsigned char)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedByte(struct soap*, const char*, int, const unsigned char *, const char*);
SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_in_unsignedByte(struct soap*, const char*, unsigned char *, const char*);

SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_new_unsignedByte(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedByte(struct soap*, const unsigned char *, const char*, const char*);

inline int soap_write_unsignedByte(struct soap *soap, unsigned char const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_unsignedByte(soap, p, "unsignedByte", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_unsignedByte(struct soap *soap, const char *URL, unsigned char const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_unsignedByte(soap, p, "unsignedByte", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_unsignedByte(struct soap *soap, const char *URL, unsigned char const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_unsignedByte(soap, p, "unsignedByte", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_unsignedByte(struct soap *soap, const char *URL, unsigned char const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_unsignedByte(soap, p, "unsignedByte", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_get_unsignedByte(struct soap*, unsigned char *, const char*, const char*);

inline int soap_read_unsignedByte(struct soap *soap, unsigned char *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_unsignedByte(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_unsignedByte(struct soap *soap, const char *URL, unsigned char *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_unsignedByte(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_unsignedByte(struct soap *soap, unsigned char *p)
{
	if (::soap_read_unsignedByte(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_unsignedInt_DEFINED
#define SOAP_TYPE_unsignedInt_DEFINED

inline void soap_default_unsignedInt(struct soap *soap, unsigned int *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_unsignedInt
	*a = SOAP_DEFAULT_unsignedInt;
#else
	*a = (unsigned int)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedInt(struct soap*, const char*, int, const unsigned int *, const char*);
SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_in_unsignedInt(struct soap*, const char*, unsigned int *, const char*);

SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_new_unsignedInt(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedInt(struct soap*, const unsigned int *, const char*, const char*);

inline int soap_write_unsignedInt(struct soap *soap, unsigned int const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_unsignedInt(soap, p, "unsignedInt", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_unsignedInt(struct soap *soap, const char *URL, unsigned int const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_unsignedInt(soap, p, "unsignedInt", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_unsignedInt(struct soap *soap, const char *URL, unsigned int const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_unsignedInt(soap, p, "unsignedInt", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_unsignedInt(struct soap *soap, const char *URL, unsigned int const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_unsignedInt(soap, p, "unsignedInt", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_get_unsignedInt(struct soap*, unsigned int *, const char*, const char*);

inline int soap_read_unsignedInt(struct soap *soap, unsigned int *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_unsignedInt(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_unsignedInt(struct soap *soap, const char *URL, unsigned int *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_unsignedInt(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_unsignedInt(struct soap *soap, unsigned int *p)
{
	if (::soap_read_unsignedInt(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_dateTime_DEFINED
#define SOAP_TYPE_dateTime_DEFINED

inline void soap_default_dateTime(struct soap *soap, time_t *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_dateTime
	*a = SOAP_DEFAULT_dateTime;
#else
	*a = (time_t)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_dateTime(struct soap*, const char*, int, const time_t *, const char*);
SOAP_FMAC3 time_t * SOAP_FMAC4 soap_in_dateTime(struct soap*, const char*, time_t *, const char*);

SOAP_FMAC3 time_t * SOAP_FMAC4 soap_new_dateTime(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_dateTime(struct soap*, const time_t *, const char*, const char*);

inline int soap_write_dateTime(struct soap *soap, time_t const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_dateTime(soap, p, "dateTime", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_dateTime(struct soap *soap, const char *URL, time_t const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_dateTime(soap, p, "dateTime", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_dateTime(struct soap *soap, const char *URL, time_t const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_dateTime(soap, p, "dateTime", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_dateTime(struct soap *soap, const char *URL, time_t const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_dateTime(soap, p, "dateTime", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 time_t * SOAP_FMAC4 soap_get_dateTime(struct soap*, time_t *, const char*, const char*);

inline int soap_read_dateTime(struct soap *soap, time_t *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_dateTime(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_dateTime(struct soap *soap, const char *URL, time_t *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_dateTime(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_dateTime(struct soap *soap, time_t *p)
{
	if (::soap_read_dateTime(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_bool_DEFINED
#define SOAP_TYPE_bool_DEFINED

inline void soap_default_bool(struct soap *soap, bool *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_bool
	*a = SOAP_DEFAULT_bool;
#else
	*a = (bool)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_bool(struct soap*, const char*, int, const bool *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_bool2s(struct soap*, bool);
SOAP_FMAC3 bool * SOAP_FMAC4 soap_in_bool(struct soap*, const char*, bool *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2bool(struct soap*, const char*, bool *);

SOAP_FMAC3 bool * SOAP_FMAC4 soap_new_bool(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_bool(struct soap*, const bool *, const char*, const char*);

inline int soap_write_bool(struct soap *soap, bool const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_bool(soap, p, "boolean", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_bool(struct soap *soap, const char *URL, bool const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_bool(soap, p, "boolean", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_bool(struct soap *soap, const char *URL, bool const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_bool(soap, p, "boolean", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_bool(struct soap *soap, const char *URL, bool const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_bool(soap, p, "boolean", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 bool * SOAP_FMAC4 soap_get_bool(struct soap*, bool *, const char*, const char*);

inline int soap_read_bool(struct soap *soap, bool *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_bool(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_bool(struct soap *soap, const char *URL, bool *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_bool(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_bool(struct soap *soap, bool *p)
{
	if (::soap_read_bool(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__Version_DEFINED
#define SOAP_TYPE_ns1__Version_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__Version(struct soap*, const char*, int, const ns1__Version *, const char*);
SOAP_FMAC3 ns1__Version * SOAP_FMAC4 soap_in_ns1__Version(struct soap*, const char*, ns1__Version *, const char*);
SOAP_FMAC1 ns1__Version * SOAP_FMAC2 soap_instantiate_ns1__Version(struct soap*, int, const char*, const char*, size_t*);

inline ns1__Version * soap_new_ns1__Version(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__Version(soap, n, NULL, NULL, NULL);
}

inline ns1__Version * soap_new_req_ns1__Version(
	struct soap *soap)
{
	ns1__Version *_p = ::soap_new_ns1__Version(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__Version * soap_new_set_ns1__Version(
	struct soap *soap,
	std::string *buildVer)
{
	ns1__Version *_p = ::soap_new_ns1__Version(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__Version::buildVer = buildVer;
	}
	return _p;
}

inline int soap_write_ns1__Version(struct soap *soap, ns1__Version const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:Version", p->soap_type() == SOAP_TYPE_ns1__Version ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__Version(struct soap *soap, const char *URL, ns1__Version const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:Version", p->soap_type() == SOAP_TYPE_ns1__Version ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__Version(struct soap *soap, const char *URL, ns1__Version const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:Version", p->soap_type() == SOAP_TYPE_ns1__Version ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__Version(struct soap *soap, const char *URL, ns1__Version const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:Version", p->soap_type() == SOAP_TYPE_ns1__Version ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__Version * SOAP_FMAC4 soap_get_ns1__Version(struct soap*, ns1__Version *, const char*, const char*);

inline int soap_read_ns1__Version(struct soap *soap, ns1__Version *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__Version(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__Version(struct soap *soap, const char *URL, ns1__Version *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__Version(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__Version(struct soap *soap, ns1__Version *p)
{
	if (::soap_read_ns1__Version(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__getVersionResponse_DEFINED
#define SOAP_TYPE_ns1__getVersionResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getVersionResponse(struct soap*, const char*, int, const ns1__getVersionResponse *, const char*);
SOAP_FMAC3 ns1__getVersionResponse * SOAP_FMAC4 soap_in_ns1__getVersionResponse(struct soap*, const char*, ns1__getVersionResponse *, const char*);
SOAP_FMAC1 ns1__getVersionResponse * SOAP_FMAC2 soap_instantiate_ns1__getVersionResponse(struct soap*, int, const char*, const char*, size_t*);

inline ns1__getVersionResponse * soap_new_ns1__getVersionResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__getVersionResponse(soap, n, NULL, NULL, NULL);
}

inline ns1__getVersionResponse * soap_new_req_ns1__getVersionResponse(
	struct soap *soap)
{
	ns1__getVersionResponse *_p = ::soap_new_ns1__getVersionResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__getVersionResponse * soap_new_set_ns1__getVersionResponse(
	struct soap *soap,
	ns1__Version *return_)
{
	ns1__getVersionResponse *_p = ::soap_new_ns1__getVersionResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__getVersionResponse::return_ = return_;
	}
	return _p;
}

inline int soap_write_ns1__getVersionResponse(struct soap *soap, ns1__getVersionResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getVersionResponse", p->soap_type() == SOAP_TYPE_ns1__getVersionResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__getVersionResponse(struct soap *soap, const char *URL, ns1__getVersionResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getVersionResponse", p->soap_type() == SOAP_TYPE_ns1__getVersionResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__getVersionResponse(struct soap *soap, const char *URL, ns1__getVersionResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getVersionResponse", p->soap_type() == SOAP_TYPE_ns1__getVersionResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__getVersionResponse(struct soap *soap, const char *URL, ns1__getVersionResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getVersionResponse", p->soap_type() == SOAP_TYPE_ns1__getVersionResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__getVersionResponse * SOAP_FMAC4 soap_get_ns1__getVersionResponse(struct soap*, ns1__getVersionResponse *, const char*, const char*);

inline int soap_read_ns1__getVersionResponse(struct soap *soap, ns1__getVersionResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__getVersionResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__getVersionResponse(struct soap *soap, const char *URL, ns1__getVersionResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__getVersionResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__getVersionResponse(struct soap *soap, ns1__getVersionResponse *p)
{
	if (::soap_read_ns1__getVersionResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__getVersion_DEFINED
#define SOAP_TYPE_ns1__getVersion_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getVersion(struct soap*, const char*, int, const ns1__getVersion *, const char*);
SOAP_FMAC3 ns1__getVersion * SOAP_FMAC4 soap_in_ns1__getVersion(struct soap*, const char*, ns1__getVersion *, const char*);
SOAP_FMAC1 ns1__getVersion * SOAP_FMAC2 soap_instantiate_ns1__getVersion(struct soap*, int, const char*, const char*, size_t*);

inline ns1__getVersion * soap_new_ns1__getVersion(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__getVersion(soap, n, NULL, NULL, NULL);
}

inline ns1__getVersion * soap_new_req_ns1__getVersion(
	struct soap *soap)
{
	ns1__getVersion *_p = ::soap_new_ns1__getVersion(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__getVersion * soap_new_set_ns1__getVersion(
	struct soap *soap)
{
	ns1__getVersion *_p = ::soap_new_ns1__getVersion(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write_ns1__getVersion(struct soap *soap, ns1__getVersion const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getVersion", p->soap_type() == SOAP_TYPE_ns1__getVersion ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__getVersion(struct soap *soap, const char *URL, ns1__getVersion const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getVersion", p->soap_type() == SOAP_TYPE_ns1__getVersion ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__getVersion(struct soap *soap, const char *URL, ns1__getVersion const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getVersion", p->soap_type() == SOAP_TYPE_ns1__getVersion ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__getVersion(struct soap *soap, const char *URL, ns1__getVersion const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getVersion", p->soap_type() == SOAP_TYPE_ns1__getVersion ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__getVersion * SOAP_FMAC4 soap_get_ns1__getVersion(struct soap*, ns1__getVersion *, const char*, const char*);

inline int soap_read_ns1__getVersion(struct soap *soap, ns1__getVersion *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__getVersion(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__getVersion(struct soap *soap, const char *URL, ns1__getVersion *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__getVersion(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__getVersion(struct soap *soap, ns1__getVersion *p)
{
	if (::soap_read_ns1__getVersion(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__processResponse_DEFINED
#define SOAP_TYPE_ns1__processResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__processResponse(struct soap*, const char*, int, const ns1__processResponse *, const char*);
SOAP_FMAC3 ns1__processResponse * SOAP_FMAC4 soap_in_ns1__processResponse(struct soap*, const char*, ns1__processResponse *, const char*);
SOAP_FMAC1 ns1__processResponse * SOAP_FMAC2 soap_instantiate_ns1__processResponse(struct soap*, int, const char*, const char*, size_t*);

inline ns1__processResponse * soap_new_ns1__processResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__processResponse(soap, n, NULL, NULL, NULL);
}

inline ns1__processResponse * soap_new_req_ns1__processResponse(
	struct soap *soap,
	bool return_)
{
	ns1__processResponse *_p = ::soap_new_ns1__processResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__processResponse::return_ = return_;
	}
	return _p;
}

inline ns1__processResponse * soap_new_set_ns1__processResponse(
	struct soap *soap,
	bool return_)
{
	ns1__processResponse *_p = ::soap_new_ns1__processResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__processResponse::return_ = return_;
	}
	return _p;
}

inline int soap_write_ns1__processResponse(struct soap *soap, ns1__processResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:processResponse", p->soap_type() == SOAP_TYPE_ns1__processResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__processResponse(struct soap *soap, const char *URL, ns1__processResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:processResponse", p->soap_type() == SOAP_TYPE_ns1__processResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__processResponse(struct soap *soap, const char *URL, ns1__processResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:processResponse", p->soap_type() == SOAP_TYPE_ns1__processResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__processResponse(struct soap *soap, const char *URL, ns1__processResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:processResponse", p->soap_type() == SOAP_TYPE_ns1__processResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__processResponse * SOAP_FMAC4 soap_get_ns1__processResponse(struct soap*, ns1__processResponse *, const char*, const char*);

inline int soap_read_ns1__processResponse(struct soap *soap, ns1__processResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__processResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__processResponse(struct soap *soap, const char *URL, ns1__processResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__processResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__processResponse(struct soap *soap, ns1__processResponse *p)
{
	if (::soap_read_ns1__processResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__photoExtra_DEFINED
#define SOAP_TYPE_ns1__photoExtra_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__photoExtra(struct soap*, const char*, int, const ns1__photoExtra *, const char*);
SOAP_FMAC3 ns1__photoExtra * SOAP_FMAC4 soap_in_ns1__photoExtra(struct soap*, const char*, ns1__photoExtra *, const char*);
SOAP_FMAC1 ns1__photoExtra * SOAP_FMAC2 soap_instantiate_ns1__photoExtra(struct soap*, int, const char*, const char*, size_t*);

inline ns1__photoExtra * soap_new_ns1__photoExtra(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__photoExtra(soap, n, NULL, NULL, NULL);
}

inline ns1__photoExtra * soap_new_req_ns1__photoExtra(
	struct soap *soap)
{
	ns1__photoExtra *_p = ::soap_new_ns1__photoExtra(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__photoExtra * soap_new_set_ns1__photoExtra(
	struct soap *soap,
	time_t *v_USCOREframe_USCOREdatetime,
	xsd__base64Binary *v_USCOREphoto_USCOREextra,
	std::string *v_USCOREtype_USCOREphoto)
{
	ns1__photoExtra *_p = ::soap_new_ns1__photoExtra(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__photoExtra::v_USCOREframe_USCOREdatetime = v_USCOREframe_USCOREdatetime;
		_p->ns1__photoExtra::v_USCOREphoto_USCOREextra = v_USCOREphoto_USCOREextra;
		_p->ns1__photoExtra::v_USCOREtype_USCOREphoto = v_USCOREtype_USCOREphoto;
	}
	return _p;
}

inline int soap_write_ns1__photoExtra(struct soap *soap, ns1__photoExtra const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:photoExtra", p->soap_type() == SOAP_TYPE_ns1__photoExtra ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__photoExtra(struct soap *soap, const char *URL, ns1__photoExtra const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:photoExtra", p->soap_type() == SOAP_TYPE_ns1__photoExtra ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__photoExtra(struct soap *soap, const char *URL, ns1__photoExtra const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:photoExtra", p->soap_type() == SOAP_TYPE_ns1__photoExtra ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__photoExtra(struct soap *soap, const char *URL, ns1__photoExtra const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:photoExtra", p->soap_type() == SOAP_TYPE_ns1__photoExtra ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__photoExtra * SOAP_FMAC4 soap_get_ns1__photoExtra(struct soap*, ns1__photoExtra *, const char*, const char*);

inline int soap_read_ns1__photoExtra(struct soap *soap, ns1__photoExtra *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__photoExtra(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__photoExtra(struct soap *soap, const char *URL, ns1__photoExtra *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__photoExtra(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__photoExtra(struct soap *soap, ns1__photoExtra *p)
{
	if (::soap_read_ns1__photoExtra(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__trCheckIn_DEFINED
#define SOAP_TYPE_ns1__trCheckIn_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__trCheckIn(struct soap*, const char*, int, const ns1__trCheckIn *, const char*);
SOAP_FMAC3 ns1__trCheckIn * SOAP_FMAC4 soap_in_ns1__trCheckIn(struct soap*, const char*, ns1__trCheckIn *, const char*);
SOAP_FMAC1 ns1__trCheckIn * SOAP_FMAC2 soap_instantiate_ns1__trCheckIn(struct soap*, int, const char*, const char*, size_t*);

inline ns1__trCheckIn * soap_new_ns1__trCheckIn(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__trCheckIn(soap, n, NULL, NULL, NULL);
}

inline ns1__trCheckIn * soap_new_req_ns1__trCheckIn(
	struct soap *soap,
	time_t v_USCOREtime_USCOREcheck,
	const std::string& v_USCOREcamera)
{
	ns1__trCheckIn *_p = ::soap_new_ns1__trCheckIn(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__trCheckIn::v_USCOREtime_USCOREcheck = v_USCOREtime_USCOREcheck;
		_p->ns1__trCheckIn::v_USCOREcamera = v_USCOREcamera;
	}
	return _p;
}

inline ns1__trCheckIn * soap_new_set_ns1__trCheckIn(
	struct soap *soap,
	time_t v_USCOREtime_USCOREcheck,
	const std::string& v_USCOREcamera,
	std::string *v_USCOREgps_USCOREx,
	std::string *v_USCOREgps_USCOREy,
	std::string *v_USCOREazimut,
	std::string *v_USCOREdirection,
	int *v_USCOREspeed_USCORElimit,
	std::string *v_USCOREspeed,
	std::string *v_USCOREregno_USCOREcountry_USCOREid,
	int *v_USCOREregno_USCOREcolor_USCOREid,
	std::string *v_USCORErecognition_USCOREaccuracy,
	std::string *v_USCOREregno,
	const std::vector<int> & v_USCOREpr_USCOREviol,
	int *v_USCOREparking_USCOREnum,
	int *v_USCOREparking_USCOREzone,
	int *v_USCORElane_USCOREnum,
	std::string *v_USCOREcamera_USCOREplace,
	xsd__base64Binary *v_USCOREphoto_USCOREgrz,
	xsd__base64Binary *v_USCOREphoto_USCOREts)
{
	ns1__trCheckIn *_p = ::soap_new_ns1__trCheckIn(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__trCheckIn::v_USCOREtime_USCOREcheck = v_USCOREtime_USCOREcheck;
		_p->ns1__trCheckIn::v_USCOREcamera = v_USCOREcamera;
		_p->ns1__trCheckIn::v_USCOREgps_USCOREx = v_USCOREgps_USCOREx;
		_p->ns1__trCheckIn::v_USCOREgps_USCOREy = v_USCOREgps_USCOREy;
		_p->ns1__trCheckIn::v_USCOREazimut = v_USCOREazimut;
		_p->ns1__trCheckIn::v_USCOREdirection = v_USCOREdirection;
		_p->ns1__trCheckIn::v_USCOREspeed_USCORElimit = v_USCOREspeed_USCORElimit;
		_p->ns1__trCheckIn::v_USCOREspeed = v_USCOREspeed;
		_p->ns1__trCheckIn::v_USCOREregno_USCOREcountry_USCOREid = v_USCOREregno_USCOREcountry_USCOREid;
		_p->ns1__trCheckIn::v_USCOREregno_USCOREcolor_USCOREid = v_USCOREregno_USCOREcolor_USCOREid;
		_p->ns1__trCheckIn::v_USCORErecognition_USCOREaccuracy = v_USCORErecognition_USCOREaccuracy;
		_p->ns1__trCheckIn::v_USCOREregno = v_USCOREregno;
		_p->ns1__trCheckIn::v_USCOREpr_USCOREviol = v_USCOREpr_USCOREviol;
		_p->ns1__trCheckIn::v_USCOREparking_USCOREnum = v_USCOREparking_USCOREnum;
		_p->ns1__trCheckIn::v_USCOREparking_USCOREzone = v_USCOREparking_USCOREzone;
		_p->ns1__trCheckIn::v_USCORElane_USCOREnum = v_USCORElane_USCOREnum;
		_p->ns1__trCheckIn::v_USCOREcamera_USCOREplace = v_USCOREcamera_USCOREplace;
		_p->ns1__trCheckIn::v_USCOREphoto_USCOREgrz = v_USCOREphoto_USCOREgrz;
		_p->ns1__trCheckIn::v_USCOREphoto_USCOREts = v_USCOREphoto_USCOREts;
	}
	return _p;
}

inline int soap_write_ns1__trCheckIn(struct soap *soap, ns1__trCheckIn const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:trCheckIn", p->soap_type() == SOAP_TYPE_ns1__trCheckIn ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__trCheckIn(struct soap *soap, const char *URL, ns1__trCheckIn const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:trCheckIn", p->soap_type() == SOAP_TYPE_ns1__trCheckIn ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__trCheckIn(struct soap *soap, const char *URL, ns1__trCheckIn const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:trCheckIn", p->soap_type() == SOAP_TYPE_ns1__trCheckIn ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__trCheckIn(struct soap *soap, const char *URL, ns1__trCheckIn const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:trCheckIn", p->soap_type() == SOAP_TYPE_ns1__trCheckIn ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__trCheckIn * SOAP_FMAC4 soap_get_ns1__trCheckIn(struct soap*, ns1__trCheckIn *, const char*, const char*);

inline int soap_read_ns1__trCheckIn(struct soap *soap, ns1__trCheckIn *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__trCheckIn(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__trCheckIn(struct soap *soap, const char *URL, ns1__trCheckIn *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__trCheckIn(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__trCheckIn(struct soap *soap, ns1__trCheckIn *p)
{
	if (::soap_read_ns1__trCheckIn(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__message_DEFINED
#define SOAP_TYPE_ns1__message_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__message(struct soap*, const char*, int, const ns1__message *, const char*);
SOAP_FMAC3 ns1__message * SOAP_FMAC4 soap_in_ns1__message(struct soap*, const char*, ns1__message *, const char*);
SOAP_FMAC1 ns1__message * SOAP_FMAC2 soap_instantiate_ns1__message(struct soap*, int, const char*, const char*, size_t*);

inline ns1__message * soap_new_ns1__message(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__message(soap, n, NULL, NULL, NULL);
}

inline ns1__message * soap_new_req_ns1__message(
	struct soap *soap,
	ns1__trCheckIn *tr_USCOREcheckIn)
{
	ns1__message *_p = ::soap_new_ns1__message(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__message::tr_USCOREcheckIn = tr_USCOREcheckIn;
	}
	return _p;
}

inline ns1__message * soap_new_set_ns1__message(
	struct soap *soap,
	ns1__trCheckIn *tr_USCOREcheckIn,
	const std::vector<ns1__photoExtra *> & photo_USCOREextra)
{
	ns1__message *_p = ::soap_new_ns1__message(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__message::tr_USCOREcheckIn = tr_USCOREcheckIn;
		_p->ns1__message::photo_USCOREextra = photo_USCOREextra;
	}
	return _p;
}

inline int soap_write_ns1__message(struct soap *soap, ns1__message const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:message", p->soap_type() == SOAP_TYPE_ns1__message ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__message(struct soap *soap, const char *URL, ns1__message const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:message", p->soap_type() == SOAP_TYPE_ns1__message ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__message(struct soap *soap, const char *URL, ns1__message const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:message", p->soap_type() == SOAP_TYPE_ns1__message ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__message(struct soap *soap, const char *URL, ns1__message const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:message", p->soap_type() == SOAP_TYPE_ns1__message ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__message * SOAP_FMAC4 soap_get_ns1__message(struct soap*, ns1__message *, const char*, const char*);

inline int soap_read_ns1__message(struct soap *soap, ns1__message *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__message(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__message(struct soap *soap, const char *URL, ns1__message *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__message(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__message(struct soap *soap, ns1__message *p)
{
	if (::soap_read_ns1__message(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__process_DEFINED
#define SOAP_TYPE_ns1__process_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__process(struct soap*, const char*, int, const ns1__process *, const char*);
SOAP_FMAC3 ns1__process * SOAP_FMAC4 soap_in_ns1__process(struct soap*, const char*, ns1__process *, const char*);
SOAP_FMAC1 ns1__process * SOAP_FMAC2 soap_instantiate_ns1__process(struct soap*, int, const char*, const char*, size_t*);

inline ns1__process * soap_new_ns1__process(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__process(soap, n, NULL, NULL, NULL);
}

inline ns1__process * soap_new_req_ns1__process(
	struct soap *soap)
{
	ns1__process *_p = ::soap_new_ns1__process(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__process * soap_new_set_ns1__process(
	struct soap *soap,
	ns1__message *message)
{
	ns1__process *_p = ::soap_new_ns1__process(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__process::message = message;
	}
	return _p;
}

inline int soap_write_ns1__process(struct soap *soap, ns1__process const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:process", p->soap_type() == SOAP_TYPE_ns1__process ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__process(struct soap *soap, const char *URL, ns1__process const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:process", p->soap_type() == SOAP_TYPE_ns1__process ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__process(struct soap *soap, const char *URL, ns1__process const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:process", p->soap_type() == SOAP_TYPE_ns1__process ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__process(struct soap *soap, const char *URL, ns1__process const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:process", p->soap_type() == SOAP_TYPE_ns1__process ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__process * SOAP_FMAC4 soap_get_ns1__process(struct soap*, ns1__process *, const char*, const char*);

inline int soap_read_ns1__process(struct soap *soap, ns1__process *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__process(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__process(struct soap *soap, const char *URL, ns1__process *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__process(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__process(struct soap *soap, ns1__process *p)
{
	if (::soap_read_ns1__process(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__duploFault_DEFINED
#define SOAP_TYPE_ns1__duploFault_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__duploFault(struct soap*, const char*, int, const ns1__duploFault *, const char*);
SOAP_FMAC3 ns1__duploFault * SOAP_FMAC4 soap_in_ns1__duploFault(struct soap*, const char*, ns1__duploFault *, const char*);
SOAP_FMAC1 ns1__duploFault * SOAP_FMAC2 soap_instantiate_ns1__duploFault(struct soap*, int, const char*, const char*, size_t*);

inline ns1__duploFault * soap_new_ns1__duploFault(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__duploFault(soap, n, NULL, NULL, NULL);
}

inline ns1__duploFault * soap_new_req_ns1__duploFault(
	struct soap *soap)
{
	ns1__duploFault *_p = ::soap_new_ns1__duploFault(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__duploFault * soap_new_set_ns1__duploFault(
	struct soap *soap,
	std::string *faultCode,
	std::string *faultMessage)
{
	ns1__duploFault *_p = ::soap_new_ns1__duploFault(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__duploFault::faultCode = faultCode;
		_p->ns1__duploFault::faultMessage = faultMessage;
	}
	return _p;
}

inline int soap_write_ns1__duploFault(struct soap *soap, ns1__duploFault const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:duploFault", p->soap_type() == SOAP_TYPE_ns1__duploFault ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__duploFault(struct soap *soap, const char *URL, ns1__duploFault const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:duploFault", p->soap_type() == SOAP_TYPE_ns1__duploFault ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__duploFault(struct soap *soap, const char *URL, ns1__duploFault const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:duploFault", p->soap_type() == SOAP_TYPE_ns1__duploFault ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__duploFault(struct soap *soap, const char *URL, ns1__duploFault const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:duploFault", p->soap_type() == SOAP_TYPE_ns1__duploFault ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__duploFault * SOAP_FMAC4 soap_get_ns1__duploFault(struct soap*, ns1__duploFault *, const char*, const char*);

inline int soap_read_ns1__duploFault(struct soap *soap, ns1__duploFault *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__duploFault(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__duploFault(struct soap *soap, const char *URL, ns1__duploFault *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__duploFault(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__duploFault(struct soap *soap, ns1__duploFault *p)
{
	if (::soap_read_ns1__duploFault(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__cameraInfo_DEFINED
#define SOAP_TYPE_ns1__cameraInfo_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__cameraInfo(struct soap*, const char*, int, const ns1__cameraInfo *, const char*);
SOAP_FMAC3 ns1__cameraInfo * SOAP_FMAC4 soap_in_ns1__cameraInfo(struct soap*, const char*, ns1__cameraInfo *, const char*);
SOAP_FMAC1 ns1__cameraInfo * SOAP_FMAC2 soap_instantiate_ns1__cameraInfo(struct soap*, int, const char*, const char*, size_t*);

inline ns1__cameraInfo * soap_new_ns1__cameraInfo(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__cameraInfo(soap, n, NULL, NULL, NULL);
}

inline ns1__cameraInfo * soap_new_req_ns1__cameraInfo(
	struct soap *soap)
{
	ns1__cameraInfo *_p = ::soap_new_ns1__cameraInfo(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__cameraInfo * soap_new_set_ns1__cameraInfo(
	struct soap *soap,
	std::string *azimut,
	std::string *camera,
	int *camera_USCOREid,
	std::string *camera_USCOREmodel,
	std::string *camera_USCOREplace,
	std::string *gps_USCOREx,
	std::string *gps_USCOREy,
	int *lane_USCOREnum,
	int *p_USCOREnode,
	std::string *print_USCOREname,
	std::string *priz_USCOREarh,
	std::string *serial_USCOREno,
	std::string *type,
	std::string *v_USCOREclass)
{
	ns1__cameraInfo *_p = ::soap_new_ns1__cameraInfo(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__cameraInfo::azimut = azimut;
		_p->ns1__cameraInfo::camera = camera;
		_p->ns1__cameraInfo::camera_USCOREid = camera_USCOREid;
		_p->ns1__cameraInfo::camera_USCOREmodel = camera_USCOREmodel;
		_p->ns1__cameraInfo::camera_USCOREplace = camera_USCOREplace;
		_p->ns1__cameraInfo::gps_USCOREx = gps_USCOREx;
		_p->ns1__cameraInfo::gps_USCOREy = gps_USCOREy;
		_p->ns1__cameraInfo::lane_USCOREnum = lane_USCOREnum;
		_p->ns1__cameraInfo::p_USCOREnode = p_USCOREnode;
		_p->ns1__cameraInfo::print_USCOREname = print_USCOREname;
		_p->ns1__cameraInfo::priz_USCOREarh = priz_USCOREarh;
		_p->ns1__cameraInfo::serial_USCOREno = serial_USCOREno;
		_p->ns1__cameraInfo::type = type;
		_p->ns1__cameraInfo::v_USCOREclass = v_USCOREclass;
	}
	return _p;
}

inline int soap_write_ns1__cameraInfo(struct soap *soap, ns1__cameraInfo const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:cameraInfo", p->soap_type() == SOAP_TYPE_ns1__cameraInfo ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__cameraInfo(struct soap *soap, const char *URL, ns1__cameraInfo const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:cameraInfo", p->soap_type() == SOAP_TYPE_ns1__cameraInfo ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__cameraInfo(struct soap *soap, const char *URL, ns1__cameraInfo const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:cameraInfo", p->soap_type() == SOAP_TYPE_ns1__cameraInfo ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__cameraInfo(struct soap *soap, const char *URL, ns1__cameraInfo const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:cameraInfo", p->soap_type() == SOAP_TYPE_ns1__cameraInfo ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__cameraInfo * SOAP_FMAC4 soap_get_ns1__cameraInfo(struct soap*, ns1__cameraInfo *, const char*, const char*);

inline int soap_read_ns1__cameraInfo(struct soap *soap, ns1__cameraInfo *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__cameraInfo(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__cameraInfo(struct soap *soap, const char *URL, ns1__cameraInfo *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__cameraInfo(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__cameraInfo(struct soap *soap, ns1__cameraInfo *p)
{
	if (::soap_read_ns1__cameraInfo(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__processGetInfoResponse_DEFINED
#define SOAP_TYPE_ns1__processGetInfoResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__processGetInfoResponse(struct soap*, const char*, int, const ns1__processGetInfoResponse *, const char*);
SOAP_FMAC3 ns1__processGetInfoResponse * SOAP_FMAC4 soap_in_ns1__processGetInfoResponse(struct soap*, const char*, ns1__processGetInfoResponse *, const char*);
SOAP_FMAC1 ns1__processGetInfoResponse * SOAP_FMAC2 soap_instantiate_ns1__processGetInfoResponse(struct soap*, int, const char*, const char*, size_t*);

inline ns1__processGetInfoResponse * soap_new_ns1__processGetInfoResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__processGetInfoResponse(soap, n, NULL, NULL, NULL);
}

inline ns1__processGetInfoResponse * soap_new_req_ns1__processGetInfoResponse(
	struct soap *soap)
{
	ns1__processGetInfoResponse *_p = ::soap_new_ns1__processGetInfoResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__processGetInfoResponse * soap_new_set_ns1__processGetInfoResponse(
	struct soap *soap,
	ns1__cameraInfo *return_)
{
	ns1__processGetInfoResponse *_p = ::soap_new_ns1__processGetInfoResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__processGetInfoResponse::return_ = return_;
	}
	return _p;
}

inline int soap_write_ns1__processGetInfoResponse(struct soap *soap, ns1__processGetInfoResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:processGetInfoResponse", p->soap_type() == SOAP_TYPE_ns1__processGetInfoResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__processGetInfoResponse(struct soap *soap, const char *URL, ns1__processGetInfoResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:processGetInfoResponse", p->soap_type() == SOAP_TYPE_ns1__processGetInfoResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__processGetInfoResponse(struct soap *soap, const char *URL, ns1__processGetInfoResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:processGetInfoResponse", p->soap_type() == SOAP_TYPE_ns1__processGetInfoResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__processGetInfoResponse(struct soap *soap, const char *URL, ns1__processGetInfoResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:processGetInfoResponse", p->soap_type() == SOAP_TYPE_ns1__processGetInfoResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__processGetInfoResponse * SOAP_FMAC4 soap_get_ns1__processGetInfoResponse(struct soap*, ns1__processGetInfoResponse *, const char*, const char*);

inline int soap_read_ns1__processGetInfoResponse(struct soap *soap, ns1__processGetInfoResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__processGetInfoResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__processGetInfoResponse(struct soap *soap, const char *URL, ns1__processGetInfoResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__processGetInfoResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__processGetInfoResponse(struct soap *soap, ns1__processGetInfoResponse *p)
{
	if (::soap_read_ns1__processGetInfoResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__processGetInfo_DEFINED
#define SOAP_TYPE_ns1__processGetInfo_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__processGetInfo(struct soap*, const char*, int, const ns1__processGetInfo *, const char*);
SOAP_FMAC3 ns1__processGetInfo * SOAP_FMAC4 soap_in_ns1__processGetInfo(struct soap*, const char*, ns1__processGetInfo *, const char*);
SOAP_FMAC1 ns1__processGetInfo * SOAP_FMAC2 soap_instantiate_ns1__processGetInfo(struct soap*, int, const char*, const char*, size_t*);

inline ns1__processGetInfo * soap_new_ns1__processGetInfo(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__processGetInfo(soap, n, NULL, NULL, NULL);
}

inline ns1__processGetInfo * soap_new_req_ns1__processGetInfo(
	struct soap *soap)
{
	ns1__processGetInfo *_p = ::soap_new_ns1__processGetInfo(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__processGetInfo * soap_new_set_ns1__processGetInfo(
	struct soap *soap,
	std::string *camera)
{
	ns1__processGetInfo *_p = ::soap_new_ns1__processGetInfo(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__processGetInfo::camera = camera;
	}
	return _p;
}

inline int soap_write_ns1__processGetInfo(struct soap *soap, ns1__processGetInfo const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:processGetInfo", p->soap_type() == SOAP_TYPE_ns1__processGetInfo ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__processGetInfo(struct soap *soap, const char *URL, ns1__processGetInfo const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:processGetInfo", p->soap_type() == SOAP_TYPE_ns1__processGetInfo ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__processGetInfo(struct soap *soap, const char *URL, ns1__processGetInfo const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:processGetInfo", p->soap_type() == SOAP_TYPE_ns1__processGetInfo ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__processGetInfo(struct soap *soap, const char *URL, ns1__processGetInfo const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:processGetInfo", p->soap_type() == SOAP_TYPE_ns1__processGetInfo ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__processGetInfo * SOAP_FMAC4 soap_get_ns1__processGetInfo(struct soap*, ns1__processGetInfo *, const char*, const char*);

inline int soap_read_ns1__processGetInfo(struct soap *soap, ns1__processGetInfo *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__processGetInfo(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__processGetInfo(struct soap *soap, const char *URL, ns1__processGetInfo *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__processGetInfo(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__processGetInfo(struct soap *soap, ns1__processGetInfo *p)
{
	if (::soap_read_ns1__processGetInfo(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_xsd__decimal_DEFINED
#define SOAP_TYPE_xsd__decimal_DEFINED

inline void soap_default_xsd__decimal(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__decimal(struct soap*, const std::string *);

#define soap_xsd__decimal2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__decimal(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2xsd__decimal(soap, s, a) soap_s2stdchar((soap), (s), (a), 5, 0, -1, "[-+]?(\\d+|\\d*\\.\\d*)")
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__decimal(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_xsd__decimal soap_instantiate_std__string


#define soap_new_xsd__decimal soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__decimal(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_xsd__decimal(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_xsd__decimal(soap, p, "xsd:decimal", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_xsd__decimal(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__decimal(soap, p, "xsd:decimal", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_xsd__decimal(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__decimal(soap, p, "xsd:decimal", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_xsd__decimal(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__decimal(soap, p, "xsd:decimal", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__decimal(struct soap*, std::string *, const char*, const char*);

inline int soap_read_xsd__decimal(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_xsd__decimal(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xsd__decimal(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_xsd__decimal(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_xsd__decimal(struct soap *soap, std::string *p)
{
	if (::soap_read_xsd__decimal(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_std__string_DEFINED
#define SOAP_TYPE_std__string_DEFINED

inline void soap_default_std__string(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__string(struct soap*, const std::string *);

#define soap_std__string2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__string(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2std__string(soap, s, a) soap_s2stdchar((soap), (s), (a), 1, 0, -1, NULL)
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_std__string(struct soap*, const char*, std::string*, const char*);
SOAP_FMAC1 std::string * SOAP_FMAC2 soap_instantiate_std__string(struct soap*, int, const char*, const char*, size_t*);

inline std::string * soap_new_std__string(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__string(soap, n, NULL, NULL, NULL);
}

inline std::string * soap_new_req_std__string(
	struct soap *soap)
{
	std::string *_p = ::soap_new_std__string(soap);
	if (_p)
	{	::soap_default_std__string(soap, _p);
	}
	return _p;
}

inline std::string * soap_new_set_std__string(
	struct soap *soap)
{
	std::string *_p = ::soap_new_std__string(soap);
	if (_p)
	{	::soap_default_std__string(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_std__string(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_std__string(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_std__string(soap, p, "string", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_std__string(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_std__string(soap, p, "string", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_std__string(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_std__string(soap, p, "string", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_std__string(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_std__string(soap, p, "string", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_std__string(struct soap*, std::string *, const char*, const char*);

inline int soap_read_std__string(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_std__string(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_std__string(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_std__string(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_std__string(struct soap *soap, std::string *p)
{
	if (::soap_read_std__string(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_xsd__base64Binary_DEFINED
#define SOAP_TYPE_xsd__base64Binary_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__base64Binary(struct soap*, const char*, int, const xsd__base64Binary *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_xsd__base64Binary2s(struct soap*, xsd__base64Binary);
SOAP_FMAC3 xsd__base64Binary * SOAP_FMAC4 soap_in_xsd__base64Binary(struct soap*, const char*, xsd__base64Binary *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2xsd__base64Binary(struct soap*, const char*, xsd__base64Binary *);
SOAP_FMAC1 xsd__base64Binary * SOAP_FMAC2 soap_instantiate_xsd__base64Binary(struct soap*, int, const char*, const char*, size_t*);

inline xsd__base64Binary * soap_new_xsd__base64Binary(struct soap *soap, int n = -1)
{
	return soap_instantiate_xsd__base64Binary(soap, n, NULL, NULL, NULL);
}

inline xsd__base64Binary * soap_new_req_xsd__base64Binary(
	struct soap *soap)
{
	xsd__base64Binary *_p = ::soap_new_xsd__base64Binary(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline xsd__base64Binary * soap_new_set_xsd__base64Binary(
	struct soap *soap,
	unsigned char *__ptr,
	int __size,
	char *id,
	char *type,
	char *options)
{
	xsd__base64Binary *_p = ::soap_new_xsd__base64Binary(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__base64Binary::__ptr = __ptr;
		_p->xsd__base64Binary::__size = __size;
		_p->xsd__base64Binary::id = id;
		_p->xsd__base64Binary::type = type;
		_p->xsd__base64Binary::options = options;
	}
	return _p;
}

inline int soap_write_xsd__base64Binary(struct soap *soap, xsd__base64Binary const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:base64Binary", p->soap_type() == SOAP_TYPE_xsd__base64Binary ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_xsd__base64Binary(struct soap *soap, const char *URL, xsd__base64Binary const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:base64Binary", p->soap_type() == SOAP_TYPE_xsd__base64Binary ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_xsd__base64Binary(struct soap *soap, const char *URL, xsd__base64Binary const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:base64Binary", p->soap_type() == SOAP_TYPE_xsd__base64Binary ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_xsd__base64Binary(struct soap *soap, const char *URL, xsd__base64Binary const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:base64Binary", p->soap_type() == SOAP_TYPE_xsd__base64Binary ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 xsd__base64Binary * SOAP_FMAC4 soap_get_xsd__base64Binary(struct soap*, xsd__base64Binary *, const char*, const char*);

inline int soap_read_xsd__base64Binary(struct soap *soap, xsd__base64Binary *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_xsd__base64Binary(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xsd__base64Binary(struct soap *soap, const char *URL, xsd__base64Binary *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_xsd__base64Binary(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_xsd__base64Binary(struct soap *soap, xsd__base64Binary *p)
{
	if (::soap_read_xsd__base64Binary(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Fault_DEFINED
#define SOAP_TYPE_SOAP_ENV__Fault_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap*, const char*, int, const struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap*, const char*, struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Fault * soap_new_SOAP_ENV__Fault(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Fault(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Fault * soap_new_req_SOAP_ENV__Fault(
	struct soap *soap)
{
	struct SOAP_ENV__Fault *_p = ::soap_new_SOAP_ENV__Fault(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Fault(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Fault * soap_new_set_SOAP_ENV__Fault(
	struct soap *soap,
	char *faultcode,
	char *faultstring,
	char *faultactor,
	struct SOAP_ENV__Detail *detail,
	struct SOAP_ENV__Code *SOAP_ENV__Code,
	struct SOAP_ENV__Reason *SOAP_ENV__Reason,
	char *SOAP_ENV__Node,
	char *SOAP_ENV__Role,
	struct SOAP_ENV__Detail *SOAP_ENV__Detail)
{
	struct SOAP_ENV__Fault *_p = ::soap_new_SOAP_ENV__Fault(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Fault(soap, _p);
		_p->faultcode = faultcode;
		_p->faultstring = faultstring;
		_p->faultactor = faultactor;
		_p->detail = detail;
		_p->SOAP_ENV__Code = SOAP_ENV__Code;
		_p->SOAP_ENV__Reason = SOAP_ENV__Reason;
		_p->SOAP_ENV__Node = SOAP_ENV__Node;
		_p->SOAP_ENV__Role = SOAP_ENV__Role;
		_p->SOAP_ENV__Detail = SOAP_ENV__Detail;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *, const char*, const char*);

inline int soap_write_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SOAP_ENV__Fault(soap, p), 0) || ::soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Fault(soap, p), 0) || ::soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Fault(soap, p), 0) || ::soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Fault(soap, p), 0) || ::soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *, const char*, const char*);

inline int soap_read_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p)
{
	if (p)
	{	::soap_default_SOAP_ENV__Fault(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SOAP_ENV__Fault(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SOAP_ENV__Fault(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p)
{
	if (::soap_read_SOAP_ENV__Fault(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Reason_DEFINED
#define SOAP_TYPE_SOAP_ENV__Reason_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap*, const char*, int, const struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Reason * soap_new_SOAP_ENV__Reason(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Reason(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Reason * soap_new_req_SOAP_ENV__Reason(
	struct soap *soap)
{
	struct SOAP_ENV__Reason *_p = ::soap_new_SOAP_ENV__Reason(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Reason(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Reason * soap_new_set_SOAP_ENV__Reason(
	struct soap *soap,
	char *SOAP_ENV__Text)
{
	struct SOAP_ENV__Reason *_p = ::soap_new_SOAP_ENV__Reason(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Reason(soap, _p);
		_p->SOAP_ENV__Text = SOAP_ENV__Text;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *, const char*, const char*);

inline int soap_write_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SOAP_ENV__Reason(soap, p), 0) || ::soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Reason(soap, p), 0) || ::soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Reason(soap, p), 0) || ::soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Reason(soap, p), 0) || ::soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *, const char*, const char*);

inline int soap_read_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p)
{
	if (p)
	{	::soap_default_SOAP_ENV__Reason(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SOAP_ENV__Reason(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SOAP_ENV__Reason(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p)
{
	if (::soap_read_SOAP_ENV__Reason(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Code_DEFINED
#define SOAP_TYPE_SOAP_ENV__Code_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap*, const char*, int, const struct SOAP_ENV__Code *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Code * soap_new_SOAP_ENV__Code(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Code(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Code * soap_new_req_SOAP_ENV__Code(
	struct soap *soap)
{
	struct SOAP_ENV__Code *_p = ::soap_new_SOAP_ENV__Code(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Code(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Code * soap_new_set_SOAP_ENV__Code(
	struct soap *soap,
	char *SOAP_ENV__Value,
	struct SOAP_ENV__Code *SOAP_ENV__Subcode)
{
	struct SOAP_ENV__Code *_p = ::soap_new_SOAP_ENV__Code(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Code(soap, _p);
		_p->SOAP_ENV__Value = SOAP_ENV__Value;
		_p->SOAP_ENV__Subcode = SOAP_ENV__Subcode;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *, const char*, const char*);

inline int soap_write_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SOAP_ENV__Code(soap, p), 0) || ::soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Code(soap, p), 0) || ::soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Code(soap, p), 0) || ::soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Code(soap, p), 0) || ::soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *, const char*, const char*);

inline int soap_read_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p)
{
	if (p)
	{	::soap_default_SOAP_ENV__Code(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SOAP_ENV__Code(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SOAP_ENV__Code(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p)
{
	if (::soap_read_SOAP_ENV__Code(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Header_DEFINED
#define SOAP_TYPE_SOAP_ENV__Header_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap*, const char*, int, const struct SOAP_ENV__Header *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap*, const char*, struct SOAP_ENV__Header *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Header * soap_new_SOAP_ENV__Header(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Header(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Header * soap_new_req_SOAP_ENV__Header(
	struct soap *soap)
{
	struct SOAP_ENV__Header *_p = ::soap_new_SOAP_ENV__Header(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Header(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Header * soap_new_set_SOAP_ENV__Header(
	struct soap *soap)
{
	struct SOAP_ENV__Header *_p = ::soap_new_SOAP_ENV__Header(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Header(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *, const char*, const char*);

inline int soap_write_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SOAP_ENV__Header(soap, p), 0) || ::soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Header(soap, p), 0) || ::soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Header(soap, p), 0) || ::soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Header(soap, p), 0) || ::soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *, const char*, const char*);

inline int soap_read_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p)
{
	if (p)
	{	::soap_default_SOAP_ENV__Header(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SOAP_ENV__Header(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SOAP_ENV__Header(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p)
{
	if (::soap_read_SOAP_ENV__Header(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#endif

#ifndef SOAP_TYPE___ns1__getVersion_DEFINED
#define SOAP_TYPE___ns1__getVersion_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__getVersion(struct soap*, struct __ns1__getVersion *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__getVersion(struct soap*, const struct __ns1__getVersion *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__getVersion(struct soap*, const char*, int, const struct __ns1__getVersion *, const char*);
SOAP_FMAC3 struct __ns1__getVersion * SOAP_FMAC4 soap_in___ns1__getVersion(struct soap*, const char*, struct __ns1__getVersion *, const char*);
SOAP_FMAC1 struct __ns1__getVersion * SOAP_FMAC2 soap_instantiate___ns1__getVersion(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__getVersion * soap_new___ns1__getVersion(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__getVersion(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__getVersion * soap_new_req___ns1__getVersion(
	struct soap *soap)
{
	struct __ns1__getVersion *_p = ::soap_new___ns1__getVersion(soap);
	if (_p)
	{	::soap_default___ns1__getVersion(soap, _p);
	}
	return _p;
}

inline struct __ns1__getVersion * soap_new_set___ns1__getVersion(
	struct soap *soap,
	ns1__getVersion *ns1__getVersion_)
{
	struct __ns1__getVersion *_p = ::soap_new___ns1__getVersion(soap);
	if (_p)
	{	::soap_default___ns1__getVersion(soap, _p);
		_p->ns1__getVersion_ = ns1__getVersion_;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__getVersion(struct soap*, const struct __ns1__getVersion *, const char*, const char*);

inline int soap_write___ns1__getVersion(struct soap *soap, struct __ns1__getVersion const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__getVersion(soap, p), 0) || ::soap_put___ns1__getVersion(soap, p, "-ns1:getVersion", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__getVersion(struct soap *soap, const char *URL, struct __ns1__getVersion const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__getVersion(soap, p), 0) || ::soap_put___ns1__getVersion(soap, p, "-ns1:getVersion", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns1__getVersion(struct soap *soap, const char *URL, struct __ns1__getVersion const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__getVersion(soap, p), 0) || ::soap_put___ns1__getVersion(soap, p, "-ns1:getVersion", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__getVersion(struct soap *soap, const char *URL, struct __ns1__getVersion const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__getVersion(soap, p), 0) || ::soap_put___ns1__getVersion(soap, p, "-ns1:getVersion", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__getVersion * SOAP_FMAC4 soap_get___ns1__getVersion(struct soap*, struct __ns1__getVersion *, const char*, const char*);

inline int soap_read___ns1__getVersion(struct soap *soap, struct __ns1__getVersion *p)
{
	if (p)
	{	::soap_default___ns1__getVersion(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__getVersion(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__getVersion(struct soap *soap, const char *URL, struct __ns1__getVersion *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__getVersion(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__getVersion(struct soap *soap, struct __ns1__getVersion *p)
{
	if (::soap_read___ns1__getVersion(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__processGetInfo_DEFINED
#define SOAP_TYPE___ns1__processGetInfo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__processGetInfo(struct soap*, struct __ns1__processGetInfo *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__processGetInfo(struct soap*, const struct __ns1__processGetInfo *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__processGetInfo(struct soap*, const char*, int, const struct __ns1__processGetInfo *, const char*);
SOAP_FMAC3 struct __ns1__processGetInfo * SOAP_FMAC4 soap_in___ns1__processGetInfo(struct soap*, const char*, struct __ns1__processGetInfo *, const char*);
SOAP_FMAC1 struct __ns1__processGetInfo * SOAP_FMAC2 soap_instantiate___ns1__processGetInfo(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__processGetInfo * soap_new___ns1__processGetInfo(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__processGetInfo(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__processGetInfo * soap_new_req___ns1__processGetInfo(
	struct soap *soap)
{
	struct __ns1__processGetInfo *_p = ::soap_new___ns1__processGetInfo(soap);
	if (_p)
	{	::soap_default___ns1__processGetInfo(soap, _p);
	}
	return _p;
}

inline struct __ns1__processGetInfo * soap_new_set___ns1__processGetInfo(
	struct soap *soap,
	ns1__processGetInfo *ns1__processGetInfo_)
{
	struct __ns1__processGetInfo *_p = ::soap_new___ns1__processGetInfo(soap);
	if (_p)
	{	::soap_default___ns1__processGetInfo(soap, _p);
		_p->ns1__processGetInfo_ = ns1__processGetInfo_;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__processGetInfo(struct soap*, const struct __ns1__processGetInfo *, const char*, const char*);

inline int soap_write___ns1__processGetInfo(struct soap *soap, struct __ns1__processGetInfo const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__processGetInfo(soap, p), 0) || ::soap_put___ns1__processGetInfo(soap, p, "-ns1:processGetInfo", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__processGetInfo(struct soap *soap, const char *URL, struct __ns1__processGetInfo const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__processGetInfo(soap, p), 0) || ::soap_put___ns1__processGetInfo(soap, p, "-ns1:processGetInfo", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns1__processGetInfo(struct soap *soap, const char *URL, struct __ns1__processGetInfo const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__processGetInfo(soap, p), 0) || ::soap_put___ns1__processGetInfo(soap, p, "-ns1:processGetInfo", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__processGetInfo(struct soap *soap, const char *URL, struct __ns1__processGetInfo const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__processGetInfo(soap, p), 0) || ::soap_put___ns1__processGetInfo(soap, p, "-ns1:processGetInfo", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__processGetInfo * SOAP_FMAC4 soap_get___ns1__processGetInfo(struct soap*, struct __ns1__processGetInfo *, const char*, const char*);

inline int soap_read___ns1__processGetInfo(struct soap *soap, struct __ns1__processGetInfo *p)
{
	if (p)
	{	::soap_default___ns1__processGetInfo(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__processGetInfo(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__processGetInfo(struct soap *soap, const char *URL, struct __ns1__processGetInfo *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__processGetInfo(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__processGetInfo(struct soap *soap, struct __ns1__processGetInfo *p)
{
	if (::soap_read___ns1__processGetInfo(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__process_DEFINED
#define SOAP_TYPE___ns1__process_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__process(struct soap*, struct __ns1__process *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__process(struct soap*, const struct __ns1__process *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__process(struct soap*, const char*, int, const struct __ns1__process *, const char*);
SOAP_FMAC3 struct __ns1__process * SOAP_FMAC4 soap_in___ns1__process(struct soap*, const char*, struct __ns1__process *, const char*);
SOAP_FMAC1 struct __ns1__process * SOAP_FMAC2 soap_instantiate___ns1__process(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__process * soap_new___ns1__process(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__process(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__process * soap_new_req___ns1__process(
	struct soap *soap)
{
	struct __ns1__process *_p = ::soap_new___ns1__process(soap);
	if (_p)
	{	::soap_default___ns1__process(soap, _p);
	}
	return _p;
}

inline struct __ns1__process * soap_new_set___ns1__process(
	struct soap *soap,
	ns1__process *ns1__process_)
{
	struct __ns1__process *_p = ::soap_new___ns1__process(soap);
	if (_p)
	{	::soap_default___ns1__process(soap, _p);
		_p->ns1__process_ = ns1__process_;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__process(struct soap*, const struct __ns1__process *, const char*, const char*);

inline int soap_write___ns1__process(struct soap *soap, struct __ns1__process const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__process(soap, p), 0) || ::soap_put___ns1__process(soap, p, "-ns1:process", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__process(struct soap *soap, const char *URL, struct __ns1__process const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__process(soap, p), 0) || ::soap_put___ns1__process(soap, p, "-ns1:process", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns1__process(struct soap *soap, const char *URL, struct __ns1__process const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__process(soap, p), 0) || ::soap_put___ns1__process(soap, p, "-ns1:process", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__process(struct soap *soap, const char *URL, struct __ns1__process const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__process(soap, p), 0) || ::soap_put___ns1__process(soap, p, "-ns1:process", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__process * SOAP_FMAC4 soap_get___ns1__process(struct soap*, struct __ns1__process *, const char*, const char*);

inline int soap_read___ns1__process(struct soap *soap, struct __ns1__process *p)
{
	if (p)
	{	::soap_default___ns1__process(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__process(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__process(struct soap *soap, const char *URL, struct __ns1__process *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__process(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__process(struct soap *soap, struct __ns1__process *p)
{
	if (::soap_read___ns1__process(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Detail_DEFINED
#define SOAP_TYPE_SOAP_ENV__Detail_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap*, const char*, int, const struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Detail * soap_new_SOAP_ENV__Detail(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Detail(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Detail * soap_new_req_SOAP_ENV__Detail(
	struct soap *soap,
	int __type,
	void *fault)
{
	struct SOAP_ENV__Detail *_p = ::soap_new_SOAP_ENV__Detail(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Detail(soap, _p);
		_p->__type = __type;
		_p->fault = fault;
	}
	return _p;
}

inline struct SOAP_ENV__Detail * soap_new_set_SOAP_ENV__Detail(
	struct soap *soap,
	ns1__duploFault *ns1__DuploFault,
	int __type,
	void *fault,
	char *__any)
{
	struct SOAP_ENV__Detail *_p = ::soap_new_SOAP_ENV__Detail(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Detail(soap, _p);
		_p->ns1__DuploFault = ns1__DuploFault;
		_p->__type = __type;
		_p->fault = fault;
		_p->__any = __any;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *, const char*, const char*);

inline int soap_write_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SOAP_ENV__Detail(soap, p), 0) || ::soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Detail(soap, p), 0) || ::soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Detail(soap, p), 0) || ::soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Detail(soap, p), 0) || ::soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *, const char*, const char*);

inline int soap_read_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p)
{
	if (p)
	{	::soap_default_SOAP_ENV__Detail(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SOAP_ENV__Detail(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SOAP_ENV__Detail(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p)
{
	if (::soap_read_SOAP_ENV__Detail(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Reason_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Reason_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap*, const char *, int, struct SOAP_ENV__Reason *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason **, const char*, const char*);
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Detail_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Detail_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap*, const char *, int, struct SOAP_ENV__Detail *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail **, const char*, const char*);
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Code_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Code_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap*, const char *, int, struct SOAP_ENV__Code *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code **, const char*, const char*);
#endif

#endif

#ifndef SOAP_TYPE_PointerTons1__getVersion_DEFINED
#define SOAP_TYPE_PointerTons1__getVersion_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__getVersion(struct soap*, ns1__getVersion *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__getVersion(struct soap*, const char *, int, ns1__getVersion *const*, const char *);
SOAP_FMAC3 ns1__getVersion ** SOAP_FMAC4 soap_in_PointerTons1__getVersion(struct soap*, const char*, ns1__getVersion **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__getVersion(struct soap*, ns1__getVersion *const*, const char*, const char*);
SOAP_FMAC3 ns1__getVersion ** SOAP_FMAC4 soap_get_PointerTons1__getVersion(struct soap*, ns1__getVersion **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__processGetInfo_DEFINED
#define SOAP_TYPE_PointerTons1__processGetInfo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__processGetInfo(struct soap*, ns1__processGetInfo *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__processGetInfo(struct soap*, const char *, int, ns1__processGetInfo *const*, const char *);
SOAP_FMAC3 ns1__processGetInfo ** SOAP_FMAC4 soap_in_PointerTons1__processGetInfo(struct soap*, const char*, ns1__processGetInfo **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__processGetInfo(struct soap*, ns1__processGetInfo *const*, const char*, const char*);
SOAP_FMAC3 ns1__processGetInfo ** SOAP_FMAC4 soap_get_PointerTons1__processGetInfo(struct soap*, ns1__processGetInfo **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__process_DEFINED
#define SOAP_TYPE_PointerTons1__process_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__process(struct soap*, ns1__process *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__process(struct soap*, const char *, int, ns1__process *const*, const char *);
SOAP_FMAC3 ns1__process ** SOAP_FMAC4 soap_in_PointerTons1__process(struct soap*, const char*, ns1__process **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__process(struct soap*, ns1__process *const*, const char*, const char*);
SOAP_FMAC3 ns1__process ** SOAP_FMAC4 soap_get_PointerTons1__process(struct soap*, ns1__process **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__duploFault_DEFINED
#define SOAP_TYPE_PointerTons1__duploFault_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__duploFault(struct soap*, ns1__duploFault *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__duploFault(struct soap*, const char *, int, ns1__duploFault *const*, const char *);
SOAP_FMAC3 ns1__duploFault ** SOAP_FMAC4 soap_in_PointerTons1__duploFault(struct soap*, const char*, ns1__duploFault **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__duploFault(struct soap*, ns1__duploFault *const*, const char*, const char*);
SOAP_FMAC3 ns1__duploFault ** SOAP_FMAC4 soap_get_PointerTons1__duploFault(struct soap*, ns1__duploFault **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__Version_DEFINED
#define SOAP_TYPE_PointerTons1__Version_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__Version(struct soap*, ns1__Version *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__Version(struct soap*, const char *, int, ns1__Version *const*, const char *);
SOAP_FMAC3 ns1__Version ** SOAP_FMAC4 soap_in_PointerTons1__Version(struct soap*, const char*, ns1__Version **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__Version(struct soap*, ns1__Version *const*, const char*, const char*);
SOAP_FMAC3 ns1__Version ** SOAP_FMAC4 soap_get_PointerTons1__Version(struct soap*, ns1__Version **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTodateTime_DEFINED
#define SOAP_TYPE_PointerTodateTime_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTodateTime(struct soap*, time_t *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTodateTime(struct soap*, const char *, int, time_t *const*, const char *);
SOAP_FMAC3 time_t ** SOAP_FMAC4 soap_in_PointerTodateTime(struct soap*, const char*, time_t **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTodateTime(struct soap*, time_t *const*, const char*, const char*);
SOAP_FMAC3 time_t ** SOAP_FMAC4 soap_get_PointerTodateTime(struct soap*, time_t **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToxsd__base64Binary_DEFINED
#define SOAP_TYPE_PointerToxsd__base64Binary_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxsd__base64Binary(struct soap*, xsd__base64Binary *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxsd__base64Binary(struct soap*, const char *, int, xsd__base64Binary *const*, const char *);
SOAP_FMAC3 xsd__base64Binary ** SOAP_FMAC4 soap_in_PointerToxsd__base64Binary(struct soap*, const char*, xsd__base64Binary **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxsd__base64Binary(struct soap*, xsd__base64Binary *const*, const char*, const char*);
SOAP_FMAC3 xsd__base64Binary ** SOAP_FMAC4 soap_get_PointerToxsd__base64Binary(struct soap*, xsd__base64Binary **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__photoExtra_DEFINED
#define SOAP_TYPE_PointerTons1__photoExtra_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__photoExtra(struct soap*, ns1__photoExtra *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__photoExtra(struct soap*, const char *, int, ns1__photoExtra *const*, const char *);
SOAP_FMAC3 ns1__photoExtra ** SOAP_FMAC4 soap_in_PointerTons1__photoExtra(struct soap*, const char*, ns1__photoExtra **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__photoExtra(struct soap*, ns1__photoExtra *const*, const char*, const char*);
SOAP_FMAC3 ns1__photoExtra ** SOAP_FMAC4 soap_get_PointerTons1__photoExtra(struct soap*, ns1__photoExtra **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__trCheckIn_DEFINED
#define SOAP_TYPE_PointerTons1__trCheckIn_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__trCheckIn(struct soap*, ns1__trCheckIn *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__trCheckIn(struct soap*, const char *, int, ns1__trCheckIn *const*, const char *);
SOAP_FMAC3 ns1__trCheckIn ** SOAP_FMAC4 soap_in_PointerTons1__trCheckIn(struct soap*, const char*, ns1__trCheckIn **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__trCheckIn(struct soap*, ns1__trCheckIn *const*, const char*, const char*);
SOAP_FMAC3 ns1__trCheckIn ** SOAP_FMAC4 soap_get_PointerTons1__trCheckIn(struct soap*, ns1__trCheckIn **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__message_DEFINED
#define SOAP_TYPE_PointerTons1__message_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__message(struct soap*, ns1__message *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__message(struct soap*, const char *, int, ns1__message *const*, const char *);
SOAP_FMAC3 ns1__message ** SOAP_FMAC4 soap_in_PointerTons1__message(struct soap*, const char*, ns1__message **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__message(struct soap*, ns1__message *const*, const char*, const char*);
SOAP_FMAC3 ns1__message ** SOAP_FMAC4 soap_get_PointerTons1__message(struct soap*, ns1__message **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToint_DEFINED
#define SOAP_TYPE_PointerToint_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToint(struct soap*, int *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToint(struct soap*, const char *, int, int *const*, const char *);
SOAP_FMAC3 int ** SOAP_FMAC4 soap_in_PointerToint(struct soap*, const char*, int **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToint(struct soap*, int *const*, const char*, const char*);
SOAP_FMAC3 int ** SOAP_FMAC4 soap_get_PointerToint(struct soap*, int **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToxsd__decimal_DEFINED
#define SOAP_TYPE_PointerToxsd__decimal_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxsd__decimal(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxsd__decimal(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerToxsd__decimal(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxsd__decimal(struct soap*, std::string *const*, const char*, const char*);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerToxsd__decimal(struct soap*, std::string **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__cameraInfo_DEFINED
#define SOAP_TYPE_PointerTons1__cameraInfo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__cameraInfo(struct soap*, ns1__cameraInfo *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__cameraInfo(struct soap*, const char *, int, ns1__cameraInfo *const*, const char *);
SOAP_FMAC3 ns1__cameraInfo ** SOAP_FMAC4 soap_in_PointerTons1__cameraInfo(struct soap*, const char*, ns1__cameraInfo **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__cameraInfo(struct soap*, ns1__cameraInfo *const*, const char*, const char*);
SOAP_FMAC3 ns1__cameraInfo ** SOAP_FMAC4 soap_get_PointerTons1__cameraInfo(struct soap*, ns1__cameraInfo **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTostd__string_DEFINED
#define SOAP_TYPE_PointerTostd__string_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostd__string(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostd__string(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTostd__string(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostd__string(struct soap*, std::string *const*, const char*, const char*);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTostd__string(struct soap*, std::string **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTounsignedByte_DEFINED
#define SOAP_TYPE_PointerTounsignedByte_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTounsignedByte(struct soap*, unsigned char *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTounsignedByte(struct soap*, const char *, int, unsigned char *const*, const char *);
SOAP_FMAC3 unsigned char ** SOAP_FMAC4 soap_in_PointerTounsignedByte(struct soap*, const char*, unsigned char **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTounsignedByte(struct soap*, unsigned char *const*, const char*, const char*);
SOAP_FMAC3 unsigned char ** SOAP_FMAC4 soap_get_PointerTounsignedByte(struct soap*, unsigned char **, const char*, const char*);
#endif

#ifndef SOAP_TYPE__QName_DEFINED
#define SOAP_TYPE__QName_DEFINED

inline void soap_default__QName(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__QName
	*a = SOAP_DEFAULT__QName;
#else
	*a = (char *)0;
#endif
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap*, char *const*);

#define soap__QName2s(soap, a) soap_QName2s(soap, (a))
SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap*, const char*, int, char*const*, const char*);

#define soap_s2_QName(soap, s, a) soap_s2QName((soap), (s), (char**)(a), 0, -1, NULL)
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap*, const char*, char **, const char*);

#define soap_instantiate__QName soap_instantiate_string


#define soap_new__QName soap_new_string

SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap*, char *const*, const char*, const char*);

inline int soap_write__QName(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__QName(soap, p, "QName", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__QName(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__QName(soap, p, "QName", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__QName(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__QName(soap, p, "QName", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__QName(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__QName(soap, p, "QName", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap*, char **, const char*, const char*);

inline int soap_read__QName(struct soap *soap, char **p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get__QName(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__QName(struct soap *soap, const char *URL, char **p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__QName(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__QName(struct soap *soap, char **p)
{
	if (::soap_read__QName(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__XML_DEFINED
#define SOAP_TYPE__XML_DEFINED
#endif

#ifndef SOAP_TYPE_string_DEFINED
#define SOAP_TYPE_string_DEFINED

inline void soap_default_string(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_string
	*a = SOAP_DEFAULT_string;
#else
	*a = (char *)0;
#endif
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap*, char *const*);

#define soap_string2s(soap, a) (a)
SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap*, const char*, int, char*const*, const char*);

#define soap_s2string(soap, s, a) soap_s2char((soap), (s), (char**)(a), 1, 0, -1, NULL)
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap*, const char*, char **, const char*);

SOAP_FMAC3 char * * SOAP_FMAC4 soap_new_string(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap*, char *const*, const char*, const char*);

inline int soap_write_string(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_string(soap, p, "string", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_string(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_string(soap, p, "string", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_string(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_string(soap, p, "string", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_string(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_string(soap, p, "string", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap*, char **, const char*, const char*);

inline int soap_read_string(struct soap *soap, char **p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_string(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_string(struct soap *soap, const char *URL, char **p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_string(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_string(struct soap *soap, char **p)
{
	if (::soap_read_string(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfint_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfint_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfint(struct soap*, std::vector<int> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfint(struct soap*, const std::vector<int> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfint(struct soap*, const char*, int, const std::vector<int> *, const char*);
SOAP_FMAC3 std::vector<int> * SOAP_FMAC4 soap_in_std__vectorTemplateOfint(struct soap*, const char*, std::vector<int> *, const char*);
SOAP_FMAC1 std::vector<int>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfint(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<int>  * soap_new_std__vectorTemplateOfint(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfint(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons1__photoExtra_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons1__photoExtra_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons1__photoExtra(struct soap*, std::vector<ns1__photoExtra *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons1__photoExtra(struct soap*, const std::vector<ns1__photoExtra *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons1__photoExtra(struct soap*, const char*, int, const std::vector<ns1__photoExtra *> *, const char*);
SOAP_FMAC3 std::vector<ns1__photoExtra *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons1__photoExtra(struct soap*, const char*, std::vector<ns1__photoExtra *> *, const char*);
SOAP_FMAC1 std::vector<ns1__photoExtra *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons1__photoExtra(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns1__photoExtra *>  * soap_new_std__vectorTemplateOfPointerTons1__photoExtra(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons1__photoExtra(soap, n, NULL, NULL, NULL);
}
#endif

#endif

/* End of soapH.h */
