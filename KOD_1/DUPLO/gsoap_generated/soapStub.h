/* soapStub.h
   Generated by gSOAP 2.8.74 for duplo.h

gSOAP XML Web services tools
Copyright (C) 2000-2018, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#include <vector>
#define SOAP_NAMESPACE_OF_ns1	"http://service/"

#ifndef soapStub_H
#define soapStub_H
#include "stdsoap2.h"
#if GSOAP_VERSION != 20874
# error "GSOAP VERSION 20874 MISMATCH IN GENERATED CODE VERSUS LIBRARY CODE: PLEASE REINSTALL PACKAGE"
#endif


/******************************************************************************\
 *                                                                            *
 * Types with Custom Serializers                                              *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Classes, Structs and Unions                                                *
 *                                                                            *
\******************************************************************************/

class xsd__base64Binary;	/* duplo.h:140 */
class ns1__processGetInfo;	/* duplo.h:158 */
class ns1__processGetInfoResponse;	/* duplo.h:161 */
class ns1__cameraInfo;	/* duplo.h:164 */
class ns1__duploFault;	/* duplo.h:167 */
class ns1__process;	/* duplo.h:170 */
class ns1__message;	/* duplo.h:173 */
class ns1__trCheckIn;	/* duplo.h:176 */
class ns1__photoExtra;	/* duplo.h:179 */
class ns1__processResponse;	/* duplo.h:182 */
class ns1__getVersion;	/* duplo.h:185 */
class ns1__getVersionResponse;	/* duplo.h:188 */
class ns1__Version;	/* duplo.h:191 */
struct __ns1__process;	/* duplo.h:699 */
struct __ns1__processGetInfo;	/* duplo.h:769 */
struct __ns1__getVersion;	/* duplo.h:839 */

/* duplo.h:140 */
#ifndef SOAP_TYPE_xsd__base64Binary
#define SOAP_TYPE_xsd__base64Binary (8)
/* binary data attached as MTOM/MIME/DIME attachment or included as *`xsd:base64Binary`* base64: */
class SOAP_CMAC xsd__base64Binary {
      public:
        unsigned char *__ptr;
        int __size;
        /// Optional element 'id' of XML schema type 'xsd:string'
        char *id;
        /// Optional element 'type' of XML schema type 'xsd:string'
        char *type;
        /// Optional element 'options' of XML schema type 'xsd:string'
        char *options;
      public:
        /// Return unique type id SOAP_TYPE_xsd__base64Binary
        virtual long soap_type(void) const { return SOAP_TYPE_xsd__base64Binary; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type xsd__base64Binary, default initialized and not managed by a soap context
        virtual xsd__base64Binary *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(xsd__base64Binary); }
      public:
        /// Constructor with initializations
        xsd__base64Binary() : __ptr(), __size(), id(), type(), options() { }
        virtual ~xsd__base64Binary() { }
        /// Friend allocator used by soap_new_xsd__base64Binary(struct soap*, int)
        friend SOAP_FMAC1 xsd__base64Binary * SOAP_FMAC2 soap_instantiate_xsd__base64Binary(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* duplo.h:158 */
#ifndef SOAP_TYPE_ns1__processGetInfo
#define SOAP_TYPE_ns1__processGetInfo (14)
/* complex XML schema type 'ns1:processGetInfo': */
class SOAP_CMAC ns1__processGetInfo {
      public:
        /// Optional element 'camera' of XML schema type 'xsd:string'
        std::string *camera;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_ns1__processGetInfo
        virtual long soap_type(void) const { return SOAP_TYPE_ns1__processGetInfo; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type ns1__processGetInfo, default initialized and not managed by a soap context
        virtual ns1__processGetInfo *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(ns1__processGetInfo); }
      public:
        /// Constructor with initializations
        ns1__processGetInfo() : camera(), soap() { }
        virtual ~ns1__processGetInfo() { }
        /// Friend allocator used by soap_new_ns1__processGetInfo(struct soap*, int)
        friend SOAP_FMAC1 ns1__processGetInfo * SOAP_FMAC2 soap_instantiate_ns1__processGetInfo(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* duplo.h:161 */
#ifndef SOAP_TYPE_ns1__processGetInfoResponse
#define SOAP_TYPE_ns1__processGetInfoResponse (15)
/* complex XML schema type 'ns1:processGetInfoResponse': */
class SOAP_CMAC ns1__processGetInfoResponse {
      public:
        /// Optional element 'return' of XML schema type 'ns1:cameraInfo'
        ns1__cameraInfo *return_;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_ns1__processGetInfoResponse
        virtual long soap_type(void) const { return SOAP_TYPE_ns1__processGetInfoResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type ns1__processGetInfoResponse, default initialized and not managed by a soap context
        virtual ns1__processGetInfoResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(ns1__processGetInfoResponse); }
      public:
        /// Constructor with initializations
        ns1__processGetInfoResponse() : return_(), soap() { }
        virtual ~ns1__processGetInfoResponse() { }
        /// Friend allocator used by soap_new_ns1__processGetInfoResponse(struct soap*, int)
        friend SOAP_FMAC1 ns1__processGetInfoResponse * SOAP_FMAC2 soap_instantiate_ns1__processGetInfoResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* duplo.h:164 */
#ifndef SOAP_TYPE_ns1__cameraInfo
#define SOAP_TYPE_ns1__cameraInfo (16)
/* complex XML schema type 'ns1:cameraInfo': */
class SOAP_CMAC ns1__cameraInfo {
      public:
        /// Optional element 'azimut' of XML schema type 'xsd:decimal'
        std::string *azimut;
        /// Optional element 'camera' of XML schema type 'xsd:string'
        std::string *camera;
        /// Optional element 'camera_id' of XML schema type 'xsd:int'
        int *camera_USCOREid;
        /// Optional element 'camera_model' of XML schema type 'xsd:string'
        std::string *camera_USCOREmodel;
        /// Optional element 'camera_place' of XML schema type 'xsd:string'
        std::string *camera_USCOREplace;
        /// Optional element 'gps_x' of XML schema type 'xsd:decimal'
        std::string *gps_USCOREx;
        /// Optional element 'gps_y' of XML schema type 'xsd:decimal'
        std::string *gps_USCOREy;
        /// Optional element 'lane_num' of XML schema type 'xsd:int'
        int *lane_USCOREnum;
        /// Optional element 'p_node' of XML schema type 'xsd:int'
        int *p_USCOREnode;
        /// Optional element 'print_name' of XML schema type 'xsd:string'
        std::string *print_USCOREname;
        /// Optional element 'priz_arh' of XML schema type 'xsd:string'
        std::string *priz_USCOREarh;
        /// Optional element 'serial_no' of XML schema type 'xsd:string'
        std::string *serial_USCOREno;
        /// Optional element 'type' of XML schema type 'xsd:string'
        std::string *type;
        /// Optional element 'v_class' of XML schema type 'xsd:string'
        std::string *v_USCOREclass;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_ns1__cameraInfo
        virtual long soap_type(void) const { return SOAP_TYPE_ns1__cameraInfo; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type ns1__cameraInfo, default initialized and not managed by a soap context
        virtual ns1__cameraInfo *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(ns1__cameraInfo); }
      public:
        /// Constructor with initializations
        ns1__cameraInfo() : azimut(), camera(), camera_USCOREid(), camera_USCOREmodel(), camera_USCOREplace(), gps_USCOREx(), gps_USCOREy(), lane_USCOREnum(), p_USCOREnode(), print_USCOREname(), priz_USCOREarh(), serial_USCOREno(), type(), v_USCOREclass(), soap() { }
        virtual ~ns1__cameraInfo() { }
        /// Friend allocator used by soap_new_ns1__cameraInfo(struct soap*, int)
        friend SOAP_FMAC1 ns1__cameraInfo * SOAP_FMAC2 soap_instantiate_ns1__cameraInfo(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* duplo.h:167 */
#ifndef SOAP_TYPE_ns1__duploFault
#define SOAP_TYPE_ns1__duploFault (17)
/* complex XML schema type 'ns1:duploFault': */
class SOAP_CMAC ns1__duploFault {
      public:
        /// Optional element 'faultCode' of XML schema type 'xsd:string'
        std::string *faultCode;
        /// Optional element 'faultMessage' of XML schema type 'xsd:string'
        std::string *faultMessage;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_ns1__duploFault
        virtual long soap_type(void) const { return SOAP_TYPE_ns1__duploFault; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type ns1__duploFault, default initialized and not managed by a soap context
        virtual ns1__duploFault *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(ns1__duploFault); }
      public:
        /// Constructor with initializations
        ns1__duploFault() : faultCode(), faultMessage(), soap() { }
        virtual ~ns1__duploFault() { }
        /// Friend allocator used by soap_new_ns1__duploFault(struct soap*, int)
        friend SOAP_FMAC1 ns1__duploFault * SOAP_FMAC2 soap_instantiate_ns1__duploFault(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* duplo.h:170 */
#ifndef SOAP_TYPE_ns1__process
#define SOAP_TYPE_ns1__process (18)
/* complex XML schema type 'ns1:process': */
class SOAP_CMAC ns1__process {
      public:
        /// Optional element 'message' of XML schema type 'ns1:message'
        ns1__message *message;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_ns1__process
        virtual long soap_type(void) const { return SOAP_TYPE_ns1__process; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type ns1__process, default initialized and not managed by a soap context
        virtual ns1__process *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(ns1__process); }
      public:
        /// Constructor with initializations
        ns1__process() : message(), soap() { }
        virtual ~ns1__process() { }
        /// Friend allocator used by soap_new_ns1__process(struct soap*, int)
        friend SOAP_FMAC1 ns1__process * SOAP_FMAC2 soap_instantiate_ns1__process(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* duplo.h:173 */
#ifndef SOAP_TYPE_ns1__message
#define SOAP_TYPE_ns1__message (19)
/* complex XML schema type 'ns1:message': */
class SOAP_CMAC ns1__message {
      public:
        /// Required element 'tr_checkIn' of XML schema type 'ns1:trCheckIn'
        ns1__trCheckIn *tr_USCOREcheckIn;
        /// Optional element 'photo_extra' of XML schema type 'ns1:photoExtra'
        std::vector<ns1__photoExtra *> photo_USCOREextra;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_ns1__message
        virtual long soap_type(void) const { return SOAP_TYPE_ns1__message; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type ns1__message, default initialized and not managed by a soap context
        virtual ns1__message *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(ns1__message); }
      public:
        /// Constructor with initializations
        ns1__message() : tr_USCOREcheckIn(), photo_USCOREextra(), soap() { }
        virtual ~ns1__message() { }
        /// Friend allocator used by soap_new_ns1__message(struct soap*, int)
        friend SOAP_FMAC1 ns1__message * SOAP_FMAC2 soap_instantiate_ns1__message(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* duplo.h:176 */
#ifndef SOAP_TYPE_ns1__trCheckIn
#define SOAP_TYPE_ns1__trCheckIn (20)
/* complex XML schema type 'ns1:trCheckIn': */
class SOAP_CMAC ns1__trCheckIn {
      public:
        /// Required element 'v_time_check' of XML schema type 'xsd:dateTime'
        time_t v_USCOREtime_USCOREcheck;
        /// Required element 'v_camera' of XML schema type 'xsd:string'
        std::string v_USCOREcamera;
        /// Optional element 'v_gps_x' of XML schema type 'xsd:decimal'
        std::string *v_USCOREgps_USCOREx;
        /// Optional element 'v_gps_y' of XML schema type 'xsd:decimal'
        std::string *v_USCOREgps_USCOREy;
        /// Optional element 'v_azimut' of XML schema type 'xsd:decimal'
        std::string *v_USCOREazimut;
        /// Optional element 'v_direction' of XML schema type 'xsd:string'
        std::string *v_USCOREdirection;
        /// Optional element 'v_speed_limit' of XML schema type 'xsd:int'
        int *v_USCOREspeed_USCORElimit;
        /// Optional element 'v_speed' of XML schema type 'xsd:decimal'
        std::string *v_USCOREspeed;
        /// Optional element 'v_regno_country_id' of XML schema type 'xsd:string'
        std::string *v_USCOREregno_USCOREcountry_USCOREid;
        /// Optional element 'v_regno_color_id' of XML schema type 'xsd:int'
        int *v_USCOREregno_USCOREcolor_USCOREid;
        /// Optional element 'v_recognition_accuracy' of XML schema type 'xsd:decimal'
        std::string *v_USCORErecognition_USCOREaccuracy;
        /// Optional element 'v_regno' of XML schema type 'xsd:string'
        std::string *v_USCOREregno;
        /// Optional element 'v_pr_viol' of XML schema type 'xsd:int'
        std::vector<int> v_USCOREpr_USCOREviol;
        /// Optional element 'v_parking_num' of XML schema type 'xsd:int'
        int *v_USCOREparking_USCOREnum;
        /// Optional element 'v_parking_zone' of XML schema type 'xsd:int'
        int *v_USCOREparking_USCOREzone;
        /// Optional element 'v_lane_num' of XML schema type 'xsd:int'
        int *v_USCORElane_USCOREnum;
        /// Optional element 'v_camera_place' of XML schema type 'xsd:string'
        std::string *v_USCOREcamera_USCOREplace;
        /// Optional element 'v_photo_grz' of XML schema type 'xsd:base64Binary'
        xsd__base64Binary *v_USCOREphoto_USCOREgrz;
        /// Optional element 'v_photo_ts' of XML schema type 'xsd:base64Binary'
        xsd__base64Binary *v_USCOREphoto_USCOREts;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_ns1__trCheckIn
        virtual long soap_type(void) const { return SOAP_TYPE_ns1__trCheckIn; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type ns1__trCheckIn, default initialized and not managed by a soap context
        virtual ns1__trCheckIn *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(ns1__trCheckIn); }
      public:
        /// Constructor with initializations
        ns1__trCheckIn() : v_USCOREtime_USCOREcheck(), v_USCOREcamera(), v_USCOREgps_USCOREx(), v_USCOREgps_USCOREy(), v_USCOREazimut(), v_USCOREdirection(), v_USCOREspeed_USCORElimit(), v_USCOREspeed(), v_USCOREregno_USCOREcountry_USCOREid(), v_USCOREregno_USCOREcolor_USCOREid(), v_USCORErecognition_USCOREaccuracy(), v_USCOREregno(), v_USCOREpr_USCOREviol(), v_USCOREparking_USCOREnum(), v_USCOREparking_USCOREzone(), v_USCORElane_USCOREnum(), v_USCOREcamera_USCOREplace(), v_USCOREphoto_USCOREgrz(), v_USCOREphoto_USCOREts(), soap() { }
        virtual ~ns1__trCheckIn() { }
        /// Friend allocator used by soap_new_ns1__trCheckIn(struct soap*, int)
        friend SOAP_FMAC1 ns1__trCheckIn * SOAP_FMAC2 soap_instantiate_ns1__trCheckIn(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* duplo.h:179 */
#ifndef SOAP_TYPE_ns1__photoExtra
#define SOAP_TYPE_ns1__photoExtra (21)
/* complex XML schema type 'ns1:photoExtra': */
class SOAP_CMAC ns1__photoExtra {
      public:
        /// Optional element 'v_frame_datetime' of XML schema type 'xsd:dateTime'
        time_t *v_USCOREframe_USCOREdatetime;
        /// Optional element 'v_photo_extra' of XML schema type 'xsd:base64Binary'
        xsd__base64Binary *v_USCOREphoto_USCOREextra;
        /// Optional element 'v_type_photo' of XML schema type 'xsd:string'
        std::string *v_USCOREtype_USCOREphoto;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_ns1__photoExtra
        virtual long soap_type(void) const { return SOAP_TYPE_ns1__photoExtra; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type ns1__photoExtra, default initialized and not managed by a soap context
        virtual ns1__photoExtra *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(ns1__photoExtra); }
      public:
        /// Constructor with initializations
        ns1__photoExtra() : v_USCOREframe_USCOREdatetime(), v_USCOREphoto_USCOREextra(), v_USCOREtype_USCOREphoto(), soap() { }
        virtual ~ns1__photoExtra() { }
        /// Friend allocator used by soap_new_ns1__photoExtra(struct soap*, int)
        friend SOAP_FMAC1 ns1__photoExtra * SOAP_FMAC2 soap_instantiate_ns1__photoExtra(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* duplo.h:182 */
#ifndef SOAP_TYPE_ns1__processResponse
#define SOAP_TYPE_ns1__processResponse (22)
/* complex XML schema type 'ns1:processResponse': */
class SOAP_CMAC ns1__processResponse {
      public:
        /// Required element 'return' of XML schema type 'xsd:boolean'
        bool return_;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_ns1__processResponse
        virtual long soap_type(void) const { return SOAP_TYPE_ns1__processResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type ns1__processResponse, default initialized and not managed by a soap context
        virtual ns1__processResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(ns1__processResponse); }
      public:
        /// Constructor with initializations
        ns1__processResponse() : return_(), soap() { }
        virtual ~ns1__processResponse() { }
        /// Friend allocator used by soap_new_ns1__processResponse(struct soap*, int)
        friend SOAP_FMAC1 ns1__processResponse * SOAP_FMAC2 soap_instantiate_ns1__processResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* duplo.h:185 */
#ifndef SOAP_TYPE_ns1__getVersion
#define SOAP_TYPE_ns1__getVersion (23)
/* complex XML schema type 'ns1:getVersion': */
class SOAP_CMAC ns1__getVersion {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_ns1__getVersion
        virtual long soap_type(void) const { return SOAP_TYPE_ns1__getVersion; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type ns1__getVersion, default initialized and not managed by a soap context
        virtual ns1__getVersion *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(ns1__getVersion); }
      public:
        /// Constructor with initializations
        ns1__getVersion() : soap() { }
        virtual ~ns1__getVersion() { }
        /// Friend allocator used by soap_new_ns1__getVersion(struct soap*, int)
        friend SOAP_FMAC1 ns1__getVersion * SOAP_FMAC2 soap_instantiate_ns1__getVersion(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* duplo.h:188 */
#ifndef SOAP_TYPE_ns1__getVersionResponse
#define SOAP_TYPE_ns1__getVersionResponse (24)
/* complex XML schema type 'ns1:getVersionResponse': */
class SOAP_CMAC ns1__getVersionResponse {
      public:
        /// Optional element 'return' of XML schema type 'ns1:Version'
        ns1__Version *return_;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_ns1__getVersionResponse
        virtual long soap_type(void) const { return SOAP_TYPE_ns1__getVersionResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type ns1__getVersionResponse, default initialized and not managed by a soap context
        virtual ns1__getVersionResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(ns1__getVersionResponse); }
      public:
        /// Constructor with initializations
        ns1__getVersionResponse() : return_(), soap() { }
        virtual ~ns1__getVersionResponse() { }
        /// Friend allocator used by soap_new_ns1__getVersionResponse(struct soap*, int)
        friend SOAP_FMAC1 ns1__getVersionResponse * SOAP_FMAC2 soap_instantiate_ns1__getVersionResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* duplo.h:191 */
#ifndef SOAP_TYPE_ns1__Version
#define SOAP_TYPE_ns1__Version (25)
/* complex XML schema type 'ns1:Version': */
class SOAP_CMAC ns1__Version {
      public:
        /// Optional element 'buildVer' of XML schema type 'xsd:string'
        std::string *buildVer;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_ns1__Version
        virtual long soap_type(void) const { return SOAP_TYPE_ns1__Version; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type ns1__Version, default initialized and not managed by a soap context
        virtual ns1__Version *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(ns1__Version); }
      public:
        /// Constructor with initializations
        ns1__Version() : buildVer(), soap() { }
        virtual ~ns1__Version() { }
        /// Friend allocator used by soap_new_ns1__Version(struct soap*, int)
        friend SOAP_FMAC1 ns1__Version * SOAP_FMAC2 soap_instantiate_ns1__Version(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* duplo.h:613 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (41)
/* SOAP_ENV__Detail: */
struct SOAP_CMAC SOAP_ENV__Detail {
      public:
        /** Optional element 'ns1:DuploFault' of XML schema type 'ns1:duploFault' */
        ns1__duploFault *ns1__DuploFault;
        /** Any type of element 'fault' assigned to fault with its SOAP_TYPE_T assigned to __type */
        /** Do not create a cyclic data structure throught this member unless SOAP encoding or SOAP_XML_GRAPH are used for id-ref serialization */
        int __type;
        void *fault;
        char *__any;
      public:
        /** Return unique type id SOAP_TYPE_SOAP_ENV__Detail */
        long soap_type() const { return SOAP_TYPE_SOAP_ENV__Detail; }
        /** Constructor with member initializations */
        SOAP_ENV__Detail() : ns1__DuploFault(), __type(), fault(), __any() { }
        /** Friend allocator */
        friend SOAP_FMAC1 SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/* duplo.h:699 */
#ifndef SOAP_TYPE___ns1__process
#define SOAP_TYPE___ns1__process (48)
/* Wrapper: */
struct SOAP_CMAC __ns1__process {
      public:
        /** Optional element 'ns1:process' of XML schema type 'ns1:process' */
        ns1__process *ns1__process_;
      public:
        /** Return unique type id SOAP_TYPE___ns1__process */
        long soap_type() const { return SOAP_TYPE___ns1__process; }
        /** Constructor with member initializations */
        __ns1__process() : ns1__process_() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__process * SOAP_FMAC2 soap_instantiate___ns1__process(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* duplo.h:769 */
#ifndef SOAP_TYPE___ns1__processGetInfo
#define SOAP_TYPE___ns1__processGetInfo (52)
/* Wrapper: */
struct SOAP_CMAC __ns1__processGetInfo {
      public:
        /** Optional element 'ns1:processGetInfo' of XML schema type 'ns1:processGetInfo' */
        ns1__processGetInfo *ns1__processGetInfo_;
      public:
        /** Return unique type id SOAP_TYPE___ns1__processGetInfo */
        long soap_type() const { return SOAP_TYPE___ns1__processGetInfo; }
        /** Constructor with member initializations */
        __ns1__processGetInfo() : ns1__processGetInfo_() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__processGetInfo * SOAP_FMAC2 soap_instantiate___ns1__processGetInfo(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* duplo.h:839 */
#ifndef SOAP_TYPE___ns1__getVersion
#define SOAP_TYPE___ns1__getVersion (56)
/* Wrapper: */
struct SOAP_CMAC __ns1__getVersion {
      public:
        /** Optional element 'ns1:getVersion' of XML schema type 'ns1:getVersion' */
        ns1__getVersion *ns1__getVersion_;
      public:
        /** Return unique type id SOAP_TYPE___ns1__getVersion */
        long soap_type() const { return SOAP_TYPE___ns1__getVersion; }
        /** Constructor with member initializations */
        __ns1__getVersion() : ns1__getVersion_() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__getVersion * SOAP_FMAC2 soap_instantiate___ns1__getVersion(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* duplo.h:914 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (57)
/* SOAP_ENV__Header: */
struct SOAP_CMAC SOAP_ENV__Header {
      public:
        /** Return unique type id SOAP_TYPE_SOAP_ENV__Header */
        long soap_type() const { return SOAP_TYPE_SOAP_ENV__Header; }
        /** Constructor with member initializations */
        SOAP_ENV__Header() { }
        /** Friend allocator */
        friend SOAP_FMAC1 SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/* duplo.h:914 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (58)
/* Type SOAP_ENV__Code is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* SOAP_ENV__Code: */
struct SOAP_CMAC SOAP_ENV__Code {
      public:
        /** Optional element 'SOAP-ENV:Value' of XML schema type 'xsd:QName' */
        char *SOAP_ENV__Value;
        /** Optional element 'SOAP-ENV:Subcode' of XML schema type 'SOAP-ENV:Code' */
        struct SOAP_ENV__Code *SOAP_ENV__Subcode;
      public:
        /** Return unique type id SOAP_TYPE_SOAP_ENV__Code */
        long soap_type() const { return SOAP_TYPE_SOAP_ENV__Code; }
        /** Constructor with member initializations */
        SOAP_ENV__Code() : SOAP_ENV__Value(), SOAP_ENV__Subcode() { }
        /** Friend allocator */
        friend SOAP_FMAC1 SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/* duplo.h:914 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (60)
/* SOAP_ENV__Reason: */
struct SOAP_CMAC SOAP_ENV__Reason {
      public:
        /** Optional element 'SOAP-ENV:Text' of XML schema type 'xsd:string' */
        char *SOAP_ENV__Text;
      public:
        /** Return unique type id SOAP_TYPE_SOAP_ENV__Reason */
        long soap_type() const { return SOAP_TYPE_SOAP_ENV__Reason; }
        /** Constructor with member initializations */
        SOAP_ENV__Reason() : SOAP_ENV__Text() { }
        /** Friend allocator */
        friend SOAP_FMAC1 SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/* duplo.h:914 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (61)
/* SOAP_ENV__Fault: */
struct SOAP_CMAC SOAP_ENV__Fault {
      public:
        /** Optional element 'faultcode' of XML schema type 'xsd:QName' */
        char *faultcode;
        /** Optional element 'faultstring' of XML schema type 'xsd:string' */
        char *faultstring;
        /** Optional element 'faultactor' of XML schema type 'xsd:string' */
        char *faultactor;
        /** Optional element 'detail' of XML schema type 'SOAP-ENV:Detail' */
        struct SOAP_ENV__Detail *detail;
        /** Optional element 'SOAP-ENV:Code' of XML schema type 'SOAP-ENV:Code' */
        struct SOAP_ENV__Code *SOAP_ENV__Code;
        /** Optional element 'SOAP-ENV:Reason' of XML schema type 'SOAP-ENV:Reason' */
        struct SOAP_ENV__Reason *SOAP_ENV__Reason;
        /** Optional element 'SOAP-ENV:Node' of XML schema type 'xsd:string' */
        char *SOAP_ENV__Node;
        /** Optional element 'SOAP-ENV:Role' of XML schema type 'xsd:string' */
        char *SOAP_ENV__Role;
        /** Optional element 'SOAP-ENV:Detail' of XML schema type 'SOAP-ENV:Detail' */
        struct SOAP_ENV__Detail *SOAP_ENV__Detail;
      public:
        /** Return unique type id SOAP_TYPE_SOAP_ENV__Fault */
        long soap_type() const { return SOAP_TYPE_SOAP_ENV__Fault; }
        /** Constructor with member initializations */
        SOAP_ENV__Fault() : faultcode(), faultstring(), faultactor(), detail(), SOAP_ENV__Code(), SOAP_ENV__Reason(), SOAP_ENV__Node(), SOAP_ENV__Role(), SOAP_ENV__Detail() { }
        /** Friend allocator */
        friend SOAP_FMAC1 SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/******************************************************************************\
 *                                                                            *
 * Typedefs                                                                   *
 *                                                                            *
\******************************************************************************/


/* (built-in):0 */
#ifndef SOAP_TYPE__XML
#define SOAP_TYPE__XML (5)
typedef char *_XML;
#endif

/* (built-in):0 */
#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (6)
typedef char *_QName;
#endif

/* duplo.h:147 */
#ifndef SOAP_TYPE_xsd__decimal
#define SOAP_TYPE_xsd__decimal (13)
typedef std::string xsd__decimal;
#endif

/******************************************************************************\
 *                                                                            *
 * Serializable Types                                                         *
 *                                                                            *
\******************************************************************************/


/* char has binding name 'byte' for type 'xsd:byte' */
#ifndef SOAP_TYPE_byte
#define SOAP_TYPE_byte (3)
#endif

/* int has binding name 'int' for type 'xsd:int' */
#ifndef SOAP_TYPE_int
#define SOAP_TYPE_int (1)
#endif

/* unsigned char has binding name 'unsignedByte' for type 'xsd:unsignedByte' */
#ifndef SOAP_TYPE_unsignedByte
#define SOAP_TYPE_unsignedByte (10)
#endif

/* unsigned int has binding name 'unsignedInt' for type 'xsd:unsignedInt' */
#ifndef SOAP_TYPE_unsignedInt
#define SOAP_TYPE_unsignedInt (9)
#endif

/* time_t has binding name 'dateTime' for type 'xsd:dateTime' */
#ifndef SOAP_TYPE_dateTime
#define SOAP_TYPE_dateTime (35)
#endif

/* bool has binding name 'bool' for type 'xsd:boolean' */
#ifndef SOAP_TYPE_bool
#define SOAP_TYPE_bool (39)
#endif

/* ns1__Version has binding name 'ns1__Version' for type 'ns1:Version' */
#ifndef SOAP_TYPE_ns1__Version
#define SOAP_TYPE_ns1__Version (25)
#endif

/* ns1__getVersionResponse has binding name 'ns1__getVersionResponse' for type 'ns1:getVersionResponse' */
#ifndef SOAP_TYPE_ns1__getVersionResponse
#define SOAP_TYPE_ns1__getVersionResponse (24)
#endif

/* ns1__getVersion has binding name 'ns1__getVersion' for type 'ns1:getVersion' */
#ifndef SOAP_TYPE_ns1__getVersion
#define SOAP_TYPE_ns1__getVersion (23)
#endif

/* ns1__processResponse has binding name 'ns1__processResponse' for type 'ns1:processResponse' */
#ifndef SOAP_TYPE_ns1__processResponse
#define SOAP_TYPE_ns1__processResponse (22)
#endif

/* ns1__photoExtra has binding name 'ns1__photoExtra' for type 'ns1:photoExtra' */
#ifndef SOAP_TYPE_ns1__photoExtra
#define SOAP_TYPE_ns1__photoExtra (21)
#endif

/* ns1__trCheckIn has binding name 'ns1__trCheckIn' for type 'ns1:trCheckIn' */
#ifndef SOAP_TYPE_ns1__trCheckIn
#define SOAP_TYPE_ns1__trCheckIn (20)
#endif

/* ns1__message has binding name 'ns1__message' for type 'ns1:message' */
#ifndef SOAP_TYPE_ns1__message
#define SOAP_TYPE_ns1__message (19)
#endif

/* ns1__process has binding name 'ns1__process' for type 'ns1:process' */
#ifndef SOAP_TYPE_ns1__process
#define SOAP_TYPE_ns1__process (18)
#endif

/* ns1__duploFault has binding name 'ns1__duploFault' for type 'ns1:duploFault' */
#ifndef SOAP_TYPE_ns1__duploFault
#define SOAP_TYPE_ns1__duploFault (17)
#endif

/* ns1__cameraInfo has binding name 'ns1__cameraInfo' for type 'ns1:cameraInfo' */
#ifndef SOAP_TYPE_ns1__cameraInfo
#define SOAP_TYPE_ns1__cameraInfo (16)
#endif

/* ns1__processGetInfoResponse has binding name 'ns1__processGetInfoResponse' for type 'ns1:processGetInfoResponse' */
#ifndef SOAP_TYPE_ns1__processGetInfoResponse
#define SOAP_TYPE_ns1__processGetInfoResponse (15)
#endif

/* ns1__processGetInfo has binding name 'ns1__processGetInfo' for type 'ns1:processGetInfo' */
#ifndef SOAP_TYPE_ns1__processGetInfo
#define SOAP_TYPE_ns1__processGetInfo (14)
#endif

/* xsd__decimal has binding name 'xsd__decimal' for type 'xsd:decimal' */
#ifndef SOAP_TYPE_xsd__decimal
#define SOAP_TYPE_xsd__decimal (13)
#endif

/* std::string has binding name 'std__string' for type 'xsd:string' */
#ifndef SOAP_TYPE_std__string
#define SOAP_TYPE_std__string (12)
#endif

/* xsd__base64Binary has binding name 'xsd__base64Binary' for type 'xsd:base64Binary' */
#ifndef SOAP_TYPE_xsd__base64Binary
#define SOAP_TYPE_xsd__base64Binary (8)
#endif

/* struct SOAP_ENV__Fault has binding name 'SOAP_ENV__Fault' for type '' */
#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (61)
#endif

/* struct SOAP_ENV__Reason has binding name 'SOAP_ENV__Reason' for type '' */
#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (60)
#endif

/* struct SOAP_ENV__Code has binding name 'SOAP_ENV__Code' for type '' */
#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (58)
#endif

/* struct SOAP_ENV__Header has binding name 'SOAP_ENV__Header' for type '' */
#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (57)
#endif

/* struct SOAP_ENV__Detail has binding name 'SOAP_ENV__Detail' for type '' */
#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (41)
#endif

/* struct SOAP_ENV__Reason * has binding name 'PointerToSOAP_ENV__Reason' for type '' */
#ifndef SOAP_TYPE_PointerToSOAP_ENV__Reason
#define SOAP_TYPE_PointerToSOAP_ENV__Reason (63)
#endif

/* struct SOAP_ENV__Detail * has binding name 'PointerToSOAP_ENV__Detail' for type '' */
#ifndef SOAP_TYPE_PointerToSOAP_ENV__Detail
#define SOAP_TYPE_PointerToSOAP_ENV__Detail (62)
#endif

/* struct SOAP_ENV__Code * has binding name 'PointerToSOAP_ENV__Code' for type '' */
#ifndef SOAP_TYPE_PointerToSOAP_ENV__Code
#define SOAP_TYPE_PointerToSOAP_ENV__Code (59)
#endif

/* ns1__getVersion * has binding name 'PointerTons1__getVersion' for type 'ns1:getVersion' */
#ifndef SOAP_TYPE_PointerTons1__getVersion
#define SOAP_TYPE_PointerTons1__getVersion (53)
#endif

/* ns1__processGetInfo * has binding name 'PointerTons1__processGetInfo' for type 'ns1:processGetInfo' */
#ifndef SOAP_TYPE_PointerTons1__processGetInfo
#define SOAP_TYPE_PointerTons1__processGetInfo (49)
#endif

/* ns1__process * has binding name 'PointerTons1__process' for type 'ns1:process' */
#ifndef SOAP_TYPE_PointerTons1__process
#define SOAP_TYPE_PointerTons1__process (45)
#endif

/* ns1__duploFault * has binding name 'PointerTons1__duploFault' for type 'ns1:duploFault' */
#ifndef SOAP_TYPE_PointerTons1__duploFault
#define SOAP_TYPE_PointerTons1__duploFault (42)
#endif

/* ns1__Version * has binding name 'PointerTons1__Version' for type 'ns1:Version' */
#ifndef SOAP_TYPE_PointerTons1__Version
#define SOAP_TYPE_PointerTons1__Version (40)
#endif

/* time_t * has binding name 'PointerTodateTime' for type 'xsd:dateTime' */
#ifndef SOAP_TYPE_PointerTodateTime
#define SOAP_TYPE_PointerTodateTime (38)
#endif

/* xsd__base64Binary * has binding name 'PointerToxsd__base64Binary' for type 'xsd:base64Binary' */
#ifndef SOAP_TYPE_PointerToxsd__base64Binary
#define SOAP_TYPE_PointerToxsd__base64Binary (37)
#endif

/* ns1__photoExtra * has binding name 'PointerTons1__photoExtra' for type 'ns1:photoExtra' */
#ifndef SOAP_TYPE_PointerTons1__photoExtra
#define SOAP_TYPE_PointerTons1__photoExtra (33)
#endif

/* ns1__trCheckIn * has binding name 'PointerTons1__trCheckIn' for type 'ns1:trCheckIn' */
#ifndef SOAP_TYPE_PointerTons1__trCheckIn
#define SOAP_TYPE_PointerTons1__trCheckIn (32)
#endif

/* ns1__message * has binding name 'PointerTons1__message' for type 'ns1:message' */
#ifndef SOAP_TYPE_PointerTons1__message
#define SOAP_TYPE_PointerTons1__message (31)
#endif

/* int * has binding name 'PointerToint' for type 'xsd:int' */
#ifndef SOAP_TYPE_PointerToint
#define SOAP_TYPE_PointerToint (30)
#endif

/* std::string * has binding name 'PointerToxsd__decimal' for type 'xsd:decimal' */
#ifndef SOAP_TYPE_PointerToxsd__decimal
#define SOAP_TYPE_PointerToxsd__decimal (29)
#endif

/* ns1__cameraInfo * has binding name 'PointerTons1__cameraInfo' for type 'ns1:cameraInfo' */
#ifndef SOAP_TYPE_PointerTons1__cameraInfo
#define SOAP_TYPE_PointerTons1__cameraInfo (28)
#endif

/* std::string * has binding name 'PointerTostd__string' for type 'xsd:string' */
#ifndef SOAP_TYPE_PointerTostd__string
#define SOAP_TYPE_PointerTostd__string (26)
#endif

/* unsigned char * has binding name 'PointerTounsignedByte' for type 'xsd:unsignedByte' */
#ifndef SOAP_TYPE_PointerTounsignedByte
#define SOAP_TYPE_PointerTounsignedByte (11)
#endif

/* _QName has binding name '_QName' for type 'xsd:QName' */
#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (6)
#endif

/* _XML has binding name '_XML' for type '' */
#ifndef SOAP_TYPE__XML
#define SOAP_TYPE__XML (5)
#endif

/* char * has binding name 'string' for type 'xsd:string' */
#ifndef SOAP_TYPE_string
#define SOAP_TYPE_string (4)
#endif

/* std::vector<int>  has binding name 'std__vectorTemplateOfint' for type 'xsd:int' */
#ifndef SOAP_TYPE_std__vectorTemplateOfint
#define SOAP_TYPE_std__vectorTemplateOfint (36)
#endif

/* std::vector<ns1__photoExtra *>  has binding name 'std__vectorTemplateOfPointerTons1__photoExtra' for type 'ns1:photoExtra' */
#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons1__photoExtra
#define SOAP_TYPE_std__vectorTemplateOfPointerTons1__photoExtra (34)
#endif

/******************************************************************************\
 *                                                                            *
 * Externals                                                                  *
 *                                                                            *
\******************************************************************************/


#endif

/* End of soapStub.h */
