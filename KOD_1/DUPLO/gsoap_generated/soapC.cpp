/* soapC.cpp
   Generated by gSOAP 2.8.74 for duplo.h

gSOAP XML Web services tools
Copyright (C) 2000-2018, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#if defined(__BORLANDC__)
#pragma option push -w-8060
#pragma option push -w-8004
#endif

#include "soapH.h"

SOAP_SOURCE_STAMP("@(#) soapC.cpp ver 2.8.74 2018-12-20 16:30:25 GMT")


#ifndef WITH_NOGLOBAL

SOAP_FMAC3 int SOAP_FMAC4 soap_getheader(struct soap *soap)
{
	soap->part = SOAP_IN_HEADER;
	soap->header = soap_in_SOAP_ENV__Header(soap, "SOAP-ENV:Header", soap->header, NULL);
	soap->part = SOAP_END_HEADER;
	return soap->header == NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putheader(struct soap *soap)
{
	if (soap->version && soap->header)
	{	soap->part = SOAP_IN_HEADER;
		if (soap_out_SOAP_ENV__Header(soap, "SOAP-ENV:Header", 0, soap->header, ""))
			return soap->error;
		soap->part = SOAP_END_HEADER;
	}
	return SOAP_OK;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializeheader(struct soap *soap)
{
	if (soap->version && soap->header)
		soap_serialize_SOAP_ENV__Header(soap, soap->header);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_header(struct soap *soap)
{
	if (soap->header == NULL)
	{	if ((soap->header = soap_new_SOAP_ENV__Header(soap)))
			soap_default_SOAP_ENV__Header(soap, soap->header);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_fault(struct soap *soap)
{
	if (soap->fault == NULL)
	{	soap->fault = soap_new_SOAP_ENV__Fault(soap, -1);
		if (soap->fault == NULL)
			return;
	}
	if (soap->version == 2 && soap->fault->SOAP_ENV__Code == NULL)
		soap->fault->SOAP_ENV__Code = soap_new_SOAP_ENV__Code(soap, -1);
	if (soap->version == 2 && soap->fault->SOAP_ENV__Reason == NULL)
		soap->fault->SOAP_ENV__Reason = soap_new_SOAP_ENV__Reason(soap, -1);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializefault(struct soap *soap)
{
	if (soap->fault)
		soap_serialize_SOAP_ENV__Fault(soap, soap->fault);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putfault(struct soap *soap)
{
	if (soap->fault)
		return soap_put_SOAP_ENV__Fault(soap, soap->fault, "SOAP-ENV:Fault", "");
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_getfault(struct soap *soap)
{
	return (soap->fault = soap_get_SOAP_ENV__Fault(soap, NULL, "SOAP-ENV:Fault", NULL)) == NULL;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->fault == NULL)
		return NULL;
	if (soap->version == 2 && soap->fault->SOAP_ENV__Code)
		return (const char**)(void*)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Value;
	return (const char**)(void*)&soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultsubcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->fault == NULL)
		return NULL;
	if (soap->version == 2 && soap->fault->SOAP_ENV__Code)
	{	if (soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode == NULL)
		{	soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode = soap_new_SOAP_ENV__Code(soap, -1);
			if (soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode == NULL)
				return NULL;
		}
		return (const char**)(void*)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode->SOAP_ENV__Value;
	}
	return (const char**)(void*)&soap->fault->faultcode;
}

SOAP_FMAC3 const char * SOAP_FMAC4 soap_fault_subcode(struct soap *soap)
{
	const char **s = soap_faultsubcode(soap);
	return s ? *s : NULL;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultstring(struct soap *soap)
{
	soap_fault(soap);
	if (soap->fault == NULL)
		return NULL;
	if (soap->version == 2 && soap->fault->SOAP_ENV__Reason)
		return (const char**)(void*)&soap->fault->SOAP_ENV__Reason->SOAP_ENV__Text;
	return (const char**)(void*)&soap->fault->faultstring;
}

SOAP_FMAC3 const char * SOAP_FMAC4 soap_fault_string(struct soap *soap)
{
	const char **s = soap_faultstring(soap);
	return s ? *s : NULL;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultdetail(struct soap *soap)
{
	soap_fault(soap);
	if (soap->fault == NULL)
		return NULL;
	if (soap->version == 2)
	{	if (soap->fault->SOAP_ENV__Detail == NULL)
			soap->fault->SOAP_ENV__Detail = soap_new_SOAP_ENV__Detail(soap, -1);
		return (const char**)(void*)&soap->fault->SOAP_ENV__Detail->__any;
	}
	if (soap->fault->detail == NULL)
		soap->fault->detail = soap_new_SOAP_ENV__Detail(soap, -1);
	return (const char**)(void*)&soap->fault->detail->__any;
}

SOAP_FMAC3 const char * SOAP_FMAC4 soap_fault_detail(struct soap *soap)
{
	const char **s = soap_faultdetail(soap);
	return s ? *s : NULL;
}

#endif

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap *soap)
{
	int t;
	if (soap->version == 1)
	{	for (;;)
		{	if (!soap_getelement(soap, &t))
				if ((soap->error && soap->error != SOAP_TAG_MISMATCH) || soap_ignore_element(soap))
					break;
		}
	}
	if (soap->error == SOAP_NO_TAG || soap->error == SOAP_EOF)
		soap->error = SOAP_OK;
	return soap->error;
}
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void * SOAP_FMAC4 soap_getelement(struct soap *soap, int *type)
{	(void)type;
	if (soap_peek_element(soap))
		return NULL;
#ifndef WITH_NOIDREF
	if (!*soap->id || !(*type = soap_lookup_type(soap, soap->id)))
		*type = soap_lookup_type(soap, soap->href);
	switch (*type)
	{
	case SOAP_TYPE_byte:
		return soap_in_byte(soap, NULL, NULL, "xsd:byte");
	case SOAP_TYPE_int:
		return soap_in_int(soap, NULL, NULL, "xsd:int");
	case SOAP_TYPE_unsignedByte:
		return soap_in_unsignedByte(soap, NULL, NULL, "xsd:unsignedByte");
	case SOAP_TYPE_unsignedInt:
		return soap_in_unsignedInt(soap, NULL, NULL, "xsd:unsignedInt");
	case SOAP_TYPE_dateTime:
		return soap_in_dateTime(soap, NULL, NULL, "xsd:dateTime");
	case SOAP_TYPE_bool:
		return soap_in_bool(soap, NULL, NULL, "xsd:boolean");
	case SOAP_TYPE_ns1__Version:
		return soap_in_ns1__Version(soap, NULL, NULL, "ns1:Version");
	case SOAP_TYPE_ns1__getVersionResponse:
		return soap_in_ns1__getVersionResponse(soap, NULL, NULL, "ns1:getVersionResponse");
	case SOAP_TYPE_ns1__getVersion:
		return soap_in_ns1__getVersion(soap, NULL, NULL, "ns1:getVersion");
	case SOAP_TYPE_ns1__processResponse:
		return soap_in_ns1__processResponse(soap, NULL, NULL, "ns1:processResponse");
	case SOAP_TYPE_ns1__photoExtra:
		return soap_in_ns1__photoExtra(soap, NULL, NULL, "ns1:photoExtra");
	case SOAP_TYPE_ns1__trCheckIn:
		return soap_in_ns1__trCheckIn(soap, NULL, NULL, "ns1:trCheckIn");
	case SOAP_TYPE_ns1__message:
		return soap_in_ns1__message(soap, NULL, NULL, "ns1:message");
	case SOAP_TYPE_ns1__process:
		return soap_in_ns1__process(soap, NULL, NULL, "ns1:process");
	case SOAP_TYPE_ns1__duploFault:
		return soap_in_ns1__duploFault(soap, NULL, NULL, "ns1:duploFault");
	case SOAP_TYPE_ns1__cameraInfo:
		return soap_in_ns1__cameraInfo(soap, NULL, NULL, "ns1:cameraInfo");
	case SOAP_TYPE_ns1__processGetInfoResponse:
		return soap_in_ns1__processGetInfoResponse(soap, NULL, NULL, "ns1:processGetInfoResponse");
	case SOAP_TYPE_ns1__processGetInfo:
		return soap_in_ns1__processGetInfo(soap, NULL, NULL, "ns1:processGetInfo");
	case SOAP_TYPE_xsd__decimal:
		return soap_in_xsd__decimal(soap, NULL, NULL, "xsd:decimal");
	case SOAP_TYPE_std__string:
		return soap_in_std__string(soap, NULL, NULL, "xsd:string");
	case SOAP_TYPE_xsd__base64Binary:
		return soap_in_xsd__base64Binary(soap, NULL, NULL, "xsd:base64Binary");
	case SOAP_TYPE_PointerTons1__getVersion:
		return soap_in_PointerTons1__getVersion(soap, NULL, NULL, "ns1:getVersion");
	case SOAP_TYPE_PointerTons1__processGetInfo:
		return soap_in_PointerTons1__processGetInfo(soap, NULL, NULL, "ns1:processGetInfo");
	case SOAP_TYPE_PointerTons1__process:
		return soap_in_PointerTons1__process(soap, NULL, NULL, "ns1:process");
	case SOAP_TYPE_PointerTons1__duploFault:
		return soap_in_PointerTons1__duploFault(soap, NULL, NULL, "ns1:duploFault");
	case SOAP_TYPE_PointerTons1__Version:
		return soap_in_PointerTons1__Version(soap, NULL, NULL, "ns1:Version");
	case SOAP_TYPE_PointerTodateTime:
		return soap_in_PointerTodateTime(soap, NULL, NULL, "xsd:dateTime");
	case SOAP_TYPE_PointerToxsd__base64Binary:
		return soap_in_PointerToxsd__base64Binary(soap, NULL, NULL, "xsd:base64Binary");
	case SOAP_TYPE_PointerTons1__photoExtra:
		return soap_in_PointerTons1__photoExtra(soap, NULL, NULL, "ns1:photoExtra");
	case SOAP_TYPE_PointerTons1__trCheckIn:
		return soap_in_PointerTons1__trCheckIn(soap, NULL, NULL, "ns1:trCheckIn");
	case SOAP_TYPE_PointerTons1__message:
		return soap_in_PointerTons1__message(soap, NULL, NULL, "ns1:message");
	case SOAP_TYPE_PointerToint:
		return soap_in_PointerToint(soap, NULL, NULL, "xsd:int");
	case SOAP_TYPE_PointerToxsd__decimal:
		return soap_in_PointerToxsd__decimal(soap, NULL, NULL, "xsd:decimal");
	case SOAP_TYPE_PointerTons1__cameraInfo:
		return soap_in_PointerTons1__cameraInfo(soap, NULL, NULL, "ns1:cameraInfo");
	case SOAP_TYPE_PointerTostd__string:
		return soap_in_PointerTostd__string(soap, NULL, NULL, "xsd:string");
	case SOAP_TYPE_PointerTounsignedByte:
		return soap_in_PointerTounsignedByte(soap, NULL, NULL, "xsd:unsignedByte");
	case SOAP_TYPE__QName:
	{	char **s;
		s = soap_in__QName(soap, NULL, NULL, "xsd:QName");
		return s ? *s : NULL;
	}
	case SOAP_TYPE_string:
	{	char **s;
		s = soap_in_string(soap, NULL, NULL, "xsd:string");
		return s ? *s : NULL;
	}
	default:
#else
	*type = 0;
#endif
	{	const char *t = soap->type;
		if (!*t)
			t = soap->tag;
		if (!soap_match_tag(soap, t, "ns1:Version"))
		{	*type = SOAP_TYPE_ns1__Version;
			return soap_in_ns1__Version(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:getVersionResponse"))
		{	*type = SOAP_TYPE_ns1__getVersionResponse;
			return soap_in_ns1__getVersionResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:getVersion"))
		{	*type = SOAP_TYPE_ns1__getVersion;
			return soap_in_ns1__getVersion(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:processResponse"))
		{	*type = SOAP_TYPE_ns1__processResponse;
			return soap_in_ns1__processResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:photoExtra"))
		{	*type = SOAP_TYPE_ns1__photoExtra;
			return soap_in_ns1__photoExtra(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:trCheckIn"))
		{	*type = SOAP_TYPE_ns1__trCheckIn;
			return soap_in_ns1__trCheckIn(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:message"))
		{	*type = SOAP_TYPE_ns1__message;
			return soap_in_ns1__message(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:process"))
		{	*type = SOAP_TYPE_ns1__process;
			return soap_in_ns1__process(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:duploFault"))
		{	*type = SOAP_TYPE_ns1__duploFault;
			return soap_in_ns1__duploFault(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:cameraInfo"))
		{	*type = SOAP_TYPE_ns1__cameraInfo;
			return soap_in_ns1__cameraInfo(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:processGetInfoResponse"))
		{	*type = SOAP_TYPE_ns1__processGetInfoResponse;
			return soap_in_ns1__processGetInfoResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:processGetInfo"))
		{	*type = SOAP_TYPE_ns1__processGetInfo;
			return soap_in_ns1__processGetInfo(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:decimal"))
		{	*type = SOAP_TYPE_xsd__decimal;
			return soap_in_xsd__decimal(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	*type = SOAP_TYPE_std__string;
			return soap_in_std__string(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:base64Binary"))
		{	*type = SOAP_TYPE_xsd__base64Binary;
			return soap_in_xsd__base64Binary(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:byte"))
		{	*type = SOAP_TYPE_byte;
			return soap_in_byte(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:int"))
		{	*type = SOAP_TYPE_int;
			return soap_in_int(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:unsignedByte"))
		{	*type = SOAP_TYPE_unsignedByte;
			return soap_in_unsignedByte(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:unsignedInt"))
		{	*type = SOAP_TYPE_unsignedInt;
			return soap_in_unsignedInt(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:dateTime"))
		{	*type = SOAP_TYPE_dateTime;
			return soap_in_dateTime(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:boolean"))
		{	*type = SOAP_TYPE_bool;
			return soap_in_bool(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:QName"))
		{	char **s;
			*type = SOAP_TYPE__QName;
			s = soap_in__QName(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	char **s;
			*type = SOAP_TYPE_string;
			s = soap_in_string(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		t = soap->tag;
#ifndef WITH_NOIDREF
	}
#endif
	}
	soap->error = SOAP_TAG_MISMATCH;
	return NULL;
}

#ifdef __cplusplus
}
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap *soap)
{
	if (!soap_peek_element(soap))
	{	int t;
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Unexpected element '%s' in input (level = %u, %d)\n", soap->tag, soap->level, soap->body));
		if (soap->mustUnderstand && !soap->other && !soap->fignore)
			return soap->error = SOAP_MUSTUNDERSTAND;
		if (((soap->mode & SOAP_XML_STRICT) && !soap->fignore && soap->part != SOAP_IN_HEADER) || !soap_match_tag(soap, soap->tag, "SOAP-ENV:"))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "REJECTING element '%s'\n", soap->tag));
			return soap->error = SOAP_TAG_MISMATCH;
		}
		if (!*soap->id || !soap_getelement(soap, &t))
		{	soap->peeked = 0;
			if (soap->fignore)
				soap->error = soap->fignore(soap, soap->tag);
			else
				soap->error = SOAP_OK;
			DBGLOG(TEST, if (!soap->error) SOAP_MESSAGE(fdebug, "IGNORING element '%s'\n", soap->tag));
			if (!soap->error && soap->body && soap_ignore(soap))
				return soap->error;
		}
	}
	return soap->error;
}

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap *soap)
{
	int i;
	struct soap_plist *pp;
	if (soap->version == 1 && soap->encodingStyle && !(soap->mode & (SOAP_XML_TREE | SOAP_XML_GRAPH)))
		for (i = 0; i < SOAP_PTRHASH; i++)
			for (pp = soap->pht[i]; pp; pp = pp->next)
				if (pp->mark1 == 2 || pp->mark2 == 2)
					if (soap_putelement(soap, pp->ptr, SOAP_MULTIREFTAG, pp->id, pp->type))
						return soap->error;
	return SOAP_OK;
}
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap *soap, const void *ptr, const char *tag, int id, int type)
{	(void)tag;
	switch (type)
	{
	case SOAP_TYPE_byte:
		return soap_out_byte(soap, tag, id, (const char *)ptr, "xsd:byte");
	case SOAP_TYPE_int:
		return soap_out_int(soap, tag, id, (const int *)ptr, "xsd:int");
	case SOAP_TYPE_unsignedByte:
		return soap_out_unsignedByte(soap, tag, id, (const unsigned char *)ptr, "xsd:unsignedByte");
	case SOAP_TYPE_unsignedInt:
		return soap_out_unsignedInt(soap, tag, id, (const unsigned int *)ptr, "xsd:unsignedInt");
	case SOAP_TYPE_dateTime:
		return soap_out_dateTime(soap, tag, id, (const time_t *)ptr, "xsd:dateTime");
	case SOAP_TYPE_bool:
		return soap_out_bool(soap, tag, id, (const bool *)ptr, "xsd:boolean");
	case SOAP_TYPE_ns1__Version:
		return ((ns1__Version *)ptr)->soap_out(soap, tag, id, "ns1:Version");
	case SOAP_TYPE_ns1__getVersionResponse:
		return ((ns1__getVersionResponse *)ptr)->soap_out(soap, tag, id, "ns1:getVersionResponse");
	case SOAP_TYPE_ns1__getVersion:
		return ((ns1__getVersion *)ptr)->soap_out(soap, tag, id, "ns1:getVersion");
	case SOAP_TYPE_ns1__processResponse:
		return ((ns1__processResponse *)ptr)->soap_out(soap, tag, id, "ns1:processResponse");
	case SOAP_TYPE_ns1__photoExtra:
		return ((ns1__photoExtra *)ptr)->soap_out(soap, tag, id, "ns1:photoExtra");
	case SOAP_TYPE_ns1__trCheckIn:
		return ((ns1__trCheckIn *)ptr)->soap_out(soap, tag, id, "ns1:trCheckIn");
	case SOAP_TYPE_ns1__message:
		return ((ns1__message *)ptr)->soap_out(soap, tag, id, "ns1:message");
	case SOAP_TYPE_ns1__process:
		return ((ns1__process *)ptr)->soap_out(soap, tag, id, "ns1:process");
	case SOAP_TYPE_ns1__duploFault:
		return ((ns1__duploFault *)ptr)->soap_out(soap, tag, id, "ns1:duploFault");
	case SOAP_TYPE_ns1__cameraInfo:
		return ((ns1__cameraInfo *)ptr)->soap_out(soap, tag, id, "ns1:cameraInfo");
	case SOAP_TYPE_ns1__processGetInfoResponse:
		return ((ns1__processGetInfoResponse *)ptr)->soap_out(soap, tag, id, "ns1:processGetInfoResponse");
	case SOAP_TYPE_ns1__processGetInfo:
		return ((ns1__processGetInfo *)ptr)->soap_out(soap, tag, id, "ns1:processGetInfo");
	case SOAP_TYPE_xsd__decimal:
		return soap_out_xsd__decimal(soap, tag, id, (const std::string *)ptr, "xsd:decimal");
	case SOAP_TYPE_std__string:
		return soap_out_std__string(soap, tag, id, (const std::string *)ptr, "xsd:string");
	case SOAP_TYPE_xsd__base64Binary:
		return ((xsd__base64Binary *)ptr)->soap_out(soap, tag, id, "xsd:base64Binary");
	case SOAP_TYPE_PointerTons1__getVersion:
		return soap_out_PointerTons1__getVersion(soap, tag, id, (ns1__getVersion *const*)ptr, "ns1:getVersion");
	case SOAP_TYPE_PointerTons1__processGetInfo:
		return soap_out_PointerTons1__processGetInfo(soap, tag, id, (ns1__processGetInfo *const*)ptr, "ns1:processGetInfo");
	case SOAP_TYPE_PointerTons1__process:
		return soap_out_PointerTons1__process(soap, tag, id, (ns1__process *const*)ptr, "ns1:process");
	case SOAP_TYPE_PointerTons1__duploFault:
		return soap_out_PointerTons1__duploFault(soap, tag, id, (ns1__duploFault *const*)ptr, "ns1:duploFault");
	case SOAP_TYPE_PointerTons1__Version:
		return soap_out_PointerTons1__Version(soap, tag, id, (ns1__Version *const*)ptr, "ns1:Version");
	case SOAP_TYPE_PointerTodateTime:
		return soap_out_PointerTodateTime(soap, tag, id, (time_t *const*)ptr, "xsd:dateTime");
	case SOAP_TYPE_PointerToxsd__base64Binary:
		return soap_out_PointerToxsd__base64Binary(soap, tag, id, (xsd__base64Binary *const*)ptr, "xsd:base64Binary");
	case SOAP_TYPE_PointerTons1__photoExtra:
		return soap_out_PointerTons1__photoExtra(soap, tag, id, (ns1__photoExtra *const*)ptr, "ns1:photoExtra");
	case SOAP_TYPE_PointerTons1__trCheckIn:
		return soap_out_PointerTons1__trCheckIn(soap, tag, id, (ns1__trCheckIn *const*)ptr, "ns1:trCheckIn");
	case SOAP_TYPE_PointerTons1__message:
		return soap_out_PointerTons1__message(soap, tag, id, (ns1__message *const*)ptr, "ns1:message");
	case SOAP_TYPE_PointerToint:
		return soap_out_PointerToint(soap, tag, id, (int *const*)ptr, "xsd:int");
	case SOAP_TYPE_PointerToxsd__decimal:
		return soap_out_PointerToxsd__decimal(soap, tag, id, (std::string *const*)ptr, "xsd:decimal");
	case SOAP_TYPE_PointerTons1__cameraInfo:
		return soap_out_PointerTons1__cameraInfo(soap, tag, id, (ns1__cameraInfo *const*)ptr, "ns1:cameraInfo");
	case SOAP_TYPE_PointerTostd__string:
		return soap_out_PointerTostd__string(soap, tag, id, (std::string *const*)ptr, "xsd:string");
	case SOAP_TYPE_PointerTounsignedByte:
		return soap_out_PointerTounsignedByte(soap, tag, id, (unsigned char *const*)ptr, "xsd:unsignedByte");
	case SOAP_TYPE__QName:
		return soap_out_string(soap, tag, id, (char*const*)(void*)&ptr, "xsd:QName");
	case SOAP_TYPE_string:
		return soap_out_string(soap, tag, id, (char*const*)(void*)&ptr, "xsd:string");
	case 0:
		return SOAP_OK;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_putelement '%s' failed for type %d in soapC.cpp\n", tag ? tag : "", type));
	return soap_element_empty(soap, tag); /* unknown type to serialize */
}
#ifdef __cplusplus
}
#endif

#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap *soap, const void *ptr, int type)
{
	(void)soap; (void)ptr; (void)type; /* appease -Wall -Werror */
	switch (type)
	{
	case SOAP_TYPE_ns1__Version:
		((ns1__Version *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__getVersionResponse:
		((ns1__getVersionResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__getVersion:
		((ns1__getVersion *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__processResponse:
		((ns1__processResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__photoExtra:
		((ns1__photoExtra *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__trCheckIn:
		((ns1__trCheckIn *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__message:
		((ns1__message *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__process:
		((ns1__process *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__duploFault:
		((ns1__duploFault *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__cameraInfo:
		((ns1__cameraInfo *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__processGetInfoResponse:
		((ns1__processGetInfoResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__processGetInfo:
		((ns1__processGetInfo *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_xsd__decimal:
		soap_serialize_xsd__decimal(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_std__string:
		soap_serialize_std__string(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_xsd__base64Binary:
		((xsd__base64Binary *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE___ns1__getVersion:
		soap_serialize___ns1__getVersion(soap, (const struct __ns1__getVersion *)ptr);
		break;
	case SOAP_TYPE___ns1__processGetInfo:
		soap_serialize___ns1__processGetInfo(soap, (const struct __ns1__processGetInfo *)ptr);
		break;
	case SOAP_TYPE___ns1__process:
		soap_serialize___ns1__process(soap, (const struct __ns1__process *)ptr);
		break;
	case SOAP_TYPE_PointerTons1__getVersion:
		soap_serialize_PointerTons1__getVersion(soap, (ns1__getVersion *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__processGetInfo:
		soap_serialize_PointerTons1__processGetInfo(soap, (ns1__processGetInfo *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__process:
		soap_serialize_PointerTons1__process(soap, (ns1__process *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__duploFault:
		soap_serialize_PointerTons1__duploFault(soap, (ns1__duploFault *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__Version:
		soap_serialize_PointerTons1__Version(soap, (ns1__Version *const*)ptr);
		break;
	case SOAP_TYPE_PointerTodateTime:
		soap_serialize_PointerTodateTime(soap, (time_t *const*)ptr);
		break;
	case SOAP_TYPE_PointerToxsd__base64Binary:
		soap_serialize_PointerToxsd__base64Binary(soap, (xsd__base64Binary *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__photoExtra:
		soap_serialize_PointerTons1__photoExtra(soap, (ns1__photoExtra *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__trCheckIn:
		soap_serialize_PointerTons1__trCheckIn(soap, (ns1__trCheckIn *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__message:
		soap_serialize_PointerTons1__message(soap, (ns1__message *const*)ptr);
		break;
	case SOAP_TYPE_PointerToint:
		soap_serialize_PointerToint(soap, (int *const*)ptr);
		break;
	case SOAP_TYPE_PointerToxsd__decimal:
		soap_serialize_PointerToxsd__decimal(soap, (std::string *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__cameraInfo:
		soap_serialize_PointerTons1__cameraInfo(soap, (ns1__cameraInfo *const*)ptr);
		break;
	case SOAP_TYPE_PointerTostd__string:
		soap_serialize_PointerTostd__string(soap, (std::string *const*)ptr);
		break;
	case SOAP_TYPE_PointerTounsignedByte:
		soap_serialize_PointerTounsignedByte(soap, (unsigned char *const*)ptr);
		break;
	case SOAP_TYPE__QName:
		soap_serialize_string(soap, (char*const*)(void*)&ptr);
		break;
	case SOAP_TYPE_string:
		soap_serialize_string(soap, (char*const*)(void*)&ptr);
		break;
	}
}
#ifdef __cplusplus
}
#endif
#endif

#ifdef __cplusplus
extern "C" {
#endif

SOAP_FMAC3 void * SOAP_FMAC4 soap_dupelement(struct soap *soap, const void *ptr, int type)
{(void)soap; (void)ptr; (void)type; /* appease -Wall -Werror */
	return NULL;
}
#ifdef __cplusplus
}
#endif

#ifdef __cplusplus
extern "C" {
#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_delelement(const void *ptr, int type)
{(void)ptr; (void)type; /* appease -Wall -Werror */
}
#ifdef __cplusplus
}
#endif

SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap *soap, int t, const char *type, const char *arrayType, size_t *n)
{	(void)type;
	switch (t)
	{
	case SOAP_TYPE_xsd__base64Binary:
		return (void*)soap_instantiate_xsd__base64Binary(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__string:
		return (void*)soap_instantiate_std__string(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__processGetInfo:
		return (void*)soap_instantiate_ns1__processGetInfo(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__processGetInfoResponse:
		return (void*)soap_instantiate_ns1__processGetInfoResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__cameraInfo:
		return (void*)soap_instantiate_ns1__cameraInfo(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__duploFault:
		return (void*)soap_instantiate_ns1__duploFault(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__process:
		return (void*)soap_instantiate_ns1__process(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__message:
		return (void*)soap_instantiate_ns1__message(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__trCheckIn:
		return (void*)soap_instantiate_ns1__trCheckIn(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__photoExtra:
		return (void*)soap_instantiate_ns1__photoExtra(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__processResponse:
		return (void*)soap_instantiate_ns1__processResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__getVersion:
		return (void*)soap_instantiate_ns1__getVersion(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__getVersionResponse:
		return (void*)soap_instantiate_ns1__getVersionResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__Version:
		return (void*)soap_instantiate_ns1__Version(soap, -1, type, arrayType, n);
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		return (void*)soap_instantiate_SOAP_ENV__Detail(soap, -1, type, arrayType, n);
#endif
	case SOAP_TYPE___ns1__process:
		return (void*)soap_instantiate___ns1__process(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__processGetInfo:
		return (void*)soap_instantiate___ns1__processGetInfo(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__getVersion:
		return (void*)soap_instantiate___ns1__getVersion(soap, -1, type, arrayType, n);
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		return (void*)soap_instantiate_SOAP_ENV__Header(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		return (void*)soap_instantiate_SOAP_ENV__Code(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		return (void*)soap_instantiate_SOAP_ENV__Reason(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		return (void*)soap_instantiate_SOAP_ENV__Fault(soap, -1, type, arrayType, n);
#endif
	case SOAP_TYPE_xsd__decimal:
		return (void*)soap_instantiate_xsd__decimal(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOfint:
		return (void*)soap_instantiate_std__vectorTemplateOfint(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOfPointerTons1__photoExtra:
		return (void*)soap_instantiate_std__vectorTemplateOfPointerTons1__photoExtra(soap, -1, type, arrayType, n);
	}
	return NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap *soap, struct soap_clist *p)
{
	(void)soap; /* appease -Wall -Werror */
	if (!p->ptr)
		return SOAP_OK;
	switch (p->type)
	{
	case SOAP_TYPE_xsd__base64Binary:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<xsd__base64Binary*>(p->ptr), xsd__base64Binary);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<xsd__base64Binary*>(p->ptr), xsd__base64Binary);
		break;
	case SOAP_TYPE_std__string:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::string*>(p->ptr), std::string);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::string*>(p->ptr), std::string);
		break;
	case SOAP_TYPE_ns1__processGetInfo:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<ns1__processGetInfo*>(p->ptr), ns1__processGetInfo);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<ns1__processGetInfo*>(p->ptr), ns1__processGetInfo);
		break;
	case SOAP_TYPE_ns1__processGetInfoResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<ns1__processGetInfoResponse*>(p->ptr), ns1__processGetInfoResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<ns1__processGetInfoResponse*>(p->ptr), ns1__processGetInfoResponse);
		break;
	case SOAP_TYPE_ns1__cameraInfo:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<ns1__cameraInfo*>(p->ptr), ns1__cameraInfo);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<ns1__cameraInfo*>(p->ptr), ns1__cameraInfo);
		break;
	case SOAP_TYPE_ns1__duploFault:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<ns1__duploFault*>(p->ptr), ns1__duploFault);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<ns1__duploFault*>(p->ptr), ns1__duploFault);
		break;
	case SOAP_TYPE_ns1__process:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<ns1__process*>(p->ptr), ns1__process);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<ns1__process*>(p->ptr), ns1__process);
		break;
	case SOAP_TYPE_ns1__message:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<ns1__message*>(p->ptr), ns1__message);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<ns1__message*>(p->ptr), ns1__message);
		break;
	case SOAP_TYPE_ns1__trCheckIn:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<ns1__trCheckIn*>(p->ptr), ns1__trCheckIn);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<ns1__trCheckIn*>(p->ptr), ns1__trCheckIn);
		break;
	case SOAP_TYPE_ns1__photoExtra:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<ns1__photoExtra*>(p->ptr), ns1__photoExtra);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<ns1__photoExtra*>(p->ptr), ns1__photoExtra);
		break;
	case SOAP_TYPE_ns1__processResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<ns1__processResponse*>(p->ptr), ns1__processResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<ns1__processResponse*>(p->ptr), ns1__processResponse);
		break;
	case SOAP_TYPE_ns1__getVersion:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<ns1__getVersion*>(p->ptr), ns1__getVersion);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<ns1__getVersion*>(p->ptr), ns1__getVersion);
		break;
	case SOAP_TYPE_ns1__getVersionResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<ns1__getVersionResponse*>(p->ptr), ns1__getVersionResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<ns1__getVersionResponse*>(p->ptr), ns1__getVersionResponse);
		break;
	case SOAP_TYPE_ns1__Version:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<ns1__Version*>(p->ptr), ns1__Version);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<ns1__Version*>(p->ptr), ns1__Version);
		break;
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct SOAP_ENV__Detail*>(p->ptr), struct SOAP_ENV__Detail);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct SOAP_ENV__Detail*>(p->ptr), struct SOAP_ENV__Detail);
		break;
#endif
	case SOAP_TYPE___ns1__process:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __ns1__process*>(p->ptr), struct __ns1__process);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __ns1__process*>(p->ptr), struct __ns1__process);
		break;
	case SOAP_TYPE___ns1__processGetInfo:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __ns1__processGetInfo*>(p->ptr), struct __ns1__processGetInfo);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __ns1__processGetInfo*>(p->ptr), struct __ns1__processGetInfo);
		break;
	case SOAP_TYPE___ns1__getVersion:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __ns1__getVersion*>(p->ptr), struct __ns1__getVersion);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __ns1__getVersion*>(p->ptr), struct __ns1__getVersion);
		break;
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct SOAP_ENV__Header*>(p->ptr), struct SOAP_ENV__Header);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct SOAP_ENV__Header*>(p->ptr), struct SOAP_ENV__Header);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct SOAP_ENV__Code*>(p->ptr), struct SOAP_ENV__Code);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct SOAP_ENV__Code*>(p->ptr), struct SOAP_ENV__Code);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct SOAP_ENV__Reason*>(p->ptr), struct SOAP_ENV__Reason);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct SOAP_ENV__Reason*>(p->ptr), struct SOAP_ENV__Reason);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct SOAP_ENV__Fault*>(p->ptr), struct SOAP_ENV__Fault);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct SOAP_ENV__Fault*>(p->ptr), struct SOAP_ENV__Fault);
		break;
#endif
	case SOAP_TYPE_xsd__decimal:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::string*>(p->ptr), std::string);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::string*>(p->ptr), std::string);
		break;
	case SOAP_TYPE_std__vectorTemplateOfint:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::vector<int> *>(p->ptr), std::vector<int> );
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::vector<int> *>(p->ptr), std::vector<int> );
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTons1__photoExtra:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::vector<ns1__photoExtra *> *>(p->ptr), std::vector<ns1__photoExtra *> );
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::vector<ns1__photoExtra *> *>(p->ptr), std::vector<ns1__photoExtra *> );
		break;
	default:
		return SOAP_ERR;
	}
	return SOAP_OK;
}

#ifdef WIN32
#pragma warning(push)
// do not warn on switch w/o cases
#pragma warning(disable:4065)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_fbase(int t, int b)
{
	(void)t; (void)b; /* appease -Wall -Werror */
	return 0;
}
#ifdef WIN32
#pragma warning(pop)
#endif

#ifndef WITH_NOIDREF
#ifdef WIN32
#pragma warning(push)
// do not warn on switch w/o cases
#pragma warning(disable:4065)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_finsert(struct soap *soap, int t, int tt, void *p, size_t index, const void *q, void **x)
{
	(void)soap; (void)t; (void)p; (void)index; (void)q; (void)x; /* appease -Wall -Werror */
	switch (tt)
	{
	case SOAP_TYPE_std__vectorTemplateOfint:
		if (t == SOAP_TYPE_int)
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container std::vector<int>  insert type=%d in %d location=%p object=%p at index=%lu\n", t, tt, p, q, (unsigned long)index));
			(*(std::vector<int> *)p)[index] = *(int *)q;
		}
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTons1__photoExtra:
		if (t == SOAP_TYPE_ns1__photoExtra || soap_fbase(t, SOAP_TYPE_ns1__photoExtra))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container std::vector<ns1__photoExtra *>  insert type=%d in %d location=%p object=%p at index=%lu\n", t, tt, p, q, (unsigned long)index));
			(*(std::vector<ns1__photoExtra *> *)p)[index] = *(ns1__photoExtra **)q;
		}
		break;
	case SOAP_TYPE_xsd__base64Binary:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy xsd__base64Binary type=%d location=%p object=%p\n", t, p, q));
		*(xsd__base64Binary*)p = *(xsd__base64Binary*)q;
		break;
	case SOAP_TYPE_std__string:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy std::string type=%d location=%p object=%p\n", t, p, q));
		*(std::string*)p = *(std::string*)q;
		break;
	case SOAP_TYPE_ns1__processGetInfo:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns1__processGetInfo type=%d location=%p object=%p\n", t, p, q));
		*(ns1__processGetInfo*)p = *(ns1__processGetInfo*)q;
		break;
	case SOAP_TYPE_ns1__processGetInfoResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns1__processGetInfoResponse type=%d location=%p object=%p\n", t, p, q));
		*(ns1__processGetInfoResponse*)p = *(ns1__processGetInfoResponse*)q;
		break;
	case SOAP_TYPE_ns1__cameraInfo:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns1__cameraInfo type=%d location=%p object=%p\n", t, p, q));
		*(ns1__cameraInfo*)p = *(ns1__cameraInfo*)q;
		break;
	case SOAP_TYPE_ns1__duploFault:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns1__duploFault type=%d location=%p object=%p\n", t, p, q));
		*(ns1__duploFault*)p = *(ns1__duploFault*)q;
		break;
	case SOAP_TYPE_ns1__process:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns1__process type=%d location=%p object=%p\n", t, p, q));
		*(ns1__process*)p = *(ns1__process*)q;
		break;
	case SOAP_TYPE_ns1__message:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns1__message type=%d location=%p object=%p\n", t, p, q));
		*(ns1__message*)p = *(ns1__message*)q;
		break;
	case SOAP_TYPE_ns1__trCheckIn:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns1__trCheckIn type=%d location=%p object=%p\n", t, p, q));
		*(ns1__trCheckIn*)p = *(ns1__trCheckIn*)q;
		break;
	case SOAP_TYPE_ns1__photoExtra:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns1__photoExtra type=%d location=%p object=%p\n", t, p, q));
		*(ns1__photoExtra*)p = *(ns1__photoExtra*)q;
		break;
	case SOAP_TYPE_ns1__processResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns1__processResponse type=%d location=%p object=%p\n", t, p, q));
		*(ns1__processResponse*)p = *(ns1__processResponse*)q;
		break;
	case SOAP_TYPE_ns1__getVersion:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns1__getVersion type=%d location=%p object=%p\n", t, p, q));
		*(ns1__getVersion*)p = *(ns1__getVersion*)q;
		break;
	case SOAP_TYPE_ns1__getVersionResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns1__getVersionResponse type=%d location=%p object=%p\n", t, p, q));
		*(ns1__getVersionResponse*)p = *(ns1__getVersionResponse*)q;
		break;
	case SOAP_TYPE_ns1__Version:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns1__Version type=%d location=%p object=%p\n", t, p, q));
		*(ns1__Version*)p = *(ns1__Version*)q;
		break;
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct SOAP_ENV__Detail type=%d location=%p object=%p\n", t, p, q));
		*(struct SOAP_ENV__Detail*)p = *(struct SOAP_ENV__Detail*)q;
		break;
#endif
	case SOAP_TYPE___ns1__process:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __ns1__process type=%d location=%p object=%p\n", t, p, q));
		*(struct __ns1__process*)p = *(struct __ns1__process*)q;
		break;
	case SOAP_TYPE___ns1__processGetInfo:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __ns1__processGetInfo type=%d location=%p object=%p\n", t, p, q));
		*(struct __ns1__processGetInfo*)p = *(struct __ns1__processGetInfo*)q;
		break;
	case SOAP_TYPE___ns1__getVersion:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __ns1__getVersion type=%d location=%p object=%p\n", t, p, q));
		*(struct __ns1__getVersion*)p = *(struct __ns1__getVersion*)q;
		break;
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct SOAP_ENV__Header type=%d location=%p object=%p\n", t, p, q));
		*(struct SOAP_ENV__Header*)p = *(struct SOAP_ENV__Header*)q;
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct SOAP_ENV__Code type=%d location=%p object=%p\n", t, p, q));
		*(struct SOAP_ENV__Code*)p = *(struct SOAP_ENV__Code*)q;
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct SOAP_ENV__Reason type=%d location=%p object=%p\n", t, p, q));
		*(struct SOAP_ENV__Reason*)p = *(struct SOAP_ENV__Reason*)q;
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct SOAP_ENV__Fault type=%d location=%p object=%p\n", t, p, q));
		*(struct SOAP_ENV__Fault*)p = *(struct SOAP_ENV__Fault*)q;
		break;
#endif
	case SOAP_TYPE_xsd__decimal:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy std::string type=%d location=%p object=%p\n", t, p, q));
		*(std::string*)p = *(std::string*)q;
		break;
	default:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Could not insert type=%d in %d\n", t, tt));
	}
}
#ifdef WIN32
#pragma warning(pop)
#endif
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap *soap, const char *tag, int id, const char *a, const char *type)
{
	return soap_outbyte(soap, tag, id, a, type, SOAP_TYPE_byte);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap *soap, const char *tag, char *a, const char *type)
{
	a = soap_inbyte(soap, tag, a, type, SOAP_TYPE_byte);
	return a;
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_new_byte(struct soap *soap, int n)
{
	char *a = static_cast<char *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(char)));
	for (char *p = a; p && n--; ++p)
		soap_default_byte(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap *soap, const char *a, const char *tag, const char *type)
{
	if (soap_out_byte(soap, tag ? tag : "byte", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap *soap, char *p, const char *tag, const char *type)
{
	if ((p = soap_in_byte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap *soap, const char *tag, int id, const int *a, const char *type)
{
	return soap_outint(soap, tag, id, a, type, SOAP_TYPE_int);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap *soap, const char *tag, int *a, const char *type)
{
	a = soap_inint(soap, tag, a, type, SOAP_TYPE_int);
	return a;
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_new_int(struct soap *soap, int n)
{
	int *a = static_cast<int *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(int)));
	for (int *p = a; p && n--; ++p)
		soap_default_int(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap *soap, const int *a, const char *tag, const char *type)
{
	if (soap_out_int(soap, tag ? tag : "int", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap *soap, int *p, const char *tag, const char *type)
{
	if ((p = soap_in_int(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedByte(struct soap *soap, const char *tag, int id, const unsigned char *a, const char *type)
{
	return soap_outunsignedByte(soap, tag, id, a, type, SOAP_TYPE_unsignedByte);
}

SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_in_unsignedByte(struct soap *soap, const char *tag, unsigned char *a, const char *type)
{
	a = soap_inunsignedByte(soap, tag, a, type, SOAP_TYPE_unsignedByte);
	return a;
}

SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_new_unsignedByte(struct soap *soap, int n)
{
	unsigned char *a = static_cast<unsigned char *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(unsigned char)));
	for (unsigned char *p = a; p && n--; ++p)
		soap_default_unsignedByte(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedByte(struct soap *soap, const unsigned char *a, const char *tag, const char *type)
{
	if (soap_out_unsignedByte(soap, tag ? tag : "unsignedByte", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_get_unsignedByte(struct soap *soap, unsigned char *p, const char *tag, const char *type)
{
	if ((p = soap_in_unsignedByte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedInt(struct soap *soap, const char *tag, int id, const unsigned int *a, const char *type)
{
	return soap_outunsignedInt(soap, tag, id, a, type, SOAP_TYPE_unsignedInt);
}

SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_in_unsignedInt(struct soap *soap, const char *tag, unsigned int *a, const char *type)
{
	a = soap_inunsignedInt(soap, tag, a, type, SOAP_TYPE_unsignedInt);
	return a;
}

SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_new_unsignedInt(struct soap *soap, int n)
{
	unsigned int *a = static_cast<unsigned int *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(unsigned int)));
	for (unsigned int *p = a; p && n--; ++p)
		soap_default_unsignedInt(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedInt(struct soap *soap, const unsigned int *a, const char *tag, const char *type)
{
	if (soap_out_unsignedInt(soap, tag ? tag : "unsignedInt", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_get_unsignedInt(struct soap *soap, unsigned int *p, const char *tag, const char *type)
{
	if ((p = soap_in_unsignedInt(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_dateTime(struct soap *soap, const char *tag, int id, const time_t *a, const char *type)
{
	return soap_outdateTime(soap, tag, id, a, type, SOAP_TYPE_dateTime);
}

SOAP_FMAC3 time_t * SOAP_FMAC4 soap_in_dateTime(struct soap *soap, const char *tag, time_t *a, const char *type)
{
	a = soap_indateTime(soap, tag, a, type, SOAP_TYPE_dateTime);
	return a;
}

SOAP_FMAC3 time_t * SOAP_FMAC4 soap_new_dateTime(struct soap *soap, int n)
{
	time_t *a = static_cast<time_t *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(time_t)));
	for (time_t *p = a; p && n--; ++p)
		soap_default_dateTime(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_dateTime(struct soap *soap, const time_t *a, const char *tag, const char *type)
{
	if (soap_out_dateTime(soap, tag ? tag : "dateTime", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 time_t * SOAP_FMAC4 soap_get_dateTime(struct soap *soap, time_t *p, const char *tag, const char *type)
{
	if ((p = soap_in_dateTime(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_bool[] =
{	{ (LONG64)false, "false" },
	{ (LONG64)true, "true" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_bool2s(struct soap *soap, bool n)
{
	(void)soap; /* appease -Wall -Werror */
	return soap_code_str(soap_codes_bool, n != 0);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_bool(struct soap *soap, const char *tag, int id, const bool *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_bool), type) || soap_send(soap, soap_bool2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2bool(struct soap *soap, const char *s, bool *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_bool, s);
	if (map)
		*a = (bool)(map->code != 0);
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
	{	long n;
		if (soap_s2long(soap, s, &n) || n < 0 || n > 1)
			return soap->error = SOAP_TYPE;
		*a = (bool)(n != 0);
	}
	return SOAP_OK;
}

SOAP_FMAC3 bool * SOAP_FMAC4 soap_in_bool(struct soap *soap, const char *tag, bool *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type) && soap_match_tag(soap, soap->type, ":boolean"))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (bool*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_bool, sizeof(bool), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2bool(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (bool *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_bool, SOAP_TYPE_bool, sizeof(bool), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 bool * SOAP_FMAC4 soap_new_bool(struct soap *soap, int n)
{
	bool *a = static_cast<bool *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(bool)));
	for (bool *p = a; p && n--; ++p)
		soap_default_bool(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_bool(struct soap *soap, const bool *a, const char *tag, const char *type)
{
	if (soap_out_bool(soap, tag ? tag : "boolean", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 bool * SOAP_FMAC4 soap_get_bool(struct soap *soap, bool *p, const char *tag, const char *type)
{
	if ((p = soap_in_bool(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns1__Version::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ns1__Version::buildVer = NULL;
	/* transient soap skipped */
}

void ns1__Version::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__string(soap, &this->ns1__Version::buildVer);
#endif
}

int ns1__Version::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__Version(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__Version(struct soap *soap, const char *tag, int id, const ns1__Version *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__Version), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "buildVer", -1, &a->ns1__Version::buildVer, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns1__Version::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_ns1__Version(soap, tag, this, type);
}

SOAP_FMAC3 ns1__Version * SOAP_FMAC4 soap_in_ns1__Version(struct soap *soap, const char *tag, ns1__Version *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__Version*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__Version, sizeof(ns1__Version), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_ns1__Version)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (ns1__Version *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_buildVer1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_buildVer1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTostd__string(soap, "buildVer", &a->ns1__Version::buildVer, "xsd:string"))
				{	soap_flag_buildVer1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__Version *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__Version, SOAP_TYPE_ns1__Version, sizeof(ns1__Version), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 ns1__Version * SOAP_FMAC2 soap_instantiate_ns1__Version(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__Version(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	ns1__Version *p;
	size_t k = sizeof(ns1__Version);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ns1__Version, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, ns1__Version);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, ns1__Version, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns1__Version location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int ns1__Version::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_ns1__Version(soap, tag ? tag : "ns1:Version", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__Version::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__Version(soap, this, tag, type);
}

SOAP_FMAC3 ns1__Version * SOAP_FMAC4 soap_get_ns1__Version(struct soap *soap, ns1__Version *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__Version(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns1__getVersionResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ns1__getVersionResponse::return_ = NULL;
	/* transient soap skipped */
}

void ns1__getVersionResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTons1__Version(soap, &this->ns1__getVersionResponse::return_);
#endif
}

int ns1__getVersionResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__getVersionResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getVersionResponse(struct soap *soap, const char *tag, int id, const ns1__getVersionResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__getVersionResponse), type))
		return soap->error;
	if (soap_out_PointerTons1__Version(soap, "return", -1, &a->ns1__getVersionResponse::return_, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns1__getVersionResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_ns1__getVersionResponse(soap, tag, this, type);
}

SOAP_FMAC3 ns1__getVersionResponse * SOAP_FMAC4 soap_in_ns1__getVersionResponse(struct soap *soap, const char *tag, ns1__getVersionResponse *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__getVersionResponse*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__getVersionResponse, sizeof(ns1__getVersionResponse), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_ns1__getVersionResponse)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (ns1__getVersionResponse *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_return_1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_return_1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTons1__Version(soap, "return", &a->ns1__getVersionResponse::return_, "ns1:Version"))
				{	soap_flag_return_1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__getVersionResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__getVersionResponse, SOAP_TYPE_ns1__getVersionResponse, sizeof(ns1__getVersionResponse), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 ns1__getVersionResponse * SOAP_FMAC2 soap_instantiate_ns1__getVersionResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__getVersionResponse(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	ns1__getVersionResponse *p;
	size_t k = sizeof(ns1__getVersionResponse);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ns1__getVersionResponse, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, ns1__getVersionResponse);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, ns1__getVersionResponse, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns1__getVersionResponse location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int ns1__getVersionResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_ns1__getVersionResponse(soap, tag ? tag : "ns1:getVersionResponse", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__getVersionResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__getVersionResponse(soap, this, tag, type);
}

SOAP_FMAC3 ns1__getVersionResponse * SOAP_FMAC4 soap_get_ns1__getVersionResponse(struct soap *soap, ns1__getVersionResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__getVersionResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns1__getVersion::soap_default(struct soap *soap)
{
	this->soap = soap;
	/* transient soap skipped */
}

void ns1__getVersion::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

int ns1__getVersion::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__getVersion(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getVersion(struct soap *soap, const char *tag, int id, const ns1__getVersion *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__getVersion), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns1__getVersion::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_ns1__getVersion(soap, tag, this, type);
}

SOAP_FMAC3 ns1__getVersion * SOAP_FMAC4 soap_in_ns1__getVersion(struct soap *soap, const char *tag, ns1__getVersion *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__getVersion*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__getVersion, sizeof(ns1__getVersion), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_ns1__getVersion)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (ns1__getVersion *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__getVersion *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__getVersion, SOAP_TYPE_ns1__getVersion, sizeof(ns1__getVersion), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 ns1__getVersion * SOAP_FMAC2 soap_instantiate_ns1__getVersion(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__getVersion(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	ns1__getVersion *p;
	size_t k = sizeof(ns1__getVersion);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ns1__getVersion, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, ns1__getVersion);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, ns1__getVersion, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns1__getVersion location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int ns1__getVersion::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_ns1__getVersion(soap, tag ? tag : "ns1:getVersion", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__getVersion::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__getVersion(soap, this, tag, type);
}

SOAP_FMAC3 ns1__getVersion * SOAP_FMAC4 soap_get_ns1__getVersion(struct soap *soap, ns1__getVersion *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__getVersion(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns1__processResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_bool(soap, &this->ns1__processResponse::return_);
	/* transient soap skipped */
}

void ns1__processResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

int ns1__processResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__processResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__processResponse(struct soap *soap, const char *tag, int id, const ns1__processResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__processResponse), type))
		return soap->error;
	if (soap_out_bool(soap, "return", -1, &a->ns1__processResponse::return_, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns1__processResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_ns1__processResponse(soap, tag, this, type);
}

SOAP_FMAC3 ns1__processResponse * SOAP_FMAC4 soap_in_ns1__processResponse(struct soap *soap, const char *tag, ns1__processResponse *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__processResponse*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__processResponse, sizeof(ns1__processResponse), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_ns1__processResponse)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (ns1__processResponse *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_return_1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_return_1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_bool(soap, "return", &a->ns1__processResponse::return_, "xsd:boolean"))
				{	soap_flag_return_1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_return_1 > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (ns1__processResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__processResponse, SOAP_TYPE_ns1__processResponse, sizeof(ns1__processResponse), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 ns1__processResponse * SOAP_FMAC2 soap_instantiate_ns1__processResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__processResponse(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	ns1__processResponse *p;
	size_t k = sizeof(ns1__processResponse);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ns1__processResponse, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, ns1__processResponse);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, ns1__processResponse, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns1__processResponse location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int ns1__processResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_ns1__processResponse(soap, tag ? tag : "ns1:processResponse", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__processResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__processResponse(soap, this, tag, type);
}

SOAP_FMAC3 ns1__processResponse * SOAP_FMAC4 soap_get_ns1__processResponse(struct soap *soap, ns1__processResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__processResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns1__photoExtra::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ns1__photoExtra::v_USCOREframe_USCOREdatetime = NULL;
	this->ns1__photoExtra::v_USCOREphoto_USCOREextra = NULL;
	this->ns1__photoExtra::v_USCOREtype_USCOREphoto = NULL;
	/* transient soap skipped */
}

void ns1__photoExtra::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTodateTime(soap, &this->ns1__photoExtra::v_USCOREframe_USCOREdatetime);
	soap_serialize_PointerToxsd__base64Binary(soap, &this->ns1__photoExtra::v_USCOREphoto_USCOREextra);
	soap_serialize_PointerTostd__string(soap, &this->ns1__photoExtra::v_USCOREtype_USCOREphoto);
#endif
}

int ns1__photoExtra::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__photoExtra(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__photoExtra(struct soap *soap, const char *tag, int id, const ns1__photoExtra *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__photoExtra), type))
		return soap->error;
	if (soap_out_PointerTodateTime(soap, "v_frame_datetime", -1, &a->ns1__photoExtra::v_USCOREframe_USCOREdatetime, ""))
		return soap->error;
	if (soap_out_PointerToxsd__base64Binary(soap, "v_photo_extra", -1, &a->ns1__photoExtra::v_USCOREphoto_USCOREextra, ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "v_type_photo", -1, &a->ns1__photoExtra::v_USCOREtype_USCOREphoto, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns1__photoExtra::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_ns1__photoExtra(soap, tag, this, type);
}

SOAP_FMAC3 ns1__photoExtra * SOAP_FMAC4 soap_in_ns1__photoExtra(struct soap *soap, const char *tag, ns1__photoExtra *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__photoExtra*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__photoExtra, sizeof(ns1__photoExtra), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_ns1__photoExtra)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (ns1__photoExtra *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_v_USCOREframe_USCOREdatetime1 = 1;
	size_t soap_flag_v_USCOREphoto_USCOREextra1 = 1;
	size_t soap_flag_v_USCOREtype_USCOREphoto1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_v_USCOREframe_USCOREdatetime1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTodateTime(soap, "v_frame_datetime", &a->ns1__photoExtra::v_USCOREframe_USCOREdatetime, "xsd:dateTime"))
				{	soap_flag_v_USCOREframe_USCOREdatetime1--;
					continue;
				}
			}
			if (soap_flag_v_USCOREphoto_USCOREextra1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerToxsd__base64Binary(soap, "v_photo_extra", &a->ns1__photoExtra::v_USCOREphoto_USCOREextra, "xsd:base64Binary"))
				{	soap_flag_v_USCOREphoto_USCOREextra1--;
					continue;
				}
			}
			if (soap_flag_v_USCOREtype_USCOREphoto1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTostd__string(soap, "v_type_photo", &a->ns1__photoExtra::v_USCOREtype_USCOREphoto, "xsd:string"))
				{	soap_flag_v_USCOREtype_USCOREphoto1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__photoExtra *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__photoExtra, SOAP_TYPE_ns1__photoExtra, sizeof(ns1__photoExtra), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 ns1__photoExtra * SOAP_FMAC2 soap_instantiate_ns1__photoExtra(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__photoExtra(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	ns1__photoExtra *p;
	size_t k = sizeof(ns1__photoExtra);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ns1__photoExtra, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, ns1__photoExtra);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, ns1__photoExtra, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns1__photoExtra location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int ns1__photoExtra::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_ns1__photoExtra(soap, tag ? tag : "ns1:photoExtra", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__photoExtra::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__photoExtra(soap, this, tag, type);
}

SOAP_FMAC3 ns1__photoExtra * SOAP_FMAC4 soap_get_ns1__photoExtra(struct soap *soap, ns1__photoExtra *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__photoExtra(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns1__trCheckIn::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_dateTime(soap, &this->ns1__trCheckIn::v_USCOREtime_USCOREcheck);
	soap_default_std__string(soap, &this->ns1__trCheckIn::v_USCOREcamera);
	this->ns1__trCheckIn::v_USCOREgps_USCOREx = NULL;
	this->ns1__trCheckIn::v_USCOREgps_USCOREy = NULL;
	this->ns1__trCheckIn::v_USCOREazimut = NULL;
	this->ns1__trCheckIn::v_USCOREdirection = NULL;
	this->ns1__trCheckIn::v_USCOREspeed_USCORElimit = NULL;
	this->ns1__trCheckIn::v_USCOREspeed = NULL;
	this->ns1__trCheckIn::v_USCOREregno_USCOREcountry_USCOREid = NULL;
	this->ns1__trCheckIn::v_USCOREregno_USCOREcolor_USCOREid = NULL;
	this->ns1__trCheckIn::v_USCORErecognition_USCOREaccuracy = NULL;
	this->ns1__trCheckIn::v_USCOREregno = NULL;
	soap_default_std__vectorTemplateOfint(soap, &this->ns1__trCheckIn::v_USCOREpr_USCOREviol);
	this->ns1__trCheckIn::v_USCOREparking_USCOREnum = NULL;
	this->ns1__trCheckIn::v_USCOREparking_USCOREzone = NULL;
	this->ns1__trCheckIn::v_USCORElane_USCOREnum = NULL;
	this->ns1__trCheckIn::v_USCOREcamera_USCOREplace = NULL;
	this->ns1__trCheckIn::v_USCOREphoto_USCOREgrz = NULL;
	this->ns1__trCheckIn::v_USCOREphoto_USCOREts = NULL;
	/* transient soap skipped */
}

void ns1__trCheckIn::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_embedded(soap, &this->ns1__trCheckIn::v_USCOREtime_USCOREcheck, SOAP_TYPE_dateTime);
	soap_embedded(soap, &this->ns1__trCheckIn::v_USCOREcamera, SOAP_TYPE_std__string);
	soap_serialize_std__string(soap, &this->ns1__trCheckIn::v_USCOREcamera);
	soap_serialize_PointerToxsd__decimal(soap, &this->ns1__trCheckIn::v_USCOREgps_USCOREx);
	soap_serialize_PointerToxsd__decimal(soap, &this->ns1__trCheckIn::v_USCOREgps_USCOREy);
	soap_serialize_PointerToxsd__decimal(soap, &this->ns1__trCheckIn::v_USCOREazimut);
	soap_serialize_PointerTostd__string(soap, &this->ns1__trCheckIn::v_USCOREdirection);
	soap_serialize_PointerToint(soap, &this->ns1__trCheckIn::v_USCOREspeed_USCORElimit);
	soap_serialize_PointerToxsd__decimal(soap, &this->ns1__trCheckIn::v_USCOREspeed);
	soap_serialize_PointerTostd__string(soap, &this->ns1__trCheckIn::v_USCOREregno_USCOREcountry_USCOREid);
	soap_serialize_PointerToint(soap, &this->ns1__trCheckIn::v_USCOREregno_USCOREcolor_USCOREid);
	soap_serialize_PointerToxsd__decimal(soap, &this->ns1__trCheckIn::v_USCORErecognition_USCOREaccuracy);
	soap_serialize_PointerTostd__string(soap, &this->ns1__trCheckIn::v_USCOREregno);
	soap_serialize_std__vectorTemplateOfint(soap, &this->ns1__trCheckIn::v_USCOREpr_USCOREviol);
	soap_serialize_PointerToint(soap, &this->ns1__trCheckIn::v_USCOREparking_USCOREnum);
	soap_serialize_PointerToint(soap, &this->ns1__trCheckIn::v_USCOREparking_USCOREzone);
	soap_serialize_PointerToint(soap, &this->ns1__trCheckIn::v_USCORElane_USCOREnum);
	soap_serialize_PointerTostd__string(soap, &this->ns1__trCheckIn::v_USCOREcamera_USCOREplace);
	soap_serialize_PointerToxsd__base64Binary(soap, &this->ns1__trCheckIn::v_USCOREphoto_USCOREgrz);
	soap_serialize_PointerToxsd__base64Binary(soap, &this->ns1__trCheckIn::v_USCOREphoto_USCOREts);
#endif
}

int ns1__trCheckIn::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__trCheckIn(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__trCheckIn(struct soap *soap, const char *tag, int id, const ns1__trCheckIn *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__trCheckIn), type))
		return soap->error;
	if (soap_out_dateTime(soap, "v_time_check", -1, &a->ns1__trCheckIn::v_USCOREtime_USCOREcheck, ""))
		return soap->error;
	if (soap_out_std__string(soap, "v_camera", -1, &a->ns1__trCheckIn::v_USCOREcamera, ""))
		return soap->error;
	if (soap_out_PointerToxsd__decimal(soap, "v_gps_x", -1, &a->ns1__trCheckIn::v_USCOREgps_USCOREx, ""))
		return soap->error;
	if (soap_out_PointerToxsd__decimal(soap, "v_gps_y", -1, &a->ns1__trCheckIn::v_USCOREgps_USCOREy, ""))
		return soap->error;
	if (soap_out_PointerToxsd__decimal(soap, "v_azimut", -1, &a->ns1__trCheckIn::v_USCOREazimut, ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "v_direction", -1, &a->ns1__trCheckIn::v_USCOREdirection, ""))
		return soap->error;
	if (soap_out_PointerToint(soap, "v_speed_limit", -1, &a->ns1__trCheckIn::v_USCOREspeed_USCORElimit, ""))
		return soap->error;
	if (soap_out_PointerToxsd__decimal(soap, "v_speed", -1, &a->ns1__trCheckIn::v_USCOREspeed, ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "v_regno_country_id", -1, &a->ns1__trCheckIn::v_USCOREregno_USCOREcountry_USCOREid, ""))
		return soap->error;
	if (soap_out_PointerToint(soap, "v_regno_color_id", -1, &a->ns1__trCheckIn::v_USCOREregno_USCOREcolor_USCOREid, ""))
		return soap->error;
	if (soap_out_PointerToxsd__decimal(soap, "v_recognition_accuracy", -1, &a->ns1__trCheckIn::v_USCORErecognition_USCOREaccuracy, ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "v_regno", -1, &a->ns1__trCheckIn::v_USCOREregno, ""))
		return soap->error;
	if (soap_out_std__vectorTemplateOfint(soap, "v_pr_viol", -1, &a->ns1__trCheckIn::v_USCOREpr_USCOREviol, ""))
		return soap->error;
	if (soap_out_PointerToint(soap, "v_parking_num", -1, &a->ns1__trCheckIn::v_USCOREparking_USCOREnum, ""))
		return soap->error;
	if (soap_out_PointerToint(soap, "v_parking_zone", -1, &a->ns1__trCheckIn::v_USCOREparking_USCOREzone, ""))
		return soap->error;
	if (soap_out_PointerToint(soap, "v_lane_num", -1, &a->ns1__trCheckIn::v_USCORElane_USCOREnum, ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "v_camera_place", -1, &a->ns1__trCheckIn::v_USCOREcamera_USCOREplace, ""))
		return soap->error;
	if (soap_out_PointerToxsd__base64Binary(soap, "v_photo_grz", -1, &a->ns1__trCheckIn::v_USCOREphoto_USCOREgrz, ""))
		return soap->error;
	if (soap_out_PointerToxsd__base64Binary(soap, "v_photo_ts", -1, &a->ns1__trCheckIn::v_USCOREphoto_USCOREts, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns1__trCheckIn::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_ns1__trCheckIn(soap, tag, this, type);
}

SOAP_FMAC3 ns1__trCheckIn * SOAP_FMAC4 soap_in_ns1__trCheckIn(struct soap *soap, const char *tag, ns1__trCheckIn *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__trCheckIn*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__trCheckIn, sizeof(ns1__trCheckIn), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_ns1__trCheckIn)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (ns1__trCheckIn *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_v_USCOREtime_USCOREcheck1 = 1;
	size_t soap_flag_v_USCOREcamera1 = 1;
	size_t soap_flag_v_USCOREgps_USCOREx1 = 1;
	size_t soap_flag_v_USCOREgps_USCOREy1 = 1;
	size_t soap_flag_v_USCOREazimut1 = 1;
	size_t soap_flag_v_USCOREdirection1 = 1;
	size_t soap_flag_v_USCOREspeed_USCORElimit1 = 1;
	size_t soap_flag_v_USCOREspeed1 = 1;
	size_t soap_flag_v_USCOREregno_USCOREcountry_USCOREid1 = 1;
	size_t soap_flag_v_USCOREregno_USCOREcolor_USCOREid1 = 1;
	size_t soap_flag_v_USCORErecognition_USCOREaccuracy1 = 1;
	size_t soap_flag_v_USCOREregno1 = 1;
	size_t soap_flag_v_USCOREparking_USCOREnum1 = 1;
	size_t soap_flag_v_USCOREparking_USCOREzone1 = 1;
	size_t soap_flag_v_USCORElane_USCOREnum1 = 1;
	size_t soap_flag_v_USCOREcamera_USCOREplace1 = 1;
	size_t soap_flag_v_USCOREphoto_USCOREgrz1 = 1;
	size_t soap_flag_v_USCOREphoto_USCOREts1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_v_USCOREtime_USCOREcheck1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_dateTime(soap, "v_time_check", &a->ns1__trCheckIn::v_USCOREtime_USCOREcheck, "xsd:dateTime"))
				{	soap_flag_v_USCOREtime_USCOREcheck1--;
					continue;
				}
			}
			if (soap_flag_v_USCOREcamera1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__string(soap, "v_camera", &a->ns1__trCheckIn::v_USCOREcamera, "xsd:string"))
				{	soap_flag_v_USCOREcamera1--;
					continue;
				}
			}
			if (soap_flag_v_USCOREgps_USCOREx1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerToxsd__decimal(soap, "v_gps_x", &a->ns1__trCheckIn::v_USCOREgps_USCOREx, "xsd:decimal"))
				{	soap_flag_v_USCOREgps_USCOREx1--;
					continue;
				}
			}
			if (soap_flag_v_USCOREgps_USCOREy1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerToxsd__decimal(soap, "v_gps_y", &a->ns1__trCheckIn::v_USCOREgps_USCOREy, "xsd:decimal"))
				{	soap_flag_v_USCOREgps_USCOREy1--;
					continue;
				}
			}
			if (soap_flag_v_USCOREazimut1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerToxsd__decimal(soap, "v_azimut", &a->ns1__trCheckIn::v_USCOREazimut, "xsd:decimal"))
				{	soap_flag_v_USCOREazimut1--;
					continue;
				}
			}
			if (soap_flag_v_USCOREdirection1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTostd__string(soap, "v_direction", &a->ns1__trCheckIn::v_USCOREdirection, "xsd:string"))
				{	soap_flag_v_USCOREdirection1--;
					continue;
				}
			}
			if (soap_flag_v_USCOREspeed_USCORElimit1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerToint(soap, "v_speed_limit", &a->ns1__trCheckIn::v_USCOREspeed_USCORElimit, "xsd:int"))
				{	soap_flag_v_USCOREspeed_USCORElimit1--;
					continue;
				}
			}
			if (soap_flag_v_USCOREspeed1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerToxsd__decimal(soap, "v_speed", &a->ns1__trCheckIn::v_USCOREspeed, "xsd:decimal"))
				{	soap_flag_v_USCOREspeed1--;
					continue;
				}
			}
			if (soap_flag_v_USCOREregno_USCOREcountry_USCOREid1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTostd__string(soap, "v_regno_country_id", &a->ns1__trCheckIn::v_USCOREregno_USCOREcountry_USCOREid, "xsd:string"))
				{	soap_flag_v_USCOREregno_USCOREcountry_USCOREid1--;
					continue;
				}
			}
			if (soap_flag_v_USCOREregno_USCOREcolor_USCOREid1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerToint(soap, "v_regno_color_id", &a->ns1__trCheckIn::v_USCOREregno_USCOREcolor_USCOREid, "xsd:int"))
				{	soap_flag_v_USCOREregno_USCOREcolor_USCOREid1--;
					continue;
				}
			}
			if (soap_flag_v_USCORErecognition_USCOREaccuracy1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerToxsd__decimal(soap, "v_recognition_accuracy", &a->ns1__trCheckIn::v_USCORErecognition_USCOREaccuracy, "xsd:decimal"))
				{	soap_flag_v_USCORErecognition_USCOREaccuracy1--;
					continue;
				}
			}
			if (soap_flag_v_USCOREregno1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTostd__string(soap, "v_regno", &a->ns1__trCheckIn::v_USCOREregno, "xsd:string"))
				{	soap_flag_v_USCOREregno1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_std__vectorTemplateOfint(soap, "v_pr_viol", &a->ns1__trCheckIn::v_USCOREpr_USCOREviol, "xsd:int"))
					continue;
			}
			if (soap_flag_v_USCOREparking_USCOREnum1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerToint(soap, "v_parking_num", &a->ns1__trCheckIn::v_USCOREparking_USCOREnum, "xsd:int"))
				{	soap_flag_v_USCOREparking_USCOREnum1--;
					continue;
				}
			}
			if (soap_flag_v_USCOREparking_USCOREzone1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerToint(soap, "v_parking_zone", &a->ns1__trCheckIn::v_USCOREparking_USCOREzone, "xsd:int"))
				{	soap_flag_v_USCOREparking_USCOREzone1--;
					continue;
				}
			}
			if (soap_flag_v_USCORElane_USCOREnum1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerToint(soap, "v_lane_num", &a->ns1__trCheckIn::v_USCORElane_USCOREnum, "xsd:int"))
				{	soap_flag_v_USCORElane_USCOREnum1--;
					continue;
				}
			}
			if (soap_flag_v_USCOREcamera_USCOREplace1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTostd__string(soap, "v_camera_place", &a->ns1__trCheckIn::v_USCOREcamera_USCOREplace, "xsd:string"))
				{	soap_flag_v_USCOREcamera_USCOREplace1--;
					continue;
				}
			}
			if (soap_flag_v_USCOREphoto_USCOREgrz1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerToxsd__base64Binary(soap, "v_photo_grz", &a->ns1__trCheckIn::v_USCOREphoto_USCOREgrz, "xsd:base64Binary"))
				{	soap_flag_v_USCOREphoto_USCOREgrz1--;
					continue;
				}
			}
			if (soap_flag_v_USCOREphoto_USCOREts1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerToxsd__base64Binary(soap, "v_photo_ts", &a->ns1__trCheckIn::v_USCOREphoto_USCOREts, "xsd:base64Binary"))
				{	soap_flag_v_USCOREphoto_USCOREts1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_v_USCOREtime_USCOREcheck1 > 0 || soap_flag_v_USCOREcamera1 > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (ns1__trCheckIn *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__trCheckIn, SOAP_TYPE_ns1__trCheckIn, sizeof(ns1__trCheckIn), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 ns1__trCheckIn * SOAP_FMAC2 soap_instantiate_ns1__trCheckIn(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__trCheckIn(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	ns1__trCheckIn *p;
	size_t k = sizeof(ns1__trCheckIn);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ns1__trCheckIn, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, ns1__trCheckIn);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, ns1__trCheckIn, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns1__trCheckIn location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int ns1__trCheckIn::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_ns1__trCheckIn(soap, tag ? tag : "ns1:trCheckIn", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__trCheckIn::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__trCheckIn(soap, this, tag, type);
}

SOAP_FMAC3 ns1__trCheckIn * SOAP_FMAC4 soap_get_ns1__trCheckIn(struct soap *soap, ns1__trCheckIn *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__trCheckIn(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns1__message::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ns1__message::tr_USCOREcheckIn = NULL;
	soap_default_std__vectorTemplateOfPointerTons1__photoExtra(soap, &this->ns1__message::photo_USCOREextra);
	/* transient soap skipped */
}

void ns1__message::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTons1__trCheckIn(soap, &this->ns1__message::tr_USCOREcheckIn);
	soap_serialize_std__vectorTemplateOfPointerTons1__photoExtra(soap, &this->ns1__message::photo_USCOREextra);
#endif
}

int ns1__message::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__message(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__message(struct soap *soap, const char *tag, int id, const ns1__message *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__message), type))
		return soap->error;
	if (!a->ns1__message::tr_USCOREcheckIn)
	{	if (soap_element_empty(soap, "tr_checkIn"))
			return soap->error;
	}
	else
	if (soap_out_PointerTons1__trCheckIn(soap, "tr_checkIn", -1, &a->ns1__message::tr_USCOREcheckIn, ""))
		return soap->error;
	if (soap_out_std__vectorTemplateOfPointerTons1__photoExtra(soap, "photo_extra", -1, &a->ns1__message::photo_USCOREextra, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns1__message::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_ns1__message(soap, tag, this, type);
}

SOAP_FMAC3 ns1__message * SOAP_FMAC4 soap_in_ns1__message(struct soap *soap, const char *tag, ns1__message *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__message*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__message, sizeof(ns1__message), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_ns1__message)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (ns1__message *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_tr_USCOREcheckIn1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_tr_USCOREcheckIn1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTons1__trCheckIn(soap, "tr_checkIn", &a->ns1__message::tr_USCOREcheckIn, "ns1:trCheckIn"))
				{	soap_flag_tr_USCOREcheckIn1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_std__vectorTemplateOfPointerTons1__photoExtra(soap, "photo_extra", &a->ns1__message::photo_USCOREextra, "ns1:photoExtra"))
					continue;
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (!a->ns1__message::tr_USCOREcheckIn))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (ns1__message *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__message, SOAP_TYPE_ns1__message, sizeof(ns1__message), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 ns1__message * SOAP_FMAC2 soap_instantiate_ns1__message(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__message(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	ns1__message *p;
	size_t k = sizeof(ns1__message);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ns1__message, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, ns1__message);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, ns1__message, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns1__message location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int ns1__message::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_ns1__message(soap, tag ? tag : "ns1:message", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__message::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__message(soap, this, tag, type);
}

SOAP_FMAC3 ns1__message * SOAP_FMAC4 soap_get_ns1__message(struct soap *soap, ns1__message *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__message(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns1__process::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ns1__process::message = NULL;
	/* transient soap skipped */
}

void ns1__process::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTons1__message(soap, &this->ns1__process::message);
#endif
}

int ns1__process::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__process(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__process(struct soap *soap, const char *tag, int id, const ns1__process *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__process), type))
		return soap->error;
	if (soap_out_PointerTons1__message(soap, "message", -1, &a->ns1__process::message, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns1__process::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_ns1__process(soap, tag, this, type);
}

SOAP_FMAC3 ns1__process * SOAP_FMAC4 soap_in_ns1__process(struct soap *soap, const char *tag, ns1__process *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__process*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__process, sizeof(ns1__process), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_ns1__process)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (ns1__process *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_message1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_message1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTons1__message(soap, "message", &a->ns1__process::message, "ns1:message"))
				{	soap_flag_message1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__process *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__process, SOAP_TYPE_ns1__process, sizeof(ns1__process), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 ns1__process * SOAP_FMAC2 soap_instantiate_ns1__process(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__process(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	ns1__process *p;
	size_t k = sizeof(ns1__process);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ns1__process, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, ns1__process);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, ns1__process, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns1__process location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int ns1__process::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_ns1__process(soap, tag ? tag : "ns1:process", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__process::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__process(soap, this, tag, type);
}

SOAP_FMAC3 ns1__process * SOAP_FMAC4 soap_get_ns1__process(struct soap *soap, ns1__process *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__process(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns1__duploFault::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ns1__duploFault::faultCode = NULL;
	this->ns1__duploFault::faultMessage = NULL;
	/* transient soap skipped */
}

void ns1__duploFault::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__string(soap, &this->ns1__duploFault::faultCode);
	soap_serialize_PointerTostd__string(soap, &this->ns1__duploFault::faultMessage);
#endif
}

int ns1__duploFault::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__duploFault(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__duploFault(struct soap *soap, const char *tag, int id, const ns1__duploFault *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__duploFault), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "faultCode", -1, &a->ns1__duploFault::faultCode, ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "faultMessage", -1, &a->ns1__duploFault::faultMessage, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns1__duploFault::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_ns1__duploFault(soap, tag, this, type);
}

SOAP_FMAC3 ns1__duploFault * SOAP_FMAC4 soap_in_ns1__duploFault(struct soap *soap, const char *tag, ns1__duploFault *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__duploFault*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__duploFault, sizeof(ns1__duploFault), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_ns1__duploFault)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (ns1__duploFault *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_faultCode1 = 1;
	size_t soap_flag_faultMessage1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_faultCode1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTostd__string(soap, "faultCode", &a->ns1__duploFault::faultCode, "xsd:string"))
				{	soap_flag_faultCode1--;
					continue;
				}
			}
			if (soap_flag_faultMessage1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTostd__string(soap, "faultMessage", &a->ns1__duploFault::faultMessage, "xsd:string"))
				{	soap_flag_faultMessage1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__duploFault *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__duploFault, SOAP_TYPE_ns1__duploFault, sizeof(ns1__duploFault), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 ns1__duploFault * SOAP_FMAC2 soap_instantiate_ns1__duploFault(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__duploFault(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	ns1__duploFault *p;
	size_t k = sizeof(ns1__duploFault);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ns1__duploFault, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, ns1__duploFault);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, ns1__duploFault, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns1__duploFault location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int ns1__duploFault::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_ns1__duploFault(soap, tag ? tag : "ns1:duploFault", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__duploFault::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__duploFault(soap, this, tag, type);
}

SOAP_FMAC3 ns1__duploFault * SOAP_FMAC4 soap_get_ns1__duploFault(struct soap *soap, ns1__duploFault *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__duploFault(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns1__cameraInfo::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ns1__cameraInfo::azimut = NULL;
	this->ns1__cameraInfo::camera = NULL;
	this->ns1__cameraInfo::camera_USCOREid = NULL;
	this->ns1__cameraInfo::camera_USCOREmodel = NULL;
	this->ns1__cameraInfo::camera_USCOREplace = NULL;
	this->ns1__cameraInfo::gps_USCOREx = NULL;
	this->ns1__cameraInfo::gps_USCOREy = NULL;
	this->ns1__cameraInfo::lane_USCOREnum = NULL;
	this->ns1__cameraInfo::p_USCOREnode = NULL;
	this->ns1__cameraInfo::print_USCOREname = NULL;
	this->ns1__cameraInfo::priz_USCOREarh = NULL;
	this->ns1__cameraInfo::serial_USCOREno = NULL;
	this->ns1__cameraInfo::type = NULL;
	this->ns1__cameraInfo::v_USCOREclass = NULL;
	/* transient soap skipped */
}

void ns1__cameraInfo::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerToxsd__decimal(soap, &this->ns1__cameraInfo::azimut);
	soap_serialize_PointerTostd__string(soap, &this->ns1__cameraInfo::camera);
	soap_serialize_PointerToint(soap, &this->ns1__cameraInfo::camera_USCOREid);
	soap_serialize_PointerTostd__string(soap, &this->ns1__cameraInfo::camera_USCOREmodel);
	soap_serialize_PointerTostd__string(soap, &this->ns1__cameraInfo::camera_USCOREplace);
	soap_serialize_PointerToxsd__decimal(soap, &this->ns1__cameraInfo::gps_USCOREx);
	soap_serialize_PointerToxsd__decimal(soap, &this->ns1__cameraInfo::gps_USCOREy);
	soap_serialize_PointerToint(soap, &this->ns1__cameraInfo::lane_USCOREnum);
	soap_serialize_PointerToint(soap, &this->ns1__cameraInfo::p_USCOREnode);
	soap_serialize_PointerTostd__string(soap, &this->ns1__cameraInfo::print_USCOREname);
	soap_serialize_PointerTostd__string(soap, &this->ns1__cameraInfo::priz_USCOREarh);
	soap_serialize_PointerTostd__string(soap, &this->ns1__cameraInfo::serial_USCOREno);
	soap_serialize_PointerTostd__string(soap, &this->ns1__cameraInfo::type);
	soap_serialize_PointerTostd__string(soap, &this->ns1__cameraInfo::v_USCOREclass);
#endif
}

int ns1__cameraInfo::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__cameraInfo(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__cameraInfo(struct soap *soap, const char *tag, int id, const ns1__cameraInfo *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__cameraInfo), type))
		return soap->error;
	if (soap_out_PointerToxsd__decimal(soap, "azimut", -1, &a->ns1__cameraInfo::azimut, ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "camera", -1, &a->ns1__cameraInfo::camera, ""))
		return soap->error;
	if (soap_out_PointerToint(soap, "camera_id", -1, &a->ns1__cameraInfo::camera_USCOREid, ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "camera_model", -1, &a->ns1__cameraInfo::camera_USCOREmodel, ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "camera_place", -1, &a->ns1__cameraInfo::camera_USCOREplace, ""))
		return soap->error;
	if (soap_out_PointerToxsd__decimal(soap, "gps_x", -1, &a->ns1__cameraInfo::gps_USCOREx, ""))
		return soap->error;
	if (soap_out_PointerToxsd__decimal(soap, "gps_y", -1, &a->ns1__cameraInfo::gps_USCOREy, ""))
		return soap->error;
	if (soap_out_PointerToint(soap, "lane_num", -1, &a->ns1__cameraInfo::lane_USCOREnum, ""))
		return soap->error;
	if (soap_out_PointerToint(soap, "p_node", -1, &a->ns1__cameraInfo::p_USCOREnode, ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "print_name", -1, &a->ns1__cameraInfo::print_USCOREname, ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "priz_arh", -1, &a->ns1__cameraInfo::priz_USCOREarh, ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "serial_no", -1, &a->ns1__cameraInfo::serial_USCOREno, ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "type", -1, &a->ns1__cameraInfo::type, ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "v_class", -1, &a->ns1__cameraInfo::v_USCOREclass, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns1__cameraInfo::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_ns1__cameraInfo(soap, tag, this, type);
}

SOAP_FMAC3 ns1__cameraInfo * SOAP_FMAC4 soap_in_ns1__cameraInfo(struct soap *soap, const char *tag, ns1__cameraInfo *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__cameraInfo*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__cameraInfo, sizeof(ns1__cameraInfo), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_ns1__cameraInfo)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (ns1__cameraInfo *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_azimut1 = 1;
	size_t soap_flag_camera1 = 1;
	size_t soap_flag_camera_USCOREid1 = 1;
	size_t soap_flag_camera_USCOREmodel1 = 1;
	size_t soap_flag_camera_USCOREplace1 = 1;
	size_t soap_flag_gps_USCOREx1 = 1;
	size_t soap_flag_gps_USCOREy1 = 1;
	size_t soap_flag_lane_USCOREnum1 = 1;
	size_t soap_flag_p_USCOREnode1 = 1;
	size_t soap_flag_print_USCOREname1 = 1;
	size_t soap_flag_priz_USCOREarh1 = 1;
	size_t soap_flag_serial_USCOREno1 = 1;
	size_t soap_flag_type1 = 1;
	size_t soap_flag_v_USCOREclass1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_azimut1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerToxsd__decimal(soap, "azimut", &a->ns1__cameraInfo::azimut, "xsd:decimal"))
				{	soap_flag_azimut1--;
					continue;
				}
			}
			if (soap_flag_camera1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTostd__string(soap, "camera", &a->ns1__cameraInfo::camera, "xsd:string"))
				{	soap_flag_camera1--;
					continue;
				}
			}
			if (soap_flag_camera_USCOREid1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerToint(soap, "camera_id", &a->ns1__cameraInfo::camera_USCOREid, "xsd:int"))
				{	soap_flag_camera_USCOREid1--;
					continue;
				}
			}
			if (soap_flag_camera_USCOREmodel1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTostd__string(soap, "camera_model", &a->ns1__cameraInfo::camera_USCOREmodel, "xsd:string"))
				{	soap_flag_camera_USCOREmodel1--;
					continue;
				}
			}
			if (soap_flag_camera_USCOREplace1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTostd__string(soap, "camera_place", &a->ns1__cameraInfo::camera_USCOREplace, "xsd:string"))
				{	soap_flag_camera_USCOREplace1--;
					continue;
				}
			}
			if (soap_flag_gps_USCOREx1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerToxsd__decimal(soap, "gps_x", &a->ns1__cameraInfo::gps_USCOREx, "xsd:decimal"))
				{	soap_flag_gps_USCOREx1--;
					continue;
				}
			}
			if (soap_flag_gps_USCOREy1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerToxsd__decimal(soap, "gps_y", &a->ns1__cameraInfo::gps_USCOREy, "xsd:decimal"))
				{	soap_flag_gps_USCOREy1--;
					continue;
				}
			}
			if (soap_flag_lane_USCOREnum1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerToint(soap, "lane_num", &a->ns1__cameraInfo::lane_USCOREnum, "xsd:int"))
				{	soap_flag_lane_USCOREnum1--;
					continue;
				}
			}
			if (soap_flag_p_USCOREnode1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerToint(soap, "p_node", &a->ns1__cameraInfo::p_USCOREnode, "xsd:int"))
				{	soap_flag_p_USCOREnode1--;
					continue;
				}
			}
			if (soap_flag_print_USCOREname1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTostd__string(soap, "print_name", &a->ns1__cameraInfo::print_USCOREname, "xsd:string"))
				{	soap_flag_print_USCOREname1--;
					continue;
				}
			}
			if (soap_flag_priz_USCOREarh1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTostd__string(soap, "priz_arh", &a->ns1__cameraInfo::priz_USCOREarh, "xsd:string"))
				{	soap_flag_priz_USCOREarh1--;
					continue;
				}
			}
			if (soap_flag_serial_USCOREno1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTostd__string(soap, "serial_no", &a->ns1__cameraInfo::serial_USCOREno, "xsd:string"))
				{	soap_flag_serial_USCOREno1--;
					continue;
				}
			}
			if (soap_flag_type1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTostd__string(soap, "type", &a->ns1__cameraInfo::type, "xsd:string"))
				{	soap_flag_type1--;
					continue;
				}
			}
			if (soap_flag_v_USCOREclass1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTostd__string(soap, "v_class", &a->ns1__cameraInfo::v_USCOREclass, "xsd:string"))
				{	soap_flag_v_USCOREclass1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__cameraInfo *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__cameraInfo, SOAP_TYPE_ns1__cameraInfo, sizeof(ns1__cameraInfo), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 ns1__cameraInfo * SOAP_FMAC2 soap_instantiate_ns1__cameraInfo(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__cameraInfo(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	ns1__cameraInfo *p;
	size_t k = sizeof(ns1__cameraInfo);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ns1__cameraInfo, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, ns1__cameraInfo);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, ns1__cameraInfo, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns1__cameraInfo location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int ns1__cameraInfo::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_ns1__cameraInfo(soap, tag ? tag : "ns1:cameraInfo", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__cameraInfo::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__cameraInfo(soap, this, tag, type);
}

SOAP_FMAC3 ns1__cameraInfo * SOAP_FMAC4 soap_get_ns1__cameraInfo(struct soap *soap, ns1__cameraInfo *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__cameraInfo(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns1__processGetInfoResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ns1__processGetInfoResponse::return_ = NULL;
	/* transient soap skipped */
}

void ns1__processGetInfoResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTons1__cameraInfo(soap, &this->ns1__processGetInfoResponse::return_);
#endif
}

int ns1__processGetInfoResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__processGetInfoResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__processGetInfoResponse(struct soap *soap, const char *tag, int id, const ns1__processGetInfoResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__processGetInfoResponse), type))
		return soap->error;
	if (soap_out_PointerTons1__cameraInfo(soap, "return", -1, &a->ns1__processGetInfoResponse::return_, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns1__processGetInfoResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_ns1__processGetInfoResponse(soap, tag, this, type);
}

SOAP_FMAC3 ns1__processGetInfoResponse * SOAP_FMAC4 soap_in_ns1__processGetInfoResponse(struct soap *soap, const char *tag, ns1__processGetInfoResponse *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__processGetInfoResponse*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__processGetInfoResponse, sizeof(ns1__processGetInfoResponse), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_ns1__processGetInfoResponse)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (ns1__processGetInfoResponse *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_return_1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_return_1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTons1__cameraInfo(soap, "return", &a->ns1__processGetInfoResponse::return_, "ns1:cameraInfo"))
				{	soap_flag_return_1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__processGetInfoResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__processGetInfoResponse, SOAP_TYPE_ns1__processGetInfoResponse, sizeof(ns1__processGetInfoResponse), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 ns1__processGetInfoResponse * SOAP_FMAC2 soap_instantiate_ns1__processGetInfoResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__processGetInfoResponse(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	ns1__processGetInfoResponse *p;
	size_t k = sizeof(ns1__processGetInfoResponse);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ns1__processGetInfoResponse, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, ns1__processGetInfoResponse);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, ns1__processGetInfoResponse, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns1__processGetInfoResponse location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int ns1__processGetInfoResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_ns1__processGetInfoResponse(soap, tag ? tag : "ns1:processGetInfoResponse", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__processGetInfoResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__processGetInfoResponse(soap, this, tag, type);
}

SOAP_FMAC3 ns1__processGetInfoResponse * SOAP_FMAC4 soap_get_ns1__processGetInfoResponse(struct soap *soap, ns1__processGetInfoResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__processGetInfoResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns1__processGetInfo::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ns1__processGetInfo::camera = NULL;
	/* transient soap skipped */
}

void ns1__processGetInfo::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__string(soap, &this->ns1__processGetInfo::camera);
#endif
}

int ns1__processGetInfo::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__processGetInfo(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__processGetInfo(struct soap *soap, const char *tag, int id, const ns1__processGetInfo *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__processGetInfo), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "camera", -1, &a->ns1__processGetInfo::camera, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns1__processGetInfo::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_ns1__processGetInfo(soap, tag, this, type);
}

SOAP_FMAC3 ns1__processGetInfo * SOAP_FMAC4 soap_in_ns1__processGetInfo(struct soap *soap, const char *tag, ns1__processGetInfo *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__processGetInfo*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__processGetInfo, sizeof(ns1__processGetInfo), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_ns1__processGetInfo)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (ns1__processGetInfo *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_camera1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_camera1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTostd__string(soap, "camera", &a->ns1__processGetInfo::camera, "xsd:string"))
				{	soap_flag_camera1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__processGetInfo *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__processGetInfo, SOAP_TYPE_ns1__processGetInfo, sizeof(ns1__processGetInfo), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 ns1__processGetInfo * SOAP_FMAC2 soap_instantiate_ns1__processGetInfo(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__processGetInfo(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	ns1__processGetInfo *p;
	size_t k = sizeof(ns1__processGetInfo);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ns1__processGetInfo, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, ns1__processGetInfo);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, ns1__processGetInfo, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns1__processGetInfo location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int ns1__processGetInfo::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_ns1__processGetInfo(soap, tag ? tag : "ns1:processGetInfo", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__processGetInfo::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__processGetInfo(soap, this, tag, type);
}

SOAP_FMAC3 ns1__processGetInfo * SOAP_FMAC4 soap_get_ns1__processGetInfo(struct soap *soap, ns1__processGetInfo *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__processGetInfo(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__decimal(struct soap *soap, const std::string *a)
{	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__decimal(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_xsd__decimal), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__decimal(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && *soap->href != '#')
	{	char *t;
		s = (std::string*)soap_id_enter(soap, soap->id, s, SOAP_TYPE_xsd__decimal, sizeof(std::string), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
		if (s)
		{	if (!(t = soap_string_in(soap, 5, 0, -1, "[-+]?(\\d+|\\d*\\.\\d*)")))
				return NULL;
			s->assign(t);
		}
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_id_enter(soap, soap->id, s, SOAP_TYPE_xsd__decimal, sizeof(std::string), soap->type, soap->arrayType, soap_instantiate, soap_fbase), 0, SOAP_TYPE_xsd__decimal, SOAP_TYPE_xsd__decimal, sizeof(std::string), 0, soap_finsert, NULL);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__decimal(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	if (soap_out_xsd__decimal(soap, tag ? tag : "xsd:decimal", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__decimal(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__decimal(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__string(struct soap *soap, const std::string *a)
{	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__string(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_std__string), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_std__string(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && *soap->href != '#')
	{	char *t;
		s = (std::string*)soap_id_enter(soap, soap->id, s, SOAP_TYPE_std__string, sizeof(std::string), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
		if (s)
		{	if (!(t = soap_string_in(soap, 1, 0, -1, NULL)))
				return NULL;
			s->assign(t);
		}
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_id_enter(soap, soap->id, s, SOAP_TYPE_std__string, sizeof(std::string), soap->type, soap->arrayType, soap_instantiate, soap_fbase), 0, SOAP_TYPE_std__string, SOAP_TYPE_std__string, sizeof(std::string), 0, soap_finsert, NULL);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC1 std::string * SOAP_FMAC2 soap_instantiate_std__string(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__string(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	std::string *p;
	size_t k = sizeof(std::string);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_std__string, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, std::string);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, std::string, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated std::string location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_std__string(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	if (soap_out_std__string(soap, tag ? tag : "string", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_std__string(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_std__string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void xsd__base64Binary::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	this->__ptr = NULL;
	this->__size = 0;
	this->id = NULL;
	this->type = NULL;
	this->options = NULL;
}

void xsd__base64Binary::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (this->__ptr)
		(void)soap_attachment_reference(soap, this, this->__ptr, this->__size, SOAP_TYPE_xsd__base64Binary, this->id, this->type);
#endif
}

SOAP_FMAC3S const char* SOAP_FMAC4S soap_xsd__base64Binary2s(struct soap *soap, xsd__base64Binary a)
{
	return soap_s2base64(soap, a.__ptr, NULL, a.__size);
}

int xsd__base64Binary::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_xsd__base64Binary(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__base64Binary(struct soap *soap, const char *tag, int id, const xsd__base64Binary *a, const char *type)
{
#ifndef WITH_LEANER
	id = soap_attachment(soap, tag, id, a, a->__ptr, a->__size, a->id, a->type, a->options, type, SOAP_TYPE_xsd__base64Binary);
#else
	id = soap_element_id(soap, tag, id, a, a->__ptr, a->__size, type, SOAP_TYPE_xsd__base64Binary, NULL);
#endif
	if (id < 0)
		return soap->error;
	if (soap_element_begin_out(soap, tag, id, type))
		return soap->error;
	if (soap_putbase64(soap, a->__ptr, a->__size))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2xsd__base64Binary(struct soap *soap, const char *s, xsd__base64Binary *a)
{
	a->__ptr = (unsigned char*)soap_base642s(soap, s, NULL, 0, &a->__size);
	if (!a->__ptr)
		return soap->error;
	return SOAP_OK;
}

void *xsd__base64Binary::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_xsd__base64Binary(soap, tag, this, type);
}

SOAP_FMAC3 xsd__base64Binary * SOAP_FMAC4 soap_in_xsd__base64Binary(struct soap *soap, const char *tag, xsd__base64Binary *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type) && soap_match_tag(soap, soap->type, ":base64Binary") && soap_match_tag(soap, soap->type, ":base64"))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (xsd__base64Binary*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_xsd__base64Binary, sizeof(xsd__base64Binary), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	a->soap_default(soap);
	if (soap->body && !*soap->href)
	{
		a->__ptr = soap_getbase64(soap, &a->__size, 0);
#ifndef WITH_LEANER
		if (soap_xop_forward(soap, &a->__ptr, &a->__size, &a->id, &a->type, &a->options))
			return NULL;
#endif
		if ((!a->__ptr && soap->error) || soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	
#ifndef WITH_LEANER
		if (*soap->href != '#')
		{	if (soap_attachment_forward(soap, &a->__ptr, &a->__size, &a->id, &a->type, &a->options))
				return NULL;
		}
		else
#endif
			a = (xsd__base64Binary *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_xsd__base64Binary, SOAP_TYPE_xsd__base64Binary, sizeof(xsd__base64Binary), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 xsd__base64Binary * SOAP_FMAC2 soap_instantiate_xsd__base64Binary(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__base64Binary(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	xsd__base64Binary *p;
	size_t k = sizeof(xsd__base64Binary);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_xsd__base64Binary, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, xsd__base64Binary);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, xsd__base64Binary, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated xsd__base64Binary location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int xsd__base64Binary::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_xsd__base64Binary(soap, tag ? tag : "xsd:base64Binary", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *xsd__base64Binary::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__base64Binary(soap, this, tag, type);
}

SOAP_FMAC3 xsd__base64Binary * SOAP_FMAC4 soap_get_xsd__base64Binary(struct soap *soap, xsd__base64Binary *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__base64Binary(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->faultcode);
	soap_default_string(soap, &a->faultstring);
	soap_default_string(soap, &a->faultactor);
	a->detail = NULL;
	a->SOAP_ENV__Code = NULL;
	a->SOAP_ENV__Reason = NULL;
	soap_default_string(soap, &a->SOAP_ENV__Node);
	soap_default_string(soap, &a->SOAP_ENV__Role);
	a->SOAP_ENV__Detail = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize__QName(soap, (char*const*)&a->faultcode);
	soap_serialize_string(soap, (char*const*)&a->faultstring);
	soap_serialize_string(soap, (char*const*)&a->faultactor);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->detail);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Code);
	soap_serialize_PointerToSOAP_ENV__Reason(soap, &a->SOAP_ENV__Reason);
	soap_serialize_string(soap, (char*const*)&a->SOAP_ENV__Node);
	soap_serialize_string(soap, (char*const*)&a->SOAP_ENV__Role);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->SOAP_ENV__Detail);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Fault *a, const char *type)
{
	const char *soap_tmp_faultcode = soap_QName2s(soap, a->faultcode);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Fault), type))
		return soap->error;
	if (soap_out__QName(soap, "faultcode", -1, (char*const*)(void*)&soap_tmp_faultcode, ""))
		return soap->error;
	if (soap_out_string(soap, "faultstring", -1, (char*const*)&a->faultstring, ""))
		return soap->error;
	if (soap_out_string(soap, "faultactor", -1, (char*const*)&a->faultactor, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "detail", -1, &a->detail, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", -1, &a->SOAP_ENV__Code, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", -1, &a->SOAP_ENV__Reason, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Node", -1, (char*const*)&a->SOAP_ENV__Node, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Role", -1, (char*const*)&a->SOAP_ENV__Role, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", -1, &a->SOAP_ENV__Detail, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap *soap, const char *tag, struct SOAP_ENV__Fault *a, const char *type)
{
	size_t soap_flag_faultcode = 1;
	size_t soap_flag_faultstring = 1;
	size_t soap_flag_faultactor = 1;
	size_t soap_flag_detail = 1;
	size_t soap_flag_SOAP_ENV__Code = 1;
	size_t soap_flag_SOAP_ENV__Reason = 1;
	size_t soap_flag_SOAP_ENV__Node = 1;
	size_t soap_flag_SOAP_ENV__Role = 1;
	size_t soap_flag_SOAP_ENV__Detail = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Fault*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Fault, sizeof(struct SOAP_ENV__Fault), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Fault(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_faultcode && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in__QName(soap, "faultcode", (char**)&a->faultcode, "xsd:QName"))
				{	soap_flag_faultcode--;
					continue;
				}
			}
			if (soap_flag_faultstring && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "faultstring", (char**)&a->faultstring, "xsd:string"))
				{	soap_flag_faultstring--;
					continue;
				}
			}
			if (soap_flag_faultactor && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "faultactor", (char**)&a->faultactor, "xsd:string"))
				{	soap_flag_faultactor--;
					continue;
				}
			}
			if (soap_flag_detail && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerToSOAP_ENV__Detail(soap, "detail", &a->detail, ""))
				{	soap_flag_detail--;
					continue;
				}
			}
			if (soap_flag_SOAP_ENV__Code && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", &a->SOAP_ENV__Code, ""))
				{	soap_flag_SOAP_ENV__Code--;
					continue;
				}
			}
			if (soap_flag_SOAP_ENV__Reason && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", &a->SOAP_ENV__Reason, ""))
				{	soap_flag_SOAP_ENV__Reason--;
					continue;
				}
			}
			if (soap_flag_SOAP_ENV__Node && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "SOAP-ENV:Node", (char**)&a->SOAP_ENV__Node, "xsd:string"))
				{	soap_flag_SOAP_ENV__Node--;
					continue;
				}
			}
			if (soap_flag_SOAP_ENV__Role && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "SOAP-ENV:Role", (char**)&a->SOAP_ENV__Role, "xsd:string"))
				{	soap_flag_SOAP_ENV__Role--;
					continue;
				}
			}
			if (soap_flag_SOAP_ENV__Detail && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", &a->SOAP_ENV__Detail, ""))
				{	soap_flag_SOAP_ENV__Detail--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Fault *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Fault, SOAP_TYPE_SOAP_ENV__Fault, sizeof(struct SOAP_ENV__Fault), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Fault(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct SOAP_ENV__Fault *p;
	size_t k = sizeof(struct SOAP_ENV__Fault);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_SOAP_ENV__Fault, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct SOAP_ENV__Fault);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct SOAP_ENV__Fault, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct SOAP_ENV__Fault location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a, const char *tag, const char *type)
{
	if (soap_out_SOAP_ENV__Fault(soap, tag ? tag : "SOAP-ENV:Fault", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Fault(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->SOAP_ENV__Text);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_string(soap, (char*const*)&a->SOAP_ENV__Text);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Reason *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Reason), type))
		return soap->error;
	if (soap->lang)
		soap_set_attr(soap, "xml:lang", soap->lang, 1);
	if (soap_out_string(soap, "SOAP-ENV:Text", -1, (char*const*)&a->SOAP_ENV__Text, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Text = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Reason*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Reason(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Text && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "SOAP-ENV:Text", (char**)&a->SOAP_ENV__Text, "xsd:string"))
				{	soap_flag_SOAP_ENV__Text--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Reason, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Reason(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct SOAP_ENV__Reason *p;
	size_t k = sizeof(struct SOAP_ENV__Reason);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_SOAP_ENV__Reason, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct SOAP_ENV__Reason);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct SOAP_ENV__Reason, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct SOAP_ENV__Reason location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a, const char *tag, const char *type)
{
	if (soap_out_SOAP_ENV__Reason(soap, tag ? tag : "SOAP-ENV:Reason", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->SOAP_ENV__Value);
	a->SOAP_ENV__Subcode = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize__QName(soap, (char*const*)&a->SOAP_ENV__Value);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Subcode);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Code *a, const char *type)
{
	const char *soap_tmp_SOAP_ENV__Value = soap_QName2s(soap, a->SOAP_ENV__Value);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Code), type))
		return soap->error;
	if (soap_out__QName(soap, "SOAP-ENV:Value", -1, (char*const*)(void*)&soap_tmp_SOAP_ENV__Value, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", -1, &a->SOAP_ENV__Subcode, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Value = 1;
	size_t soap_flag_SOAP_ENV__Subcode = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Code*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Code(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Value && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in__QName(soap, "SOAP-ENV:Value", (char**)&a->SOAP_ENV__Value, "xsd:QName"))
				{	soap_flag_SOAP_ENV__Value--;
					continue;
				}
			}
			if (soap_flag_SOAP_ENV__Subcode && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", &a->SOAP_ENV__Subcode, ""))
				{	soap_flag_SOAP_ENV__Subcode--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Code, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Code(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct SOAP_ENV__Code *p;
	size_t k = sizeof(struct SOAP_ENV__Code);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_SOAP_ENV__Code, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct SOAP_ENV__Code);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct SOAP_ENV__Code, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct SOAP_ENV__Code location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a, const char *tag, const char *type)
{
	if (soap_out_SOAP_ENV__Code(soap, tag ? tag : "SOAP-ENV:Code", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Header *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Header), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap *soap, const char *tag, struct SOAP_ENV__Header *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Header*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Header, sizeof(struct SOAP_ENV__Header), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Header(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Header *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Header, SOAP_TYPE_SOAP_ENV__Header, sizeof(struct SOAP_ENV__Header), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Header(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct SOAP_ENV__Header *p;
	size_t k = sizeof(struct SOAP_ENV__Header);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_SOAP_ENV__Header, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct SOAP_ENV__Header);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct SOAP_ENV__Header, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct SOAP_ENV__Header location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a, const char *tag, const char *type)
{
	if (soap_out_SOAP_ENV__Header(soap, tag ? tag : "SOAP-ENV:Header", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Header(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__getVersion(struct soap *soap, struct __ns1__getVersion *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__getVersion_ = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__getVersion(struct soap *soap, const struct __ns1__getVersion *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTons1__getVersion(soap, &a->ns1__getVersion_);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__getVersion(struct soap *soap, const char *tag, int id, const struct __ns1__getVersion *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTons1__getVersion(soap, "ns1:getVersion", -1, &a->ns1__getVersion_, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__getVersion * SOAP_FMAC4 soap_in___ns1__getVersion(struct soap *soap, const char *tag, struct __ns1__getVersion *a, const char *type)
{
	size_t soap_flag_ns1__getVersion_ = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__getVersion*)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__getVersion, sizeof(struct __ns1__getVersion), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__getVersion(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__getVersion_ && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTons1__getVersion(soap, "ns1:getVersion", &a->ns1__getVersion_, "ns1:getVersion"))
				{	soap_flag_ns1__getVersion_--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH && soap_flag)
			{	soap->error = SOAP_OK;
				break;
			}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC1 struct __ns1__getVersion * SOAP_FMAC2 soap_instantiate___ns1__getVersion(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__getVersion(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct __ns1__getVersion *p;
	size_t k = sizeof(struct __ns1__getVersion);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE___ns1__getVersion, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct __ns1__getVersion);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct __ns1__getVersion, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct __ns1__getVersion location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__getVersion(struct soap *soap, const struct __ns1__getVersion *a, const char *tag, const char *type)
{
	if (soap_out___ns1__getVersion(soap, tag ? tag : "-ns1:getVersion", -2, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__getVersion * SOAP_FMAC4 soap_get___ns1__getVersion(struct soap *soap, struct __ns1__getVersion *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__getVersion(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__processGetInfo(struct soap *soap, struct __ns1__processGetInfo *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__processGetInfo_ = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__processGetInfo(struct soap *soap, const struct __ns1__processGetInfo *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTons1__processGetInfo(soap, &a->ns1__processGetInfo_);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__processGetInfo(struct soap *soap, const char *tag, int id, const struct __ns1__processGetInfo *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTons1__processGetInfo(soap, "ns1:processGetInfo", -1, &a->ns1__processGetInfo_, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__processGetInfo * SOAP_FMAC4 soap_in___ns1__processGetInfo(struct soap *soap, const char *tag, struct __ns1__processGetInfo *a, const char *type)
{
	size_t soap_flag_ns1__processGetInfo_ = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__processGetInfo*)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__processGetInfo, sizeof(struct __ns1__processGetInfo), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__processGetInfo(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__processGetInfo_ && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTons1__processGetInfo(soap, "ns1:processGetInfo", &a->ns1__processGetInfo_, "ns1:processGetInfo"))
				{	soap_flag_ns1__processGetInfo_--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH && soap_flag)
			{	soap->error = SOAP_OK;
				break;
			}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC1 struct __ns1__processGetInfo * SOAP_FMAC2 soap_instantiate___ns1__processGetInfo(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__processGetInfo(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct __ns1__processGetInfo *p;
	size_t k = sizeof(struct __ns1__processGetInfo);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE___ns1__processGetInfo, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct __ns1__processGetInfo);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct __ns1__processGetInfo, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct __ns1__processGetInfo location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__processGetInfo(struct soap *soap, const struct __ns1__processGetInfo *a, const char *tag, const char *type)
{
	if (soap_out___ns1__processGetInfo(soap, tag ? tag : "-ns1:processGetInfo", -2, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__processGetInfo * SOAP_FMAC4 soap_get___ns1__processGetInfo(struct soap *soap, struct __ns1__processGetInfo *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__processGetInfo(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__process(struct soap *soap, struct __ns1__process *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__process_ = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__process(struct soap *soap, const struct __ns1__process *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTons1__process(soap, &a->ns1__process_);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__process(struct soap *soap, const char *tag, int id, const struct __ns1__process *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTons1__process(soap, "ns1:process", -1, &a->ns1__process_, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__process * SOAP_FMAC4 soap_in___ns1__process(struct soap *soap, const char *tag, struct __ns1__process *a, const char *type)
{
	size_t soap_flag_ns1__process_ = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__process*)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__process, sizeof(struct __ns1__process), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__process(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__process_ && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTons1__process(soap, "ns1:process", &a->ns1__process_, "ns1:process"))
				{	soap_flag_ns1__process_--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH && soap_flag)
			{	soap->error = SOAP_OK;
				break;
			}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC1 struct __ns1__process * SOAP_FMAC2 soap_instantiate___ns1__process(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__process(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct __ns1__process *p;
	size_t k = sizeof(struct __ns1__process);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE___ns1__process, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct __ns1__process);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct __ns1__process, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct __ns1__process location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__process(struct soap *soap, const struct __ns1__process *a, const char *tag, const char *type)
{
	if (soap_out___ns1__process(soap, tag ? tag : "-ns1:process", -2, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__process * SOAP_FMAC4 soap_get___ns1__process(struct soap *soap, struct __ns1__process *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__process(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__DuploFault = NULL;
	a->__type = 0;
	a->fault = NULL;
	a->__any = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTons1__duploFault(soap, &a->ns1__DuploFault);
	soap_markelement(soap, a->fault, a->__type);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Detail *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Detail), type))
		return soap->error;
	if (soap_out_PointerTons1__duploFault(soap, "ns1:DuploFault", -1, &a->ns1__DuploFault, ""))
		return soap->error;
	if (soap_putelement(soap, a->fault, "fault", -1, a->__type))
		return soap->error;
	if (soap_outliteral(soap, "-any", (char*const*)&a->__any, NULL))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail *a, const char *type)
{
	size_t soap_flag_ns1__DuploFault = 1;
	size_t soap_flag_fault = 1;
	size_t soap_flag___any = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Detail*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Detail(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__DuploFault && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTons1__duploFault(soap, "ns1:DuploFault", &a->ns1__DuploFault, "ns1:duploFault"))
				{	soap_flag_ns1__DuploFault--;
					continue;
				}
			}
			if (soap_flag_fault && soap->error == SOAP_TAG_MISMATCH)
			{	if ((a->fault = soap_getelement(soap, &a->__type)))
				{	soap_flag_fault = 0;
					continue;
				}
			}
			if (soap_flag___any && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_inliteral(soap, "-any", (char**)&a->__any))
				{	soap_flag___any--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Detail, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Detail(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct SOAP_ENV__Detail *p;
	size_t k = sizeof(struct SOAP_ENV__Detail);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_SOAP_ENV__Detail, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct SOAP_ENV__Detail);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct SOAP_ENV__Detail, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct SOAP_ENV__Detail location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a, const char *tag, const char *type)
{
	if (soap_out_SOAP_ENV__Detail(soap, tag ? tag : "SOAP-ENV:Detail", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Reason))
		soap_serialize_SOAP_ENV__Reason(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Reason *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Reason, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Reason(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Reason **)soap_malloc(soap, sizeof(struct SOAP_ENV__Reason *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Reason(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerToSOAP_ENV__Reason(soap, tag ? tag : "SOAP-ENV:Reason", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Detail))
		soap_serialize_SOAP_ENV__Detail(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Detail *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Detail, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Detail(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Detail **)soap_malloc(soap, sizeof(struct SOAP_ENV__Detail *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Detail(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerToSOAP_ENV__Detail(soap, tag ? tag : "SOAP-ENV:Detail", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Code))
		soap_serialize_SOAP_ENV__Code(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Code *const*a, const char *type)
{
	char *mark;
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Code, &mark);
	if (id < 0)
		return soap->error;
	(void)soap_out_SOAP_ENV__Code(soap, tag, id, *a, type);
	soap_unmark(soap, mark);
	return soap->error;
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Code **)soap_malloc(soap, sizeof(struct SOAP_ENV__Code *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Code(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerToSOAP_ENV__Code(soap, tag ? tag : "SOAP-ENV:Code", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__getVersion(struct soap *soap, ns1__getVersion *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__getVersion))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__getVersion(struct soap *soap, const char *tag, int id, ns1__getVersion *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__getVersion, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_ns1__getVersion ? type : NULL);
}

SOAP_FMAC3 ns1__getVersion ** SOAP_FMAC4 soap_in_PointerTons1__getVersion(struct soap *soap, const char *tag, ns1__getVersion **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__getVersion **)soap_malloc(soap, sizeof(ns1__getVersion *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__getVersion *)soap_instantiate_ns1__getVersion(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (ns1__getVersion **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__getVersion, sizeof(ns1__getVersion), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__getVersion(struct soap *soap, ns1__getVersion *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTons1__getVersion(soap, tag ? tag : "ns1:getVersion", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__getVersion ** SOAP_FMAC4 soap_get_PointerTons1__getVersion(struct soap *soap, ns1__getVersion **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__getVersion(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__processGetInfo(struct soap *soap, ns1__processGetInfo *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__processGetInfo))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__processGetInfo(struct soap *soap, const char *tag, int id, ns1__processGetInfo *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__processGetInfo, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_ns1__processGetInfo ? type : NULL);
}

SOAP_FMAC3 ns1__processGetInfo ** SOAP_FMAC4 soap_in_PointerTons1__processGetInfo(struct soap *soap, const char *tag, ns1__processGetInfo **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__processGetInfo **)soap_malloc(soap, sizeof(ns1__processGetInfo *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__processGetInfo *)soap_instantiate_ns1__processGetInfo(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (ns1__processGetInfo **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__processGetInfo, sizeof(ns1__processGetInfo), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__processGetInfo(struct soap *soap, ns1__processGetInfo *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTons1__processGetInfo(soap, tag ? tag : "ns1:processGetInfo", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__processGetInfo ** SOAP_FMAC4 soap_get_PointerTons1__processGetInfo(struct soap *soap, ns1__processGetInfo **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__processGetInfo(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__process(struct soap *soap, ns1__process *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__process))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__process(struct soap *soap, const char *tag, int id, ns1__process *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__process, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_ns1__process ? type : NULL);
}

SOAP_FMAC3 ns1__process ** SOAP_FMAC4 soap_in_PointerTons1__process(struct soap *soap, const char *tag, ns1__process **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__process **)soap_malloc(soap, sizeof(ns1__process *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__process *)soap_instantiate_ns1__process(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (ns1__process **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__process, sizeof(ns1__process), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__process(struct soap *soap, ns1__process *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTons1__process(soap, tag ? tag : "ns1:process", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__process ** SOAP_FMAC4 soap_get_PointerTons1__process(struct soap *soap, ns1__process **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__process(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__duploFault(struct soap *soap, ns1__duploFault *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__duploFault))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__duploFault(struct soap *soap, const char *tag, int id, ns1__duploFault *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__duploFault, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_ns1__duploFault ? type : NULL);
}

SOAP_FMAC3 ns1__duploFault ** SOAP_FMAC4 soap_in_PointerTons1__duploFault(struct soap *soap, const char *tag, ns1__duploFault **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__duploFault **)soap_malloc(soap, sizeof(ns1__duploFault *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__duploFault *)soap_instantiate_ns1__duploFault(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (ns1__duploFault **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__duploFault, sizeof(ns1__duploFault), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__duploFault(struct soap *soap, ns1__duploFault *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTons1__duploFault(soap, tag ? tag : "ns1:duploFault", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__duploFault ** SOAP_FMAC4 soap_get_PointerTons1__duploFault(struct soap *soap, ns1__duploFault **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__duploFault(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__Version(struct soap *soap, ns1__Version *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__Version))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__Version(struct soap *soap, const char *tag, int id, ns1__Version *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__Version, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_ns1__Version ? type : NULL);
}

SOAP_FMAC3 ns1__Version ** SOAP_FMAC4 soap_in_PointerTons1__Version(struct soap *soap, const char *tag, ns1__Version **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__Version **)soap_malloc(soap, sizeof(ns1__Version *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__Version *)soap_instantiate_ns1__Version(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (ns1__Version **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__Version, sizeof(ns1__Version), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__Version(struct soap *soap, ns1__Version *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTons1__Version(soap, tag ? tag : "ns1:Version", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__Version ** SOAP_FMAC4 soap_get_PointerTons1__Version(struct soap *soap, ns1__Version **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__Version(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTodateTime(struct soap *soap, time_t *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	(void)soap_reference(soap, *a, SOAP_TYPE_dateTime);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTodateTime(struct soap *soap, const char *tag, int id, time_t *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_dateTime, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_dateTime(soap, tag, id, *a, type);
}

SOAP_FMAC3 time_t ** SOAP_FMAC4 soap_in_PointerTodateTime(struct soap *soap, const char *tag, time_t **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (time_t **)soap_malloc(soap, sizeof(time_t *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_dateTime(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (time_t **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_dateTime, sizeof(time_t), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTodateTime(struct soap *soap, time_t *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTodateTime(soap, tag ? tag : "dateTime", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 time_t ** SOAP_FMAC4 soap_get_PointerTodateTime(struct soap *soap, time_t **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTodateTime(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxsd__base64Binary(struct soap *soap, xsd__base64Binary *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (*a)
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxsd__base64Binary(struct soap *soap, const char *tag, int id, xsd__base64Binary *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, *a ? (*a)->__ptr : NULL, *a ? (*a)->__size : 0, type, SOAP_TYPE_xsd__base64Binary, NULL);
	if (!*a || id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_xsd__base64Binary ? type : NULL);
}

SOAP_FMAC3 xsd__base64Binary ** SOAP_FMAC4 soap_in_PointerToxsd__base64Binary(struct soap *soap, const char *tag, xsd__base64Binary **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (xsd__base64Binary **)soap_malloc(soap, sizeof(xsd__base64Binary *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (xsd__base64Binary *)soap_instantiate_xsd__base64Binary(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (xsd__base64Binary **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_xsd__base64Binary, sizeof(xsd__base64Binary), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxsd__base64Binary(struct soap *soap, xsd__base64Binary *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerToxsd__base64Binary(soap, tag ? tag : "xsd:base64Binary", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 xsd__base64Binary ** SOAP_FMAC4 soap_get_PointerToxsd__base64Binary(struct soap *soap, xsd__base64Binary **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToxsd__base64Binary(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__photoExtra(struct soap *soap, ns1__photoExtra *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__photoExtra))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__photoExtra(struct soap *soap, const char *tag, int id, ns1__photoExtra *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__photoExtra, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_ns1__photoExtra ? type : NULL);
}

SOAP_FMAC3 ns1__photoExtra ** SOAP_FMAC4 soap_in_PointerTons1__photoExtra(struct soap *soap, const char *tag, ns1__photoExtra **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__photoExtra **)soap_malloc(soap, sizeof(ns1__photoExtra *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__photoExtra *)soap_instantiate_ns1__photoExtra(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (ns1__photoExtra **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__photoExtra, sizeof(ns1__photoExtra), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__photoExtra(struct soap *soap, ns1__photoExtra *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTons1__photoExtra(soap, tag ? tag : "ns1:photoExtra", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__photoExtra ** SOAP_FMAC4 soap_get_PointerTons1__photoExtra(struct soap *soap, ns1__photoExtra **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__photoExtra(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__trCheckIn(struct soap *soap, ns1__trCheckIn *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__trCheckIn))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__trCheckIn(struct soap *soap, const char *tag, int id, ns1__trCheckIn *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__trCheckIn, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_ns1__trCheckIn ? type : NULL);
}

SOAP_FMAC3 ns1__trCheckIn ** SOAP_FMAC4 soap_in_PointerTons1__trCheckIn(struct soap *soap, const char *tag, ns1__trCheckIn **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__trCheckIn **)soap_malloc(soap, sizeof(ns1__trCheckIn *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__trCheckIn *)soap_instantiate_ns1__trCheckIn(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (ns1__trCheckIn **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__trCheckIn, sizeof(ns1__trCheckIn), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__trCheckIn(struct soap *soap, ns1__trCheckIn *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTons1__trCheckIn(soap, tag ? tag : "ns1:trCheckIn", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__trCheckIn ** SOAP_FMAC4 soap_get_PointerTons1__trCheckIn(struct soap *soap, ns1__trCheckIn **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__trCheckIn(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__message(struct soap *soap, ns1__message *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__message))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__message(struct soap *soap, const char *tag, int id, ns1__message *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__message, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_ns1__message ? type : NULL);
}

SOAP_FMAC3 ns1__message ** SOAP_FMAC4 soap_in_PointerTons1__message(struct soap *soap, const char *tag, ns1__message **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__message **)soap_malloc(soap, sizeof(ns1__message *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__message *)soap_instantiate_ns1__message(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (ns1__message **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__message, sizeof(ns1__message), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__message(struct soap *soap, ns1__message *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTons1__message(soap, tag ? tag : "ns1:message", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__message ** SOAP_FMAC4 soap_get_PointerTons1__message(struct soap *soap, ns1__message **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__message(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToint(struct soap *soap, int *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	(void)soap_reference(soap, *a, SOAP_TYPE_int);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToint(struct soap *soap, const char *tag, int id, int *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_int, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_int(soap, tag, id, *a, type);
}

SOAP_FMAC3 int ** SOAP_FMAC4 soap_in_PointerToint(struct soap *soap, const char *tag, int **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (int **)soap_malloc(soap, sizeof(int *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_int(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (int **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_int, sizeof(int), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToint(struct soap *soap, int *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerToint(soap, tag ? tag : "int", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int ** SOAP_FMAC4 soap_get_PointerToint(struct soap *soap, int **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToint(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxsd__decimal(struct soap *soap, std::string *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_xsd__decimal))
		soap_serialize_xsd__decimal(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxsd__decimal(struct soap *soap, const char *tag, int id, std::string *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_xsd__decimal, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_xsd__decimal(soap, tag, id, *a, type);
}

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerToxsd__decimal(struct soap *soap, const char *tag, std::string **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (std::string **)soap_malloc(soap, sizeof(std::string *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_xsd__decimal(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (std::string **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_xsd__decimal, sizeof(std::string), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxsd__decimal(struct soap *soap, std::string *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerToxsd__decimal(soap, tag ? tag : "xsd:decimal", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerToxsd__decimal(struct soap *soap, std::string **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToxsd__decimal(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__cameraInfo(struct soap *soap, ns1__cameraInfo *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__cameraInfo))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__cameraInfo(struct soap *soap, const char *tag, int id, ns1__cameraInfo *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__cameraInfo, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_ns1__cameraInfo ? type : NULL);
}

SOAP_FMAC3 ns1__cameraInfo ** SOAP_FMAC4 soap_in_PointerTons1__cameraInfo(struct soap *soap, const char *tag, ns1__cameraInfo **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__cameraInfo **)soap_malloc(soap, sizeof(ns1__cameraInfo *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__cameraInfo *)soap_instantiate_ns1__cameraInfo(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (ns1__cameraInfo **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__cameraInfo, sizeof(ns1__cameraInfo), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__cameraInfo(struct soap *soap, ns1__cameraInfo *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTons1__cameraInfo(soap, tag ? tag : "ns1:cameraInfo", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__cameraInfo ** SOAP_FMAC4 soap_get_PointerTons1__cameraInfo(struct soap *soap, ns1__cameraInfo **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__cameraInfo(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostd__string(struct soap *soap, std::string *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_std__string))
		soap_serialize_std__string(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostd__string(struct soap *soap, const char *tag, int id, std::string *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_std__string, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_std__string(soap, tag, id, *a, type);
}

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTostd__string(struct soap *soap, const char *tag, std::string **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (std::string **)soap_malloc(soap, sizeof(std::string *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_std__string(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (std::string **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_std__string, sizeof(std::string), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostd__string(struct soap *soap, std::string *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTostd__string(soap, tag ? tag : "string", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTostd__string(struct soap *soap, std::string **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTostd__string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTounsignedByte(struct soap *soap, unsigned char *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	(void)soap_reference(soap, *a, SOAP_TYPE_unsignedByte);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTounsignedByte(struct soap *soap, const char *tag, int id, unsigned char *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_unsignedByte, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_unsignedByte(soap, tag, id, *a, type);
}

SOAP_FMAC3 unsigned char ** SOAP_FMAC4 soap_in_PointerTounsignedByte(struct soap *soap, const char *tag, unsigned char **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (unsigned char **)soap_malloc(soap, sizeof(unsigned char *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_unsignedByte(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (unsigned char **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_unsignedByte, sizeof(unsigned char), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTounsignedByte(struct soap *soap, unsigned char *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTounsignedByte(soap, tag ? tag : "unsignedByte", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 unsigned char ** SOAP_FMAC4 soap_get_PointerTounsignedByte(struct soap *soap, unsigned char **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTounsignedByte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap *soap, char *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	(void)soap_reference(soap, *a, SOAP_TYPE__QName);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE__QName);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap *soap, const char *tag, char **a, const char *type)
{
	a = soap_instring(soap, tag, a, type, SOAP_TYPE__QName, 2, 0, -1, NULL);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	if (soap_out__QName(soap, tag ? tag : "QName", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in__QName(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap *soap, char *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	(void)soap_reference(soap, *a, SOAP_TYPE_string);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE_string);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap *soap, const char *tag, char **a, const char *type)
{
	a = soap_instring(soap, tag, a, type, SOAP_TYPE_string, 1, 0, -1, NULL);
	return a;
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_new_string(struct soap *soap, int n)
{
	char * *a = static_cast<char * *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(char *)));
	for (char * *p = a; p && n--; ++p)
		soap_default_string(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	if (soap_out_string(soap, tag ? tag : "string", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in_string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfint(struct soap *soap, std::vector<int> *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfint(struct soap *soap, const std::vector<int> *a)
{
	(void)soap; (void)a;/* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfint(struct soap *soap, const char *tag, int id, const std::vector<int> *a, const char *type)
{
	(void)id; (void)type; /* appease -Wall -Werror */
	for (std::vector<int> ::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if (soap_out_int(soap, tag, id, &(*i), ""))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<int> * SOAP_FMAC4 soap_in_std__vectorTemplateOfint(struct soap *soap, const char *tag, std::vector<int> *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	short soap_flag;
	for (soap_flag = 0;; soap_flag = 1)
	{
		if (tag && *tag != '-')
		{	if (soap_element_begin_in(soap, tag, 1, NULL))
				break;
			soap_revert(soap);
		}
		if (!a && !(a = soap_new_std__vectorTemplateOfint(soap)))
			return NULL;
		else if (static_cast<size_t>(a->size()) > soap->maxoccurs)
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
		int n;
		soap_default_int(soap, &n);
		if (tag && *tag != '-' && (*soap->id || *soap->href == '#'))
		{	if (!soap_id_forward(soap, *soap->id?soap->id:soap->href, a, static_cast<size_t>(a->size()), SOAP_TYPE_int, SOAP_TYPE_std__vectorTemplateOfint, sizeof(int), 0, soap_finsert, soap_fbase))
				break;
			if (!soap_in_int(soap, tag, NULL, "xsd:int"))
				break;
		}
		else
		{	if (!soap_in_int(soap, tag, &n, "xsd:int"))
				break;
		}
		a->insert(a->end(), n);
		if (!tag || *tag == '-')
			return a;
	}
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC1 std::vector<int>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfint(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOfint(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	std::vector<int> *p;
	size_t k = sizeof(std::vector<int> );
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_std__vectorTemplateOfint, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, std::vector<int> );
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, std::vector<int> , n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated std::vector<int>  location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons1__photoExtra(struct soap *soap, std::vector<ns1__photoExtra *> *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons1__photoExtra(struct soap *soap, const std::vector<ns1__photoExtra *> *a)
{
	(void)soap; (void)a;/* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	for (std::vector<ns1__photoExtra *> ::const_iterator i = a->begin(); i != a->end(); ++i)
		soap_serialize_PointerTons1__photoExtra(soap, &(*i));
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons1__photoExtra(struct soap *soap, const char *tag, int id, const std::vector<ns1__photoExtra *> *a, const char *type)
{
	(void)id; (void)type; /* appease -Wall -Werror */
	for (std::vector<ns1__photoExtra *> ::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if (soap_out_PointerTons1__photoExtra(soap, tag, id, &(*i), ""))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<ns1__photoExtra *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons1__photoExtra(struct soap *soap, const char *tag, std::vector<ns1__photoExtra *> *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	short soap_flag;
	for (soap_flag = 0;; soap_flag = 1)
	{
		if (tag && *tag != '-')
		{	if (soap_element_begin_in(soap, tag, 1, NULL))
				break;
			soap_revert(soap);
		}
		if (!a && !(a = soap_new_std__vectorTemplateOfPointerTons1__photoExtra(soap)))
			return NULL;
		else if (static_cast<size_t>(a->size()) > soap->maxoccurs)
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
		ns1__photoExtra *n;
		n = NULL;
		if (tag && *tag != '-' && (*soap->id || *soap->href == '#'))
		{	if (!soap_id_forward(soap, *soap->id?soap->id:soap->href, a, static_cast<size_t>(a->size()), SOAP_TYPE_ns1__photoExtra, SOAP_TYPE_std__vectorTemplateOfPointerTons1__photoExtra, sizeof(ns1__photoExtra), 1, soap_finsert, soap_fbase))
				break;
			if (!soap_in_PointerTons1__photoExtra(soap, tag, NULL, "ns1:photoExtra"))
				break;
		}
		else
		{	if (!soap_in_PointerTons1__photoExtra(soap, tag, &n, "ns1:photoExtra"))
				break;
		}
		a->insert(a->end(), n);
		if (!tag || *tag == '-')
			return a;
	}
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC1 std::vector<ns1__photoExtra *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons1__photoExtra(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOfPointerTons1__photoExtra(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	std::vector<ns1__photoExtra *> *p;
	size_t k = sizeof(std::vector<ns1__photoExtra *> );
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_std__vectorTemplateOfPointerTons1__photoExtra, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, std::vector<ns1__photoExtra *> );
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, std::vector<ns1__photoExtra *> , n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated std::vector<ns1__photoExtra *>  location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

#if defined(__BORLANDC__)
#pragma option pop
#pragma option pop
#endif

/* End of soapC.cpp */
