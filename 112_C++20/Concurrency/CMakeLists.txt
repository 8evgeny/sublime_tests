set(CMAKE_CXX_STANDARD 20)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(COMPILE_OPTIONS "-Wpedantic;-Wall;-Wextra")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS}  -pthread -fcoroutines")

add_executable(Concurrency_1  atomicRef.cpp)
add_executable(Concurrency_2  atomicRefCopy.cpp)
add_executable(Concurrency_3  atomicReference.cpp)
add_executable(Concurrency_4  bossWorkers.cpp)
add_executable(Concurrency_5  conditionVariableAny.cpp)
add_executable(Concurrency_6  coutSynchronized.cpp)
add_executable(Concurrency_7  coutUnsynchronized.cpp)
add_executable(Concurrency_8  eagerFuture.cpp)
add_executable(Concurrency_9  fullTimePartTimeWorkers.cpp)
add_executable(Concurrency_10  greedyGenerator.cpp)
add_executable(Concurrency_11  infiniteDataStream.cpp)
add_executable(Concurrency_12  interruptJthread.cpp)
add_executable(Concurrency_13  invokeCallback.cpp)
add_executable(Concurrency_14  jthreadJoinable.cpp)
#add_executable(Concurrency_15  lazyGenerator.cpp)
add_executable(Concurrency_16  senderReceiver.cpp)
add_executable(Concurrency_17  sequenceOutput.cpp)
add_executable(Concurrency_18  startJob.cpp)
add_executable(Concurrency_19  synchronizedOutput.cpp)
add_executable(Concurrency_20  threadJoinable.cpp)
add_executable(Concurrency_21  threadSynchronizationAtomicBool.cpp)
add_executable(Concurrency_22  threadSynchronizationAtomicFlag.cpp)
add_executable(Concurrency_23  threadSynchronizationConditionVariables.cpp)
add_executable(Concurrency_24  threadSynchronizationPromiseFuture.cpp)
add_executable(Concurrency_25  threadSynchronizationSemaphore.cpp)
