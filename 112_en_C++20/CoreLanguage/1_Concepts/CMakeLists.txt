set(CMAKE_CXX_STANDARD 20)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(COMPILE_OPTIONS "-Wpedantic;-Wall;-Wextra")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS}  \
    -pthread \
    -fcoroutines \
    -fmodules-ts")
project(1_Concepts)
add_executable(CoreLanguage_${PROJECT_NAME}_1_tooSpecific  1_tooSpecific.cpp)
add_executable(CoreLanguage_${PROJECT_NAME}_2_tooGeneric  2_tooGeneric.cpp)
add_executable(CoreLanguage_${PROJECT_NAME}_3_IntegralVariations  3_conceptsIntegralVariations.cpp)
add_executable(CoreLanguage_${PROJECT_NAME}_4_requiresClause  4_requiresClause.cpp)
add_executable(CoreLanguage_${PROJECT_NAME}_5_compileTimePredicate  5_compileTimePredicate.cpp)
add_executable(CoreLanguage_${PROJECT_NAME}_6_conceptClassTemplate  6_conceptClassTemplate.cpp)
add_executable(CoreLanguage_${PROJECT_NAME}_7_conceptMemberFunction  7_conceptMemberFunction.cpp)
add_executable(CoreLanguage_${PROJECT_NAME}_8_allAnyNone  8_allAnyNone.cpp)
add_executable(CoreLanguage_${PROJECT_NAME}_9_conceptsOverloadingFunctionTemplates  9_conceptsOverloadingFunctionTemplates.cpp)
add_executable(CoreLanguage_${PROJECT_NAME}_10_conceptsSpecialization  10_conceptsSpecialization.cpp)
add_executable(CoreLanguage_${PROJECT_NAME}_11_genericLambdaTemplate  11_genericLambdaTemplate.cpp)
add_executable(CoreLanguage_${PROJECT_NAME}_12_placeholders  12_placeholders.cpp)
