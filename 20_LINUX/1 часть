Таблица 4.1. Групповые символы

* Любая последовательность любых символов
? Любой один символ
[ символы] Любой один символ из указанного множества символов
[!символы] Любой один символ, не принадлежащий указанному множеству символов
[[:класс:]] Любой один символ, принадлежащий указанному классу

Таблица 4.2. Наиболее часто используемые классы символов

[:alnum:] Любой алфавитно-цифровой символ
[:alpha:] Любой алфавитный символ
[:digit:] Любой цифровой символ
[:lower:] Любая буква в нижнем регистре
[:upper:] Любая буква в верхнем регистре

Таблица 4.3. Примеры использования групповых символов

* Все имена файлов
g* Все имена файлов, начинающиеся с символа «g »
b*.txt Все имена файлов, начинающиеся с символа «b », за которым 
следует любое число других символов, и заканчивающиеся на «.txt»
Data??? Все имена файлов, начинающиеся с символов «Data», за которыми следуют ровно три любых символа
[abc]* Все имена файлов, начинающиеся с символа «a », «b » или «c »
BACKUP.[0-9][0-9][0-9] Все имена файлов, начинающиеся с символов «BACKUP.», за которыми следуют ровно три цифровых символа
[[:upper:]]* Все имена файлов, начинающиеся с буквы в верхнем регистре
[![:digit:]]* Все имена файлов, не начинающиеся с цифры
*[[:lower:]123] Все имена файлов, заканчивающиеся буквой в нижнем регистре или цифрой «1 »,«2 » или «3 »


cp — копирование файлов и каталогов
Таблица 4.4. Параметры команды cp

-a, --archive Скопировать файлы и каталоги со всеми атрибутами, включая идентификаторы владельцев и права доступа. Без этого параметра копии обычно получают значения атрибутов по умолчанию, определенных для пользователя, выполняющего копирование
-i, --interactive Запрашивать у пользователя подтверждение перед пере­записью существующего файла. Если этот параметр отсутствует, команда cp просто перезапишет существующие файлы
-r, --recursive Рекурсивно копировать каталоги и их содержимое. Это обязательный параметр (или параметр -a) при копировании каталогов
-u, --update При копировании файлов из одного каталога в другой копиро-
вать только файлы, отсутствующие в каталоге назначения или более новые
-v, --verbose Выводить информационные сообщения в процессе копирования

Таблица 4.5. Примеры использования команды cp

cp file1 file2 Скопирует file1 в file2. Если file2 существует, он будет затерт 
новым файлом file1. Если file2 отсутствует, он будет создан
cp -i file1 file2 То же, что и выше, но если файл file2 существует, у пользователя 
будет запрошено подтверждение перед перезаписью файла
cp file1 file2 dir1 Скопирует file1 и file2 в каталог dir1. Каталог dir1 должен существовать
cp dir1/* dir2 С использованием группового символа. Скопирует все файлы из каталога dir1 в каталог dir2. Каталог dir2 должен существовать
cp -r dir1 dir2 Скопирует каталог dir1 (и все его содержимое) в каталог dir2. 
Если каталог dir2 не существует, он будет создан и заполнен содержимым каталога dir1

ln — создание ссылок
ln файл ссылка
создает жесткую ссылку.
ln -s элемент ссылка
создает символическую ссылку, где элементом может быть файл или каталог.

type — получение типа команды
type команда

which — определение местоположения выполняемого файла
man — вывод страниц справочного руководства
man программа
Таблица 5.1. Организация справочного руководства

1 Пользовательские команды
2 Программные интерфейсы системных вызовов в ядре
3 Программные интерфейсы в библиотеке C
4 Специальные файлы, такие как узлы устройств и драйверы
5 Форматы файлов
6 Игры и развлечения, такие как хранители экрана
7 Прочее
8 Команды системного администрирования

!!!  apropos — вывод списка подходящих команд
команда man параметром -k действует как apropos.

man bash  - читать!!!

whatis — вывод очень краткого описания команды

info — вывод записи из справочного руководства Info

Таблица 5.2. Команды программы info

? Вывести справку
Page Up или Backspace Вывести предыдущую страницу
Page Down или ПРОБЕЛ Вывести следующую страницу
n Вперед (next) — вывести следующий узел
p Назад (previous) — вывести предыдущий узел
u Вверх (up) — вывести узел, родительский по отношению 
к текущему, обычно меню
ENTER Перейти по гиперссылке, находящейся на позиции курсора
q Завершить (quit)

alias имя='строка'
alias foo='cd /usr; ls; cd -'
[me@linuxbox ~]$ unalias foo
[me@linuxbox ~]$ type foo
bash: type: foo: не найден

если вам понадобится очистить какой-нибудь файл (или создать новый, пустой файл), это можно сделать
с помощью следующего трюка:
[me@linuxbox ~]$ > ls-output.txt

Оператор >> просто добавит результаты в конец файла.

стандартный ввод, вывод и вывод ошибок. Командная оболочка ссылается на
них как на файловые дескрипторы 0 1 2 соответственно.
[me@linuxbox ~]$ ls -l /bin/usr 2> ls-error.txt
Номер файлового дескриптора 2 помещается непосредственно перед оператором перенаправления, чтобы перенаправить стандартный вывод ошибок в файл ls-error.txt.

[me@linuxbox ~]$ ls -l /bin/usr > ls-output.txt 2>&1
Здесь выполняется два перенаправления. Сначала — перенаправление стандартного вывода в файл ls-output.txt, а затем, с использованием нотации 2>&1, — перенаправление файлового дескриптора 2 (стандартный вывод ошибок) в файловый дескриптор 1 (стандартный вывод).

Современные версии bash поддерживают второй, более простой метод выполнения перенаправления этого вида:
[me@linuxbox ~]$ ls -l /bin/usr &> ls-output.txt
Чтобы подавить вывод сообщений об ошибках, достаточно проделать следующее:
[me@linuxbox ~]$ ls -l /bin/usr 2> /dev/null

Поскольку cat способна принимать сразу несколько файлов, она используется для их объединения.
[me@linuxbox ~]$ cat movie.mpeg.0* > movie.mpeg

wc — вывод числа строк, слов и байтов
[me@linuxbox ~]$ ls /bin /usr/bin | sort | uniq | wc -l
2728

сохраним полный список файлов в каталогах в файле ls.txt, перед тем как он будет отфильтрован командой grep:
[me@linuxbox ~]$ ls /usr/bin | tee ls.txt | grep zip

Чтобы увидеть список доступных переменных, выполните следующую команду:
[me@linuxbox ~]$ printenv | less
